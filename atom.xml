<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ifelseboyxx&#39;s Blog</title>
  <subtitle>学有所获，习有所得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-07T13:33:36.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ifelseboyxx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift 知识小集</title>
    <link href="http://yoursite.com/2017/12/07/swift-tips/"/>
    <id>http://yoursite.com/2017/12/07/swift-tips/</id>
    <published>2017-12-07T10:05:23.000Z</published>
    <updated>2017-12-07T13:33:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容均是笔者学习过程中<strong>收集</strong>的知识点，顺序比较跳跃，初衷是为了方便查阅，顺便加深记忆。<strong>内容会不断更新</strong>，如果有什么问题或者有好的 Swift 方面的语法糖或者知识点也可以提出来，我会挑选斟酌后收录，欢迎大家关注～</p>
<blockquote>
<p>version： Swift =&gt; 4.0 </p>
</blockquote>
<p><strong>目录：</strong></p>
<blockquote>
<p><a href="#1.1.1">Associated Object</a><br><a href="#1.1.2">Delegate 声明为 weak</a><br><a href="#1.1.3">可选协议和协议扩展</a><br><a href="#1.1.4">单例</a><br><a href="#1.1.5">输出格式化</a><br><a href="#1.1.6">Selector</a><br><a href="#1.1.7">将 protocol 的方法声明为 mutating</a><br><a href="#1.1.8">数组遍历 enumerate</a><br><a href="#1.1.9">输入输出参数 inout</a><br><a href="#1.2.0">Default 参数</a><br><a href="#1.2.1">延迟加载 lazy</a><br><a href="#1.2.2">编译标记</a><br><a href="#1.2.3">换行符</a><br><a href="#1.2.4">字符串切割 split</a><br><a href="#1.2.5">KVC</a><br><a href="#1.2.6">Swift 中值类型和引用类型注意点</a><br><a href="#1.2.7">KVO</a><br><a href="#1.2.8">Swift UIButton 状态的叠加</a></p>
</blockquote>
<a id="more"></a>
<h2 id="1.1.1"> Associated Object </h2>

<p>Objective-C 的 runtime 里的 Associated Object 允许我们在使用 Category 扩展现有的类的功能的时候，直接添加实例变量。在 Swift 中 extension 不能添加<strong>存储属性</strong>，我们可以利用 Associated Object 来实现，比如下面的 <code>title</code> 「实际上」是一个存储属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MyClass.swift</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// MyClassExtension.swift</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> key: <span class="type">Void</span>?</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> title: <span class="type">String</span>? &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> swift_getAssociatedObject(<span class="keyword">self</span>, &amp;key) <span class="keyword">as</span>? <span class="type">String</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            swift_setAssociatedObject(<span class="keyword">self</span>,</div><div class="line">                &amp;key, newValue,</div><div class="line">                .swift_ASSOCIATION_RETAIN_NONATOMIC)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 测试</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTitle</span><span class="params">(<span class="number">_</span> input: MyClass)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> title = input.title &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Title: \(title)"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"没有设置"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = <span class="type">MyClass</span>()</div><div class="line">printTitle(a)</div><div class="line">a.title = <span class="string">"Swifter.tips"</span></div><div class="line">printTitle(a)</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// 没有设置</span></div><div class="line"><span class="comment">// Title: Swifter.tips”</span></div></pre></td></tr></table></figure>
<h2 id="1.1.2"> Delegate 声明为 weak </h2>

<p>Swift 中 Delegate 需要被声明成 <code>weak</code>，来避免访问到已被回收的内存而导致崩溃，如果我们像下面这样，是编译不过的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyClassDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">MyClassDelegate</span>?</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">MyClassDelegate</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">var</span> someInstance: <span class="type">MyClass</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        someInstance = <span class="type">MyClass</span>()</div><div class="line">        someInstance.delegate = <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Do something"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译失败</span></div><div class="line"><span class="comment">// 'weak' may only be applied to class and class-bound protocol types, not 'MyClassDelegate'</span></div></pre></td></tr></table></figure>
<p>这是因为 Swift 的 protocol 是可以被除了 class 以外的其他类型遵守的，而对于像 <code>struct</code> 或是 <code>enum</code> 这样的类型，本身就不通过引用计数来管理内存，所以也不可能用 <code>weak</code> 这样的 ARC 的概念来进行修饰。</p>
<p>想要在 Swift 中使用 weak delegate，我们就需要将 protocol 限制在 class 内：</p>
<ul>
<li>一种做法是将 protocol 声明为 Objective-C 的，这可以通过在 protocol 前面加上 <code>@swift</code> 关键字来达到，Objective-C 的 protocol 都只有类能实现，因此使用 weak 来修饰就合理了：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@swift <span class="class"><span class="keyword">protocol</span> <span class="title">MyClassDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>另一种<strong>可能更好</strong>的办法是在 protocol 声明的名字后面加上 <code>class</code>，这可以为编译器显式地指明这个 protocol 只能由 <code>class</code> 来实现，避免了过多的不必要的 Objective-C 兼容：</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyClassDelegate</span>: <span class="title">class</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1.1.3"> 可选协议和协议扩展 </h2>

<p>Objective-C 中的 protocol 里存在 <code>@optional</code> 关键字，被这个关键字修饰的方法并非必须要被实现，原生的 Swift protocol 里没有可选项，所有定义的方法都是必须实现的，如果不是实现是无法编译的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">MyProtocol</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译失败</span></div><div class="line"><span class="comment">// Type 'ViewController' does not conform to protocol 'MyProtocol'</span></div></pre></td></tr></table></figure>
<p>如果我们想要像 Objective-C 里那样定义可选的协议方法，就需要将协议本身和可选方法都定义为 Objective-C 的，也即在 protocol 定义之前加上 <code>@swift</code>，方法之前加上 <code>@swift optional</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@swift <span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol</span> </span>&#123;</div><div class="line">    @swift <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">myMethod</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，对于所有的声明，它们的前缀修饰是完全分开的，<strong>也就是说你不能像是在 Objective-C 里那样用一个 <code>@optional</code> 指定接下来的若干个方法都是可选的了，</strong>必须对每一个可选方法添加前缀，对于没有前缀的方法来说，它们是默认必须实现的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@swift <span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol</span> </span>&#123;</div><div class="line">    @swift <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span>        <span class="comment">// 可选</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">necessaryMethod</span><span class="params">()</span></span>                      <span class="comment">// 必须</span></div><div class="line">    @swift <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">anotherOptionalMethod</span><span class="params">()</span></span> <span class="comment">// 可选</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>一个不可避免的限制是</strong>，使用 <code>@swift</code> 修饰的 protocol 就只能被 <code>class</code> 实现了，也就是说，对于 <code>struct</code> 和 <code>enum</code> 类型，我们是无法令它们所实现的协议中含有可选方法或者属性的。另外，实现它的 <code>class</code> 中的方法还必须也被标注为 <code>@swift</code>，或者整个类就是继承自 <code>NSObject</code>。对于这种问题，在 Swift 2.0 中，我们有了另一种选择，那就是使用 <strong>protocol extension</strong>。我们可以在声明一个 protocol 之后再用 extension 的方式给出部分方法<strong>默认的实现</strong>，这样这些方法在实际的类中就是可选实现的了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">MyProtocol</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span>        <span class="comment">// 可选</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">necessaryMethod</span><span class="params">()</span></span>       <span class="comment">// 必须</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">anotherOptionalMethod</span><span class="params">()</span></span> <span class="comment">// 可选</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MyProtocol</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">//默认的可选实现</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">optionalMethod</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"optionalMethod"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//默认的可选实现</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">anotherOptionalMethod</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"anotherOptionalMethod"</span>)</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>,<span class="title">MyProtocol</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 必须的实现</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">necessaryMethod</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"necessaryMethod"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.optionalMethod();</div><div class="line">        <span class="keyword">self</span>.necessaryMethod();</div><div class="line">        <span class="keyword">self</span>.anotherOptionalMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// optionalMethod</span></div><div class="line"><span class="comment">// necessaryMethod</span></div><div class="line"><span class="comment">// necessaryMethod</span></div></pre></td></tr></table></figure>
<h2 id="1.1.4"> 单例 </h2>

<p>Swift 中的单例非常简单，Swift 1.2 以及之后：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>  </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> sharedInstance = <span class="type">Singleton</span>()</div><div class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法不但是线程安全的，也是懒加载的，<code>let</code> 定义的属性本身就是线程安全的，同时 <code>static</code> 定义的是一个 class constant，拥有全局作用域和懒加载特性。</p>
<p>另外，这个类型中加入了一个私有的初始化方法，来覆盖默认的公开初始化方法，这让项目中的其他地方不能够通过 init 来生成自己的 <code>Singleton</code> 实例，也保证了类型单例的唯一性。如果你需要的是类似 default 的形式的单例 (也就是说这个类的使用者可以创建自己的实例) 的话，可以去掉这个私有的 <code>init</code> 方法。</p>
<h2 id="1.1.5"> 输出格式化 </h2>

<p>在 Objective-C 中的 <code>%@</code> 这样的格式在指定的位置设定占位符，然后通过参数的方式将实际要输出的内容补充完整。例如 Objective-C 中常用的向控制台输出的 <code>NSLog</code> 方法就使用了这种格式化方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">float a = <span class="number">1.234567</span>;</div><div class="line"><span class="type">NSString</span> *b = @<span class="string">"Helllo"</span>;</div><div class="line"><span class="type">NSLog</span>(@<span class="string">"float：%.2f  str：%p"</span>,a,b);</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// float：1.23  str：0x1024a1078</span></div></pre></td></tr></table></figure>
<p>对应 Swift 中我们可以这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1.234567</span></div><div class="line"><span class="keyword">let</span> b = <span class="string">"Helllo"</span></div><div class="line"><span class="keyword">let</span> <span class="built_in">c</span> = <span class="type">String</span>(format:<span class="string">"float：%.2f str：%p"</span>,a,b)</div><div class="line"><span class="built_in">print</span>(<span class="built_in">c</span>)</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// float：1.23 str：0x604000249e10</span></div></pre></td></tr></table></figure>
<h2 id="1.1.6"> Selector </h2>

<p><code>@selector</code> 是 Objective-C 时代的一个关键字，它可以将一个方法转换并赋值给一个 SEL 类型，它的表现很类似一个动态的函数指针。在 Swift 中没有 <code>@selector</code> 了，取而代之，从 Swift 2.2 开始我们使用 <code>#selector</code> 来从暴露给 Objective-C 的代码中获取一个 <code>selector</code>，并且因为 <code>selector</code> 是 Objective-C runtime 的概念，在 Swift 4 中，默认情况下所有的 Swift 方法在 Objective-C 中都是不可见的，所以你需要在这类方法前面加上 <code>@swift</code> 关键字，将这个方法暴露给 Objective-C，才能进行使用：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> btn = <span class="type">UIButton</span>.<span class="keyword">init</span>(type: .system)</div><div class="line">btn.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line">btn.frame = <span class="type">CGRect</span>(x: <span class="number">100</span>, y: <span class="number">100</span>, width: <span class="number">150</span>, height: <span class="number">40</span>)</div><div class="line">btn.setTitle(<span class="string">"Button"</span>, <span class="keyword">for</span>: .normal)</div><div class="line"><span class="comment">//无参数</span></div><div class="line">btn.addTarget(<span class="keyword">self</span>, action: #selector(btnClick), <span class="keyword">for</span>: .touchUpInside)</div><div class="line">view.addSubview(btn)</div><div class="line"></div><div class="line">@swift <span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">()</span></span>  &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"button click !"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="comment">//有参数</span></div><div class="line">btn.addTarget(<span class="keyword">self</span>, action: #selector(btnClick(<span class="number">_</span> :)), <span class="keyword">for</span>: .touchUpInside)</div><div class="line">...</div><div class="line"></div><div class="line">@swift <span class="function"><span class="keyword">func</span> <span class="title">btnClick</span><span class="params">(<span class="number">_</span> button: UIButton)</span></span>  &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"button click !"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1.1.7"> 将 protocol 的方法声明为 mutating </h2>

<p>Swift 的 protocol 不仅可以被 class 类型实现，也适用于 <code>struct</code> 和 <code>enum</code>，因为这个原因，我们在写给别人用的协议时需要多考虑是否使用 <code>mutating</code> 来修饰方法。Swift 的 <code>mutating</code> 关键字修饰方法是为了能在该方法中修改 <code>struct</code> 或是 <code>enum</code> 的变量，所以如果你没在协议方法里写 <code>mutating</code> 的话，别人如果用 <code>struct</code> 或者 <code>enum</code> 来实现这个协议的话，就不能在方法里改变自己的变量了，比如下面的代码是编译不过的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> color = <span class="string">"blue"</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span> &#123;</div><div class="line">        color = <span class="string">"red"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译失败</span></div><div class="line"><span class="comment">// Cannot assign to property: 'self' is immutable</span></div></pre></td></tr></table></figure>
<p>我们应该加上 <code>mutating</code> 关键字：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span></div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyCar</span>: <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> color = <span class="string">"blue"</span></div><div class="line">    </div><div class="line">    <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">changeColor</span><span class="params">()</span></span> &#123;</div><div class="line">        color = <span class="string">"red"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    <span class="keyword">var</span> car = <span class="type">MyCar</span>()</div><div class="line">    <span class="built_in">print</span>(car.color)</div><div class="line">    car.changeColor()</div><div class="line">    <span class="built_in">print</span>(car.color)    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// blue</span></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// red</span></div></pre></td></tr></table></figure>
<h2 id="1.1.8"> 数组遍历 enumerate </h2>

<p>使用 NSArray 时一个很常遇见的的需求是在枚举数组内元素的同时也想使用对应的<strong>下标索引</strong>，在 Objective-C 中最方便的方式是使用 NSArray 的 <code>enumerateObjectsUsingBlock:</code> ，在 Swift 中存在一个效率，安全性和可读性都很好的替代，那就是快速枚举某个数组的<code>EnumerateGenerator</code>，它的元素是同时包含了元素下标索引以及元素本身的多元组：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>]</div><div class="line"><span class="keyword">for</span> (idx, str) <span class="keyword">in</span> arr.enumerated() &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"idx: \(idx) str: \(str)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line">idx: <span class="number">0</span> str: a</div><div class="line">idx: <span class="number">1</span> str: b</div><div class="line">idx: <span class="number">2</span> str: <span class="built_in">c</span></div><div class="line">idx: <span class="number">3</span> str: d</div><div class="line">idx: <span class="number">4</span> str: e</div></pre></td></tr></table></figure>
<h2 id="1.1.9"> 输入输出参数 inout </h2>

<p>函数参数默认是<strong>常量</strong>，如果试图在函数体中更改参数值将会导致<strong>编译错误</strong>，比如下面的例子中尝试着交换值：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapTwoInts</span><span class="params">(<span class="number">_</span> a: Int, <span class="number">_</span> b: Int)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> temporaryA = a</div><div class="line">    a = b</div><div class="line">    b = temporaryA</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译失败</span></div><div class="line"><span class="comment">// Cannot assign to value: 'a' is a 'let' constant</span></div><div class="line"><span class="comment">// Cannot assign to value: 'b' is a 'let' constant</span></div></pre></td></tr></table></figure>
<p>如果想要一个函数可以修改参数的值，并且想要在这些修改在函数调用结束后仍然存在，那么就应该把这个参数定义为输入输出参数（In-Out Parameters）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swapTwoInts</span><span class="params">(<span class="number">_</span> a: <span class="keyword">inout</span> Int, <span class="number">_</span> b: <span class="keyword">inout</span> Int)</span></span> &#123;</div><div class="line">    <span class="keyword">let</span> temporaryA = a</div><div class="line">    a = b</div><div class="line">    b = temporaryA</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1.2.0"> Default 参数 </h2>

<p>Swift 的方法是支持默认参数的，也就是说在声明方法时，可以给某个参数指定一个默认使用的值。在调用该方法时要是传入了这个参数，则使用传入的值，如果缺少这个输入参数，那么直接使用设定的默认值进行调用。和其他很多语言的默认参数相比较，Swift 中的默认参数限制更少，并没有所谓 <strong>“默认参数之后不能再出现无默认值的参数”</strong>这样的规则，举个例子，下面两种方法的声明在 Swift 里都是合法可用的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello1</span><span class="params">(str1: String = <span class="string">"Hello"</span>, str2: String, str3: String)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(str1 + str2 + str3)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sayHello2</span><span class="params">(str1: String, str2: String, str3: String = <span class="string">"World"</span>)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(str1 + str2 + str3)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sayHello1(str2: <span class="string">" "</span>, str3: <span class="string">"World"</span>)</div><div class="line">sayHello2(str1: <span class="string">"Hello"</span>, str2: <span class="string">" "</span>)</div><div class="line"></div><div class="line"><span class="comment">//输出都是 Hello World</span></div></pre></td></tr></table></figure>
<h2 id="1.2.1"> 延迟加载 lazy </h2>

<p>延时加载或者说延时初始化是很常用的优化方法，在构建和生成新的对象的时候，内存分配会在运行时耗费不少时间，<strong>如果有一些对象的属性和内容非常复杂的话，这个时间更是不可忽略</strong>。另外，有些情况下我们并不会立即用到一个对象的所有属性，而默认情况下初始化时，<strong>那些在特定环境下不被使用的存储属性，也一样要被初始化和赋值</strong>，也是一种浪费。在 Objective-C 中，一个延迟加载一般是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ClassA.h</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *testString;</div><div class="line"></div><div class="line"><span class="comment">// ClassA.m</span></div><div class="line">- (<span class="built_in">NSString</span> *)testString &#123;</div><div class="line">     <span class="keyword">if</span> (!_testString) &#123;</div><div class="line">         _testString = <span class="string">@"Hello"</span>;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"只在首次访问输出"</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> _testString;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应在 Swift 中，使用 <code>lazy</code> 作为属性修饰符时，只能声明属性是<strong>变量</strong>，且我们需要显式地指定<strong>属性类型</strong>，否则会编译错误：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">let</span> str: <span class="type">String</span> = &#123;</div><div class="line">        <span class="keyword">let</span> str = <span class="string">"Hello"</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"只在首次访问输出"</span>)</div><div class="line">        <span class="keyword">return</span> str</div><div class="line">    &#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译失败</span></div><div class="line"><span class="comment">// 'lazy' cannot be used on a let</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> str = &#123;</div><div class="line">        <span class="keyword">let</span> str = <span class="string">"Hello"</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"只在首次访问输出"</span>)</div><div class="line">        <span class="keyword">return</span> str</div><div class="line">    &#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 编译失败</span></div><div class="line"><span class="comment">// Unable to infer complex closure return type</span></div></pre></td></tr></table></figure>
<p>我们应该声明为 <code>var</code> 并指定好类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</div><div class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> str: <span class="type">String</span> = &#123;</div><div class="line">        <span class="keyword">let</span> str = <span class="string">"Hello"</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"只在首次访问输出"</span>)</div><div class="line">        <span class="keyword">return</span> str</div><div class="line">    &#125;()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> ca = <span class="type">ClassA</span>()</div><div class="line">    <span class="built_in">print</span>(ca.str)</div><div class="line">    <span class="built_in">print</span>(ca.str)</div><div class="line">    <span class="built_in">print</span>(ca.str)   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// 只在首次访问输出</span></div><div class="line"><span class="comment">// Hello</span></div><div class="line"><span class="comment">// Hello</span></div><div class="line"><span class="comment">// Hello</span></div></pre></td></tr></table></figure>
<p>如果不需要做什么额外工作的话，也可以对这个 <code>lazy</code> 的属性直接写赋值语句：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> str: <span class="type">String</span> = <span class="string">"Hello"</span></div></pre></td></tr></table></figure>
<p>我们还可以利用 <code>lazy</code> 配合像 <code>map</code> 或是 <code>filter</code> 这类接受闭包并进行运行的方法一起，<strong>让整个行为变成延时进行的</strong>。在某些情况下这么做也对性能会有不小的帮助。例如，直接使用 map 时：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = <span class="number">1</span>...<span class="number">3</span></div><div class="line"><span class="keyword">let</span> result = data.<span class="built_in">map</span> &#123;</div><div class="line">    (i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"正在处理 \(i)"</span>)</div><div class="line">    <span class="keyword">return</span> i * <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"准备访问结果"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"操作后结果为 \(i)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"操作完毕"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// 正在处理 1</span></div><div class="line"><span class="comment">// 正在处理 2</span></div><div class="line"><span class="comment">// 正在处理 3</span></div><div class="line"><span class="comment">// 准备访问结果</span></div><div class="line"><span class="comment">// 操作后结果为 2</span></div><div class="line"><span class="comment">// 操作后结果为 4</span></div><div class="line"><span class="comment">// 操作后结果为 6</span></div><div class="line"><span class="comment">// 操作完毕</span></div></pre></td></tr></table></figure>
<p>而如果我们先进行一次 <code>lazy</code> 操作的话，我们就能得到延时运行版本的容器：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> data = <span class="number">1</span>...<span class="number">3</span></div><div class="line"><span class="keyword">let</span> result = data.<span class="built_in">lazy</span>.<span class="built_in">map</span> &#123;</div><div class="line">    (i: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span></div><div class="line">    <span class="built_in">print</span>(<span class="string">"正在处理 \(i)"</span>)</div><div class="line">    <span class="keyword">return</span> i * <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"准备访问结果"</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"操作后结果为 \(i)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">print</span>(<span class="string">"操作完毕"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 准备访问结果</span></div><div class="line"><span class="comment">// 正在处理 1</span></div><div class="line"><span class="comment">// 操作后结果为 2</span></div><div class="line"><span class="comment">// 正在处理 2</span></div><div class="line"><span class="comment">// 操作后结果为 4</span></div><div class="line"><span class="comment">// 正在处理 3</span></div><div class="line"><span class="comment">// 操作后结果为 6</span></div><div class="line"><span class="comment">// 操作完毕</span></div></pre></td></tr></table></figure>
<p>对于那些不需要完全运行，可能提前退出的情况，使用 lazy 来进行性能优化效果会非常有效。</p>
<h2 id="1.2.2"> 编译标记 </h2>

<p>在 Objective-C 中，我们经常在代码中插入 <code>#param</code> 符号来标记代码的区间，这样在 Xcode 的导航栏中我们就可以看到组织分块后的方法列表。在 Swift 中我们可以用 <code>MARK:</code> 来代替：</p>
<p><img src="http://p0kmbfoc8.bkt.clouddn.com/Snip20171207_3.png" alt=""></p>
<p>在 Objective-C 中还有一个很常用的编译标记，那就是 <code>#warning</code>，一个 <code>#warning</code> 标记可以在 Xcode 的代码编辑器中显示为明显的黄色警告条，非常适合用来提示代码的维护者和使用者需要对某些东西加以关注。在 Swift 中我们可以用 <code>FIXME:</code> 和 <code>TODO:</code> 配合 <code>shell</code> 来代替：</p>
<p><img src="http://p0kmbfoc8.bkt.clouddn.com/Snip20171207_8.png" alt=""></p>
<p>脚本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TAGS=&quot;TODO:|FIXME:&quot;</div><div class="line">echo &quot;searching $&#123;SRCROOT&#125; for $&#123;TAGS&#125;&quot;</div><div class="line">find &quot;$&#123;SRCROOT&#125;&quot; \( -name &quot;*.swift&quot; \) -print0 | xargs -0 egrep --with-filename --line-number --only-matching &quot;($TAGS).*\$&quot; | perl -p -e &quot;s/($TAGS)/ warning: \$1/&quot;</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://p0kmbfoc8.bkt.clouddn.com/Snip20171207_7.png" alt=""><br><img src="http://p0kmbfoc8.bkt.clouddn.com/Snip20171207_6.png" alt=""></p>
<h2 id="1.2.3"> 换行符 </h2>

<p>在 Swift 3 中，需要换行时是需要 <code>\n</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">"xxxx\nxxx"</span></div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// xxxx</span></div><div class="line"><span class="comment">// xxx</span></div></pre></td></tr></table></figure>
<p>在 swift 4 中，我们可以使用 <code>&quot;&quot;&quot;</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">let jsonStr = """</div><div class="line">        &#123;</div><div class="line">            "id": 123455,</div><div class="line">            "nickname": "xxxx",</div><div class="line">            "isMale": true,</div><div class="line">            "birthday": "2000年3月24日",</div><div class="line">            "personalURL": "https://xxxxxx.github.io"</div><div class="line">        &#125;</div><div class="line">        """</div><div class="line">          </div><div class="line">// 输出：</div><div class="line">&#123;</div><div class="line">    "id": 123455,</div><div class="line">    "nickname": "xxxx",</div><div class="line">    "isMale": true,</div><div class="line">    "birthday": "2000年3月24日",</div><div class="line">    "personalURL": "https://xxxxxx.github.io"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1.2.4"> 字符串切割 split </h2>

<p>我们需要切割某个字符串时可以用 <code>split</code> 方法，需要注意的是，返回的结果是个<strong>数组</strong>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">"Hello，world !"</span></div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">split</span>(separator: <span class="string">"，"</span>))</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// ["Hello", "world !"]</span></div></pre></td></tr></table></figure>
<h2 id="1.2.5"> KVC </h2>

<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = <span class="string">"ifelseboyxx"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Swift 4 中 Apple 引入了新的 KeyPath 的表达方式，现在，对于类型 <code>MyClass</code> 中的<strong>变量</strong> <code>name</code>，对应的 KeyPath 可以写为 <code>\MyClass.name</code>，利用 KVC 修改 <code>name</code> 值的话，我们可以这么操作：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> object = <span class="type">MyClass</span>()</div><div class="line"><span class="built_in">print</span>(<span class="string">"name: \(object.name)"</span>)</div><div class="line"><span class="comment">// set</span></div><div class="line">object[keyPath: \<span class="type">MyClass</span>.name] = <span class="string">"ifelseboy"</span></div><div class="line"><span class="comment">// get</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"name: \(object[keyPath: \MyClass.name])"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// name: ifelseboyxx</span></div><div class="line"><span class="comment">// name: ifelseboy</span></div></pre></td></tr></table></figure>
<p>另外 Swift 4 中 <code>struct</code> 同样支持 KVC ：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="type">MyStruct</span>(age: <span class="number">18</span>)</div><div class="line"><span class="built_in">print</span>(<span class="string">"我今年 \(obj.age) 岁了"</span>)</div><div class="line">obj[keyPath: \<span class="type">MyStruct</span>.age] = <span class="number">8</span></div><div class="line"><span class="built_in">print</span>(<span class="string">"我今年 \(obj[keyPath: \MyStruct.age]) 岁了"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// 我今年 18 岁了</span></div><div class="line"><span class="comment">// 我今年 8 岁了</span></div></pre></td></tr></table></figure>
<h2 id="1.2.6"> Swift 中值类型和引用类型注意点 </h2>

<p>KVC 一节中代码里有个注意点：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="type">MyStruct</span>(age: <span class="number">18</span>)</div><div class="line"><span class="comment">//替换为</span></div><div class="line"><span class="keyword">let</span> obj = <span class="type">MyStruct</span>(age: <span class="number">18</span>)</div></pre></td></tr></table></figure>
<p>是编译不过的，会报错：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">Cannot</span> assign to immutable expression of type '<span class="type">Int'</span></div></pre></td></tr></table></figure>
<p>笔者初次也犯了这样的错误，想当然的认为 <code>MyClass</code> 用 <code>let</code> 声明的是没有问题的，<code>struct</code> 也一样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> object = <span class="type">MyClass</span>()</div></pre></td></tr></table></figure>
<p><strong>其实原因很简单，swift 中 Class 是引用类型的，而 struct 是值类型的：值类型在被赋给一个变量，或被传给函数时，实际是做了一次拷贝。引用类型在被赋给一个变量，或被传给函数时，传递的是引用。</strong></p>
<h2 id="1.2.7"> KVO </h2>

<p>很遗憾，依然只有 <code>NSObject</code> 才能支持 KVO，另外由于 Swift 为了效率，默认禁用了动态派发，因此想用 Swift 来实现 KVO，我们还需要做额外的工作，那就是将想要观测的对象标记为 <code>dynamic</code> 和 <code>@objc</code>，下面的 🌰 是 <code>ViewController</code> 监听 <code>MyClass</code> 的 <code>date</code> 属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="meta">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">var</span> date = <span class="type">Date</span>()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> myObject: <span class="type">MyClass</span>!</div><div class="line">    <span class="keyword">var</span> observation: <span class="type">NSKeyValueObservation</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        myObject = <span class="type">MyClass</span>()</div><div class="line">        <span class="built_in">print</span>(<span class="string">"当前日期：\(myObject.date)"</span>)</div><div class="line">    </div><div class="line">        observation = myObject.observe(\<span class="type">MyClass</span>.date, options: [.old,.new], changeHandler: &#123; (<span class="number">_</span>, change) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> newDate = change.newValue , <span class="keyword">let</span> oldDate = change.oldValue &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"日期发生变化 old：\(oldDate) new：\(newDate) "</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.myObject.date = <span class="type">Date</span>()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// 当前日期：2017-12-07 06:31:26 +0000</span></div><div class="line"><span class="comment">// 日期发生变化 old：2017-12-07 06:31:26 +0000 new：2017-12-07 06:31:27 +0000</span></div></pre></td></tr></table></figure>
<p>在 Objective-C 中我们几乎可以没有限制地对所有满足 KVC 的属性进行监听，<strong>而现在我们需要属性有 <code>dynamic</code> 和 <code>@objc</code> 进行修饰</strong>。大多数情况下，我们想要观察的类包含这两个修饰 (除非这个类的开发者有意为之，否则一般也不会有人愿意多花功夫在属性前加上它们，因为这毕竟要损失一部分性能)，并且有时候我们很可能也无法修改想要观察的类的源码。遇到这样的情况的话，<strong>一个可能可行的方案是继承这个类并且将需要观察的属性使用 <code>dynamic</code> 和 <code>@objc</code> 进行重写。</strong>比如刚才我们的 <code>MyClass</code> 中如果 <code>date</code> <strong>没有相应标注的话</strong>，我们可能就需要一个新的 <code>MyChildClass</code>了： </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> date = <span class="type">Date</span>()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyChildClass</span>: <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="meta">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">override</span> <span class="keyword">var</span> date: <span class="type">Date</span> &#123;</div><div class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> <span class="keyword">super</span>.date &#125;</div><div class="line">        <span class="keyword">set</span> &#123; <span class="keyword">super</span>.date = newValue &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> myObject: <span class="type">MyChildClass</span>!</div><div class="line">    <span class="keyword">var</span> observation: <span class="type">NSKeyValueObservation</span>?</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        </div><div class="line">        myObject = <span class="type">MyChildClass</span>()</div><div class="line">        <span class="built_in">print</span>(<span class="string">"当前日期：\(myObject.date)"</span>)</div><div class="line">    </div><div class="line">        observation = myObject.observe(\<span class="type">MyChildClass</span>.date, options: [.old,.new], changeHandler: &#123; (<span class="number">_</span>, change) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> newDate = change.newValue , <span class="keyword">let</span> oldDate = change.oldValue &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"日期发生变化 old：\(oldDate) new：\(newDate) "</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() + <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.myObject.date = <span class="type">Date</span>()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// 当前日期：2017-12-07 06:36:50 +0000</span></div><div class="line"><span class="comment">// 日期发生变化 old：2017-12-07 06:36:50 +0000 new：2017-12-07 06:36:51 +0000</span></div></pre></td></tr></table></figure>
<h2 id="1.2.8"> Swift UIButton 状态的叠加 </h2> 

<p>在 Objective-C 中，如果我们想叠加按钮的某个状态，可以这么写：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIButton</span> * button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">[button setTitle:<span class="string">@"Test"</span> forState:<span class="built_in">UIControlStateNormal</span> | <span class="built_in">UIControlStateSelected</span>];</div></pre></td></tr></table></figure>
<p>对应的 Swift 我们可以这么写：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> btn = <span class="type">UIButton</span>.<span class="keyword">init</span>(type: .custom)</div><div class="line">btn.setTitle(<span class="string">"hehe"</span>, <span class="keyword">for</span>: [.normal ,.selected])</div></pre></td></tr></table></figure>
<p>把需要叠加的状态用个<strong>数组</strong>装起来就行了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下内容均是笔者学习过程中&lt;strong&gt;收集&lt;/strong&gt;的知识点，顺序比较跳跃，初衷是为了方便查阅，顺便加深记忆。&lt;strong&gt;内容会不断更新&lt;/strong&gt;，如果有什么问题或者有好的 Swift 方面的语法糖或者知识点也可以提出来，我会挑选斟酌后收录，欢迎大家关注～&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;version： Swift =&amp;gt; 4.0 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;目录：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;#1.1.1&quot;&gt;Associated Object&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.2&quot;&gt;Delegate 声明为 weak&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.3&quot;&gt;可选协议和协议扩展&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.4&quot;&gt;单例&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.5&quot;&gt;输出格式化&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.6&quot;&gt;Selector&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.7&quot;&gt;将 protocol 的方法声明为 mutating&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.8&quot;&gt;数组遍历 enumerate&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.1.9&quot;&gt;输入输出参数 inout&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.0&quot;&gt;Default 参数&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.1&quot;&gt;延迟加载 lazy&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.2&quot;&gt;编译标记&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.3&quot;&gt;换行符&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.4&quot;&gt;字符串切割 split&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.5&quot;&gt;KVC&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.6&quot;&gt;Swift 中值类型和引用类型注意点&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.7&quot;&gt;KVO&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#1.2.8&quot;&gt;Swift UIButton 状态的叠加&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Method Swizzling 实战：Hook 系统代理方法</title>
    <link href="http://yoursite.com/2017/11/30/hook_system_delegate/"/>
    <id>http://yoursite.com/2017/11/30/hook_system_delegate/</id>
    <published>2017-11-30T15:41:23.000Z</published>
    <updated>2017-11-30T15:41:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Method Swizzling 基本用法可以先看看博主之前的文章 <a href="http://blog.ifelseboyxx.com/2017/01/25/Method-Swizzling/" target="_blank" rel="external">浅谈 Method Swizzling</a>, 这里就不多做介绍了。本文以 <code>UIWebViewDelegate</code> 为例，介绍如何利用 Method Swizzling 来 Hook 系统的 delegate 方法， 主要有如下几个步骤：</p>
<ul>
<li>新建 UIWebView Category</li>
<li>Hook  UIWebView 的 <code>delegate</code> 方法</li>
<li>Hook  <code>UIWebViewDelegate</code> 协议中的具体方法</li>
</ul>
<a id="more"></a>
<h3 id="Hook-UIWebView-的代理"><a href="#Hook-UIWebView-的代理" class="headerlink" title="Hook  UIWebView 的代理"></a>Hook  UIWebView 的代理</h3><p>首先，我们应该明白，当我们想 Hook 某个方法函数时，必须知道对应的 <code>class</code> ，我们这里之所以 Hook UIWebView 的 delegate，为的就是找到继承了 <code>UIWebViewDelegate</code> 协议的 <code>class</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="comment">// Hook UIWebView</span></div><div class="line">    Method originalMethod = class_getInstanceMethod([<span class="built_in">UIWebView</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(setDelegate:));</div><div class="line">    Method ownerMethod = class_getInstanceMethod([<span class="built_in">UIWebView</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(hook_setDelegate:));</div><div class="line">    method_exchangeImplementations(originalMethod, ownerMethod);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)hook_setDelegate:(<span class="keyword">id</span>&lt;<span class="built_in">UIWebViewDelegate</span>&gt;)delegate &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> hook_setDelegate:delegate];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里我们需要注意，我们用的是 <code>class_getInstanceMethod</code> 而不是 <code>class_getClassMethod</code> ，因为 <code>setDelegate :</code> 是实例方法。另外我们这里用 <code>method_exchangeImplementations</code> 直接交换了并没有判断是因为用到 UIWebView 的页面，其 delegate 可以确定是一定实现了的。</p>
</blockquote>
<h3 id="Hook-协议中的具体方法"><a href="#Hook-协议中的具体方法" class="headerlink" title="Hook 协议中的具体方法"></a>Hook 协议中的具体方法</h3><p>在这之前，假如我们想要 Hook <code>webViewDidStartLoad:</code> 方法，我们需要考虑这几种情况：</p>
<ul>
<li>代理对象实现了 <code>webViewDidStartLoad:</code> 方法，那么我们直接交换就行。</li>
<li>代理对象如果没有实现 <code>webViewDidStartLoad:</code> 方法，而我们又想监听时，就需要我们动态的添加 <code>webViewDidStartLoad:</code> 方法。</li>
<li><code>setDelegate :</code> 万一重复设置了，会导致 <code>webViewDidStartLoad:</code> 多次交换，我们需要预防这种情况。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> Hook_Method(Class originalClass, SEL originalSel, Class replacedClass, SEL replacedSel, SEL noneSel)&#123;</div><div class="line">    <span class="comment">// 原实例方法</span></div><div class="line">    Method originalMethod = class_getInstanceMethod(originalClass, originalSel);</div><div class="line">    <span class="comment">// 替换的实例方法</span></div><div class="line">    Method replacedMethod = class_getInstanceMethod(replacedClass, replacedSel);</div><div class="line">    <span class="comment">// 如果没有实现 delegate 方法，则手动动态添加</span></div><div class="line">    <span class="keyword">if</span> (!originalMethod) &#123;</div><div class="line">        Method noneMethod = class_getInstanceMethod(replacedClass, noneSel);</div><div class="line">        <span class="built_in">BOOL</span> didAddNoneMethod = class_addMethod(originalClass, originalSel, method_getImplementation(noneMethod), method_getTypeEncoding(noneMethod));</div><div class="line">        <span class="keyword">if</span> (didAddNoneMethod) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"******** 没有实现 (%@) 方法，手动添加成功！！"</span>,<span class="built_in">NSStringFromSelector</span>(originalSel));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 向实现 delegate 的类中添加新的方法</span></div><div class="line">    <span class="comment">// 这里是向 originalClass 的 replaceSel（@selector(owner_webViewDidStartLoad:)） 添加 replaceMethod</span></div><div class="line">    <span class="built_in">BOOL</span> didAddMethod = class_addMethod(originalClass, replacedSel, method_getImplementation(replacedMethod), method_getTypeEncoding(replacedMethod));</div><div class="line">    <span class="keyword">if</span> (didAddMethod) &#123;</div><div class="line">        <span class="comment">// 添加成功</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"******** 实现了 (%@) 方法并成功 Hook 为 --&gt; (%@)"</span>,<span class="built_in">NSStringFromSelector</span>(originalSel) ,<span class="built_in">NSStringFromSelector</span>(replacedSel));</div><div class="line">        <span class="comment">// 重新拿到添加被添加的 method,这里是关键(注意这里 originalClass, 不 replacedClass), 因为替换的方法已经添加到原类中了, 应该交换原类中的两个方法</span></div><div class="line">        Method newMethod = class_getInstanceMethod(originalClass, replacedSel);</div><div class="line">        <span class="comment">// 实现交换</span></div><div class="line">        method_exchangeImplementations(originalMethod, newMethod);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">// 添加失败，则说明已经 hook 过该类的 delegate 方法，防止多次交换。</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"******** 已替换过，避免多次替换 --&gt; (%@)"</span>,<span class="built_in">NSStringFromClass</span>(originalClass));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)hook_setDelegate:(<span class="keyword">id</span>&lt;<span class="built_in">UIWebViewDelegate</span>&gt;)delegate &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> hook_setDelegate:delegate];</div><div class="line">    </div><div class="line">    <span class="comment">//Hook (webViewDidStartLoad:) 方法</span></div><div class="line">    Hook_Method([delegate <span class="keyword">class</span>], <span class="keyword">@selector</span>(webViewDidStartLoad:), [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(owner_webViewDidStartLoad:), <span class="keyword">@selector</span>(none_webViewDidStartLoad:));</div><div class="line">    </div><div class="line">    <span class="comment">//Hook (webViewDidFinishLoad:) 方法</span></div><div class="line">    Hook_Method([delegate <span class="keyword">class</span>], <span class="keyword">@selector</span>(webViewDidFinishLoad:), [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(owner_webViewDidFinishLoad:), <span class="keyword">@selector</span>(none_webViewDidFinishLoad:));</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)owner_webViewDidStartLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"*********** owner_webViewDidStartLoad:"</span>);</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> owner_webViewDidStartLoad:webView];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)none_webViewDidStartLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"*********** none_webViewDidStartLoad:"</span>);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)owner_webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"*********** owner_webViewDidFinishLoad:"</span>);</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> owner_webViewDidFinishLoad:webView];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)none_webViewDidFinishLoad:(<span class="built_in">UIWebView</span> *)webView &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"*********** none_webViewDidFinishLoad:"</span>);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>另外，不管我们是纯代码设置的 UIWebView delegate，还是通过 IB 设置的，都是没问题~</p>
</blockquote>
<p>完整的代码在这里 <a href="https://github.com/ifelseboyxx/xx_Notes/tree/master/contents/HookSystemDelegate/Hook_Delegate" target="_blank" rel="external">Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Method Swizzling 基本用法可以先看看博主之前的文章 &lt;a href=&quot;http://blog.ifelseboyxx.com/2017/01/25/Method-Swizzling/&quot;&gt;浅谈 Method Swizzling&lt;/a&gt;, 这里就不多做介绍了。本文以 &lt;code&gt;UIWebViewDelegate&lt;/code&gt; 为例，介绍如何利用 Method Swizzling 来 Hook 系统的 delegate 方法， 主要有如下几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建 UIWebView Category&lt;/li&gt;
&lt;li&gt;Hook  UIWebView 的 &lt;code&gt;delegate&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;Hook  &lt;code&gt;UIWebViewDelegate&lt;/code&gt; 协议中的具体方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 开发中的八种锁（Lock）</title>
    <link href="http://yoursite.com/2017/11/15/lock/"/>
    <id>http://yoursite.com/2017/11/15/lock/</id>
    <published>2017-11-15T03:38:01.000Z</published>
    <updated>2017-11-23T02:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天翻看 ibireme 大神 《<a href="http://blog.ibireme.com/" target="_blank" rel="external">不再安全的 OSSpinLock</a>》 这篇文章，看到文中分析各种锁之前的性能的图表：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-eb3ef0d444034362.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="lock_benchmark.png"></p>
<a id="more"></a>
<p>发现除了 <code>@synchronized</code> 用过,其他的都陌生的很，可以说完全不知道啥玩意儿~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-6959b9f6823f26bb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>于是怀着惭愧的心情赶紧把这些锁学习了下，废话不多说，我们开始:</p>
<h2 id="锁-是什么意思？"><a href="#锁-是什么意思？" class="headerlink" title="锁 是什么意思？"></a>锁 是什么意思？</h2><p>我们在使用多线程的时候多个线程可能会访问同一块资源，这样就很容易引发数据错乱和数据安全等问题，这时候就需要我们保证每次只有一个线程访问这一块资源，<strong>锁</strong> 应运而生。</p>
<h3 id="OSSpinLock"><a href="#OSSpinLock" class="headerlink" title="OSSpinLock"></a>OSSpinLock</h3><p>需导入头文件:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;libkern/OSAtomic.h&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>例子：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">__block OSSpinLock oslock = OS_SPINLOCK_INIT;</div><div class="line"><span class="comment">//线程1  </span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1 准备上锁"</span>);</div><div class="line">        OSSpinLockLock(&amp;oslock);</div><div class="line">        sleep(<span class="number">4</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">        OSSpinLockUnlock(&amp;oslock);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1 解锁成功"</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"--------------------------------------------------------"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//线程2</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2 准备上锁"</span>);</div><div class="line">        OSSpinLockLock(&amp;oslock);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</div><div class="line">        OSSpinLockUnlock(&amp;oslock);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2 解锁成功"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-da0bbfd046fc7e30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OSSpinLock1"></p>
<p>我们来修改一下代码：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">__block OSSpinLock oslock = OS_SPINLOCK_INIT;</div><div class="line"><span class="comment">//线程1        </span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">......</div><div class="line"><span class="comment">//OSSpinLockUnlock(&amp;oslock);</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-5f6aeebcb8d9cb00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OSSpinLock2"></p>
<p>在  <code>OSSpinLock1</code> 图中可以发现：当我们锁住线程1时，在同时锁住线程2的情况下，线程2会一直等待<strong>（自旋锁不会让等待的进入睡眠状态）</strong>，直到线程1的任务执行完且解锁完毕，线程2会立即执行；而在 <code>OSSpinLock2</code> 图中，因为我们注释掉了线程1中的解锁代码，会绕过线程1，直到调用了线程2的解锁方法才会继续执行线程1中的任务，<strong>正常情况下，<code>lock</code>和<code>unlock</code>最好成对出现</strong>。</p>
<blockquote>
<p><strong>OS_SPINLOCK_INIT：</strong> 默认值为 <code>0</code>,在 <code>locked</code> 状态时就会大于 <code>0</code>，<code>unlocked</code>状态下为 <code>0</code><br><strong>OSSpinLockLock(&amp;oslock)：</strong>上锁，参数为 <code>OSSpinLock</code> 地址<br><strong>OSSpinLockUnlock(&amp;oslock)：</strong>解锁，参数为 <code>OSSpinLock</code> 地址<br><strong>OSSpinLockTry(&amp;oslock)</strong>：尝试加锁，可以加锁则<strong>立即加锁</strong>并返回 <code>YES</code>,反之返回 <code>NO</code></p>
</blockquote>
<p>这里顺便提一下 <code>trylock</code> 和 <code>lock</code> 使用场景：</p>
<blockquote>
<p>当前线程锁失败，也可以继续其它任务，用 trylock 合适<br>当前线程只有锁成功后，才会做一些有意义的工作，那就 lock，没必要轮询 trylock</p>
</blockquote>
<h3 id="dispatch-semaphore-信号量"><a href="#dispatch-semaphore-信号量" class="headerlink" title="dispatch_semaphore 信号量"></a>dispatch_semaphore 信号量</h3><p>例子：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">dispatch_semaphore_t signal = dispatch_semaphore_create(<span class="number">1</span>); <span class="comment">//传入值必须 &gt;=0, 若传入为0则阻塞线程并等待timeout,时间到后会执行其后的语句</span></div><div class="line">    dispatch_time_t overTime = dispatch_time(DISPATCH_TIME_NOW, <span class="number">3.0</span>f * <span class="built_in">NSEC_PER_SEC</span>);</div><div class="line"></div><div class="line"><span class="comment">//线程1</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1 等待ing"</span>);</div><div class="line">        dispatch_semaphore_wait(signal, overTime); <span class="comment">//signal 值 -1</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">        dispatch_semaphore_signal(signal); <span class="comment">//signal 值 +1</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1 发送信号"</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"--------------------------------------------------------"</span>);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//线程2</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2 等待ing"</span>);</div><div class="line">        dispatch_semaphore_wait(signal, overTime);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</div><div class="line">        dispatch_semaphore_signal(signal);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2 发送信号"</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>dispatch_semaphore_create(1)：</strong> 传入值必须 <code>&gt;=0</code>, 若传入为 <code>0</code> 则阻塞线程并等待timeout,时间到后会执行其后的语句<br><strong>dispatch_semaphore_wait(signal, overTime)：</strong>可以理解为 <code>lock</code>,会使得 <code>signal</code> 值 <code>-1</code><br><strong>dispatch_semaphore_signal(signal)：</strong>可以理解为 <code>unlock</code>,会使得 <code>signal</code> 值 <code>+1</code></p>
</blockquote>
<p>关于信号量，我们可以用停车来比喻：</p>
<blockquote>
<p>停车场剩余4个车位，那么即使同时来了四辆车也能停的下。如果此时来了五辆车，那么就有一辆需要等待。<br><strong>信号量的值（signal）</strong>就相当于剩余车位的数目，<code>dispatch_semaphore_wait</code> 函数就相当于来了一辆车，<code>dispatch_semaphore_signal</code> 就相当于走了一辆车。停车位的剩余数目在初始化的时候就已经指明了（dispatch_semaphore_create（long value）），调用一次 dispatch_semaphore_signal，剩余的车位就增加一个；调用一次 dispatch_semaphore_wait  剩余车位就减少一个；当剩余车位为 0 时，再来车（即调用 dispatch_semaphore_wait）就只能等待。有可能同时有几辆车等待一个停车位。有些车主没有耐心，给自己设定了一段等待时间，这段时间内等不到停车位就走了，如果等到了就开进去停车。而有些车主就像把车停在这，所以就一直等下去。</p>
</blockquote>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-e45133dc53c7b53d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始信号量大于0"></p>
<p>可以发现，因为我们初始化信号量的时候是大于 <code>0</code> 的，所以并没有阻塞线程，而是直接执行了 线程1 线程2。</p>
<p>我们把 信号量初始值改为 <code>0</code>:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_semaphore_t signal = dispatch_semaphore_create(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-378750ef97bd0959.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始信号量为0"></p>
<p>可以看到这时候我们设置的 <code>overTime</code> 生效了。</p>
<h3 id="pthread-mutex"><a href="#pthread-mutex" class="headerlink" title="pthread_mutex"></a>pthread_mutex</h3><p>ibireme 在《<a href="http://blog.ibireme.com/" target="_blank" rel="external">不再安全的 OSSpinLock</a>》这篇文章中提到性能最好的 <code>OSSpinLock</code> 已经不再是线程安全的并把自己开源项目中的 <code>OSSpinLock</code> 都替换成了 <code>pthread_mutex</code>。<br>特意去看了下源码，总结了下常见用法：</p>
<p>使用需导入头文件：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;pthread.h&gt;</span></span></div></pre></td></tr></table></figure>
<p>例子:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> pthread_mutex_t pLock;</div><div class="line">pthread_mutex_init(&amp;pLock, <span class="literal">NULL</span>);</div><div class="line"><span class="comment">//1.线程1</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1 准备上锁"</span>);</div><div class="line">        pthread_mutex_lock(&amp;pLock);</div><div class="line">        sleep(<span class="number">3</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">        pthread_mutex_unlock(&amp;pLock);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//1.线程2</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2 准备上锁"</span>);</div><div class="line">        pthread_mutex_lock(&amp;pLock);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</div><div class="line">        pthread_mutex_unlock(&amp;pLock);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-f051bcdb173e8612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pthread_mutex"></p>
<blockquote>
<p>pthread_mutex 中也有个 <code>pthread_mutex_trylock(&amp;pLock)</code>，和上面提到的 <code>OSSpinLockTry(&amp;oslock)</code> 区别在于，前者可以加锁时返回的是 <code>0</code>，否则返回一个错误提示码；后者返回的 <code>YES</code>和 <code>NO</code>。</p>
</blockquote>
<p>这里贴个  <a href="https://github.com/ibireme/YYKit" target="_blank" rel="external">YYKit</a> 中的源码：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-48d96143d13a9371.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="YYKit"></p>
<h3 id="pthread-mutex-recursive"><a href="#pthread-mutex-recursive" class="headerlink" title="pthread_mutex(recursive)"></a>pthread_mutex(recursive)</h3><p>经过上面几种例子，我们可以发现：加锁后只能有一个线程访问该对象，后面的线程需要排队，并且 lock 和 unlock 是对应出现的，同一线程多次 lock 是不允许的，而递归锁允许同一个线程在未释放其拥有的锁时反复对该锁进行加锁操作。</p>
<p>例子:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> pthread_mutex_t pLock;</div><div class="line">pthread_mutexattr_t attr;</div><div class="line">pthread_mutexattr_init(&amp;attr); <span class="comment">//初始化attr并且给它赋予默认</span></div><div class="line">pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_RECURSIVE); <span class="comment">//设置锁类型，这边是设置为递归锁</span></div><div class="line">pthread_mutex_init(&amp;pLock, &amp;attr);</div><div class="line">pthread_mutexattr_destroy(&amp;attr); <span class="comment">//销毁一个属性对象，在重新进行初始化之前该结构不能重新使用</span></div><div class="line"></div><div class="line"><span class="comment">//1.线程1</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">void</span> (^RecursiveBlock)(<span class="keyword">int</span>);</div><div class="line">        RecursiveBlock = ^(<span class="keyword">int</span> value) &#123;</div><div class="line">            pthread_mutex_lock(&amp;pLock);</div><div class="line">            <span class="keyword">if</span> (value &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"value: %d"</span>, value);</div><div class="line">                RecursiveBlock(value - <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            pthread_mutex_unlock(&amp;pLock);</div><div class="line">        &#125;;</div><div class="line">        RecursiveBlock(<span class="number">5</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-ed159b5987a9aaed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<blockquote>
<p>上面的代码如果我们用 <code>pthread_mutex_init(&amp;pLock, NULL)</code> 初始化会出现死锁的情况，递归锁能很好的避免这种情况的死锁；</p>
</blockquote>
<h3 id="NSLock"><a href="#NSLock" class="headerlink" title="NSLock"></a>NSLock</h3><p>NSLock API 很少也很简单:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-fd930ccf5d969f6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSLock"></p>
<blockquote>
<p><strong>lock、unlock</strong>：不多做解释，和上面一样<br><strong>trylock</strong>：能加锁返回 YES 并执行<strong>加锁</strong>操作，相当于 lock，反之返回 NO<br><strong> lockBeforeDate：</strong>这个方法表示会在传入的时间内尝试加锁，若能加锁则执行<strong>加锁</strong>操作并返回 YES，反之返回 NO</p>
</blockquote>
<p>例子:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLock</span> *lock = [<span class="built_in">NSLock</span> new];</div><div class="line"><span class="comment">//线程1</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1 尝试加速ing..."</span>);</div><div class="line">        [lock lock];</div><div class="line">        sleep(<span class="number">3</span>);<span class="comment">//睡眠5秒</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">        [lock unlock];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1解锁成功"</span>);</div><div class="line">    &#125;);</div><div class="line"><span class="comment">//线程2</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2 尝试加速ing..."</span>);</div><div class="line">        <span class="built_in">BOOL</span> x =  [lock lockBeforeDate:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">4</span>]];</div><div class="line">        <span class="keyword">if</span> (x) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</div><div class="line">            [lock unlock];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure></p>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-471bcb7fcc0bcfea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSLock_result"></p>
<h3 id="NSCondition"><a href="#NSCondition" class="headerlink" title="NSCondition"></a>NSCondition</h3><p>我们先来看看 API：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-231a3255007492fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSCondition"></p>
<p>看字面意思很好理解:</p>
<blockquote>
<p><strong>wait</strong>：进入等待状态<br><strong>waitUntilDate:</strong>：让一个线程等待一定的时间<br><strong>signal</strong>：唤醒一个等待的线程<br><strong>broadcast</strong>：唤醒所有等待的线程</p>
</blockquote>
<p>例子:</p>
<ul>
<li><strong>等待2秒</strong></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSCondition</span> *cLock = [<span class="built_in">NSCondition</span> new];</div><div class="line"><span class="comment">//线程1</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"start"</span>);</div><div class="line">        [cLock lock];</div><div class="line">        [cLock waitUntilDate:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">2</span>]];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">        [cLock unlock];</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-7ff9328f53551846.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="waiting 2秒"></p>
<ul>
<li><strong>唤醒一个等待线程</strong></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSCondition</span> *cLock = [<span class="built_in">NSCondition</span> new];</div><div class="line"><span class="comment">//线程1</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        [cLock lock];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1加锁成功"</span>);</div><div class="line">        [cLock wait];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">        [cLock unlock];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//线程2</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        [cLock lock];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2加锁成功"</span>);</div><div class="line">        [cLock wait];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</div><div class="line">        [cLock unlock];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        sleep(<span class="number">2</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"唤醒一个等待的线程"</span>);</div><div class="line">        [cLock signal];</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-e587d966e6f34c92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="唤醒一个等待的线程"></p>
<ul>
<li><strong>唤醒所有等待的线程</strong></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.........    </div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        sleep(<span class="number">2</span>);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"唤醒所有等待的线程"</span>);</div><div class="line">        [cLock broadcast];</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-f7c07e6e2c031088.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="唤醒所有的线程"></p>
<h3 id="NSRecursiveLock"><a href="#NSRecursiveLock" class="headerlink" title="NSRecursiveLock"></a>NSRecursiveLock</h3><p>上面已经大概介绍过了：<br>递归锁可以被同一线程多次请求，而不会引起死锁。这主要是用在循环或递归操作中。</p>
<p>例子：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLock</span> *rLock = [<span class="built_in">NSLock</span> new];</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="keyword">static</span> <span class="keyword">void</span> (^RecursiveBlock)(<span class="keyword">int</span>);</div><div class="line">        RecursiveBlock = ^(<span class="keyword">int</span> value) &#123;</div><div class="line">            [rLock lock];</div><div class="line">            <span class="keyword">if</span> (value &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="built_in">NSLog</span>(<span class="string">@"线程%d"</span>, value);</div><div class="line">                RecursiveBlock(value - <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            [rLock unlock];</div><div class="line">        &#125;;</div><div class="line">        RecursiveBlock(<span class="number">4</span>);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-9502f58fa9244b5f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误信息"></p>
<p>这段代码是一个典型的死锁情况。在我们的线程中，<code>RecursiveMethod</code> 是递归调用的。所以每次进入这个 block 时，都会去<strong>加一次锁</strong>，而从第二次开始，由于锁已经被使用了且<strong>没有解锁</strong>，所以它<strong>需要等待锁被解除</strong>，这样就导致了死锁，线程被阻塞住了。</p>
<p>将 NSLock 替换为 NSRecursiveLock：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSRecursiveLock</span> *rLock = [<span class="built_in">NSRecursiveLock</span> new];</div><div class="line">..........</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-58b8575d0ba80cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSRecursiveLock"></p>
<p>NSRecursiveLock 方法里还提供了两个方法，用法和上面介绍的基本没什么差别，这里不过多介绍了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)tryLock;</div><div class="line">- (<span class="built_in">BOOL</span>)lockBeforeDate:(<span class="built_in">NSDate</span> *)limit;</div></pre></td></tr></table></figure>
<h3 id="synchronized"><a href="#synchronized" class="headerlink" title="@synchronized"></a>@synchronized</h3><p>@synchronized 相信大家应该都熟悉，它的用法应该算这些锁中最简单的:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线程1</span></div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">            sleep(<span class="number">2</span>);</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//线程2</span></div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>有兴趣可以看一下这篇文章 《 <a href="http://ios.jobbole.com/82826/" target="_blank" rel="external">关于 @synchronized，这儿比你想知道的还要多</a>》</p>
</blockquote>
<h3 id="NSConditionLock-条件锁"><a href="#NSConditionLock-条件锁" class="headerlink" title="NSConditionLock 条件锁"></a>NSConditionLock 条件锁</h3><p>我们先来看看 API :</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-95362ad47a95575c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="NSConditionLock"></p>
<p>相比于 NSLock 多了个 <code>condition</code> 参数，我们可以理解为一个<strong>条件标示</strong>。</p>
<p>例子:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSConditionLock</span> *cLock = [[<span class="built_in">NSConditionLock</span> alloc] initWithCondition:<span class="number">0</span>];</div><div class="line"><span class="comment">//线程1</span></div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        <span class="keyword">if</span>([cLock tryLockWhenCondition:<span class="number">0</span>])&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"线程1"</span>);</div><div class="line">           [cLock unlockWithCondition:<span class="number">1</span>];</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">             <span class="built_in">NSLog</span>(<span class="string">@"失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//线程2</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        [cLock lockWhenCondition:<span class="number">3</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程2"</span>);</div><div class="line">        [cLock unlockWithCondition:<span class="number">2</span>];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line"><span class="comment">//线程3</span></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</div><div class="line">        [cLock lockWhenCondition:<span class="number">1</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"线程3"</span>);</div><div class="line">        [cLock unlockWithCondition:<span class="number">3</span>];</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>运行结果:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1899027-7e410aff9dba4060.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="result"></p>
<ul>
<li>我们在初始化 NSConditionLock 对象时，给了他的标示为 <code>0</code></li>
<li>执行 <code>tryLockWhenCondition:</code> 时，我们传入的条件标示也是 <code>0</code>,所 <strong>以线程1</strong> 加锁成功</li>
<li>执行 <code>unlockWithCondition:</code> 时，<strong>这时候会把 <code>condition</code> 由 <code>0</code> 修改为 <code>1</code> </strong></li>
<li>因为 <code>condition</code>  修改为了  <code>1</code>， 会先走到 <strong>线程3</strong>，然后 <strong>线程3</strong> 又将 <code>condition</code> 修改为 <code>3</code></li>
<li>最后 走了 <strong>线程2</strong> 的流程</li>
</ul>
<blockquote>
<p>从上面的结果我们可以发现，NSConditionLock 还可以实现任务之间的依赖。</p>
</blockquote>
<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h3><p><a href="http://www.cocoachina.com/ios/20150513/11808.html" target="_blank" rel="external">NSRecursiveLock递归锁的使用</a></p>
<p><a href="http://www.cnblogs.com/snailHL/p/3906112.html" target="_blank" rel="external">关于dispatch_semaphore的使用</a></p>
<p><a href="http://www.cnblogs.com/huangjianwu/p/4575763.html" target="_blank" rel="external">实现锁的多种方式和锁的高级用法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天翻看 ibireme 大神 《&lt;a href=&quot;http://blog.ibireme.com/&quot;&gt;不再安全的 OSSpinLock&lt;/a&gt;》 这篇文章，看到文中分析各种锁之前的性能的图表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1899027-eb3ef0d444034362.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;lock_benchmark.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 中关于列表滚动流畅方案的一些探讨</title>
    <link href="http://yoursite.com/2017/09/06/smooth_tableview/"/>
    <id>http://yoursite.com/2017/09/06/smooth_tableview/</id>
    <published>2017-09-06T15:30:29.000Z</published>
    <updated>2017-11-23T02:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>近些年，App 越来越推崇体验至上，随随便便乱写一通的话已经很难让用户买帐了，顺滑的列表便是其中很重要的一点。如果一个 App 的页面滚动起来总是卡顿卡顿的，轻则被当作反面教材来吐槽或者衬托“我们的 App balabala…”，重则直接卸载。正好最近在优化这一块儿，总结记录下。</p>
<p>如果说有什么好的博客文章推荐，ibireme  的  <a href="https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a> 这篇堪称经典，墙裂推荐反复阅读。这篇文章中讲解了很多的优化点，我自己总结了下收益最大的两个优化点：</p>
<ul>
<li>避免重复多次计算 cell 行高</li>
<li>文本异步渲染</li>
</ul>
<p><img src="/images/asyn.png" alt=""></p>
<p>大家可以看看上面这张图的对比分析，数据是 iPhone6 的机子用 instruments 抓的，左边的是用 Auto Layout 绘制界面的数据分析，正常如果想平滑滚动的话，fps 至少需要稳定在 55 左右，我们可以发现，在没有缓存行高和异步渲染的情况下 fps 是最低的，可以说是比较卡顿了，至少是能肉眼感觉出来，能满足平滑滚动要求的也只有在缓存行高且异步渲染的情况下；右边的是没用 Auto Layout 直接用 frame 来绘制界面的数据分析，可以发现即使没有异步渲染，也能勉强满足平滑滚动的要求，如果开启异步渲染的话，可以说是相当的丝滑了。</p>
<a id="more"></a>
<h3 id="避免重复多次计算-cell-行高"><a href="#避免重复多次计算-cell-行高" class="headerlink" title="避免重复多次计算 cell 行高"></a>避免重复多次计算 cell 行高</h3><p>TableView 行高计算可以说是个老生常谈的问题了，<code>heightForRowAtIndexPath:</code>  是个调用相当频繁的方法，在里面做过多的事情难免会造成卡顿。 在 iOS 8 中，我们可以通过设置下面两个属性来很轻松的实现高度自适应：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.tableView.estimatedRowHeight = <span class="number">88</span>;</div><div class="line"><span class="keyword">self</span>.tableView.rowHeight = <span class="built_in">UITableViewAutomaticDimension</span>;</div></pre></td></tr></table></figure>
<p>虽然很方便，不过如果你的页面对性能有一定要求，建议不要这么做，具体可以看看 sunnyxx 的 <a href="http://blog.sunnyxx.com/2015/05/17/cell-height-calculation/" target="_blank" rel="external">优化UITableViewCell高度计算的那些事</a>。文中针对 Auto Layout，提供了个 cell 行高的缓存库 <a href="https://github.com/forkingdog/UITableView-FDTemplateLayoutCell" target="_blank" rel="external">UITableView-FDTemplateLayoutCell</a>，可以很好的帮助我们避免 cell 行高多次计算的问题。</p>
<p>如果不使用 Auto Layout，我们可以在请求完拿到数据后提前计算好页面每个控件的 frame 和 cell 高度，并且缓存在内存中，用的时候直接在 <code>heightForRowAtIndexPath:</code> 取出计算好的值就行，大概流程如下：</p>
<ul>
<li>模拟请求数据回调：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> buildTestDataThen:^(<span class="built_in">NSMutableArray</span> &lt;FDFeedEntity *&gt; *entities) &#123;</div><div class="line">        <span class="keyword">self</span>.data = @[].mutableCopy;</div><div class="line">        <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">            <span class="keyword">for</span> (FDFeedEntity *entity <span class="keyword">in</span> entities) &#123;</div><div class="line">                FrameModel *frameModel = [FrameModel new];</div><div class="line">                frameModel.entity = entity;</div><div class="line">                [<span class="keyword">self</span>.data addObject:frameModel];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        [<span class="keyword">self</span>.tvFeed reloadData];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>一个简单计算 frame 、cell 行高方式：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FrameModel.h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FrameModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGRect</span> titleFrame;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> cellHeight;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) FDFeedEntity *entity;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FrameModel.m</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FrameModel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setEntity:(FDFeedEntity *)entity &#123;</div><div class="line">    <span class="keyword">if</span> (!entity) <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    _entity = entity;</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> maxLayout = ([<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - <span class="number">20.</span>f);</div><div class="line">    <span class="built_in">CGFloat</span> bottom = <span class="number">4.</span>f;</div><div class="line">    </div><div class="line">    <span class="comment">//title</span></div><div class="line">    <span class="built_in">CGFloat</span> titleX = <span class="number">10.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> titleY = <span class="number">10.</span>f;</div><div class="line">    <span class="built_in">CGSize</span> titleSize = [entity.title boundingRectWithSize:<span class="built_in">CGSizeMake</span>(maxLayout, <span class="built_in">CGFLOAT_MAX</span>) options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span>|<span class="built_in">NSStringDrawingUsesFontLeading</span> attributes:@&#123;<span class="built_in">NSFontAttributeName</span> : Font(<span class="number">16.</span>f)&#125; context:<span class="literal">nil</span>].size;</div><div class="line">    _titleFrame = <span class="built_in">CGRectMake</span>(titleX, titleY, titleSize.width, titleSize.height);</div><div class="line">    </div><div class="line">    <span class="comment">//cell Height</span></div><div class="line">    _cellHeight = (<span class="built_in">CGRectGetMaxY</span>(_titleFrame) + bottom);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>行高取值：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    FrameFeedCell *cell = [tableView dequeueReusableCellWithIdentifier:FrameFeedCellIdentifier forIndexPath:indexPath];</div><div class="line">    FrameModel *frameModel = <span class="keyword">self</span>.data[indexPath.row];</div><div class="line">    cell.model = frameModel;</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</div><div class="line">    FrameModel *frameModel = <span class="keyword">self</span>.data[indexPath.row];</div><div class="line">    <span class="keyword">return</span> frameModel.cellHeight;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>控件赋值：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setModel:(FrameModel *)model &#123;</div><div class="line">    <span class="keyword">if</span> (!model) <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    _model = model;</div><div class="line">    </div><div class="line">    FDFeedEntity *entity = model.entity;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.titleLabel.frame = model.titleFrame;</div><div class="line">    <span class="keyword">self</span>.titleLabel.text = entity.title;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>缓存行高方式有现成的库简单方便，虽然 UITableView-FDTemplateLayoutCell 已经处理的很好了，但是 Auto Layout 对性能还是会有部分消耗；手动计算 frame 方式所有的位置都需要计算，比较麻烦，而且在数据量很大的情况下，大量的计算对数据展示时间会有部分影响，相应的回报就是性能会更好一些。</p>
<h3 id="文本异步渲染"><a href="#文本异步渲染" class="headerlink" title="文本异步渲染"></a>文本异步渲染</h3><p>当显示大量文本时，CPU 的压力会非常大。对此解决方案只有一个，那就是自定义文本控件，用 TextKit 或最底层的 CoreText 对文本异步绘制。尽管这实现起来非常麻烦，但其带来的优势也非常大，CoreText 对象创建好后，能直接获取文本的宽高等信息，避免了多次计算（调整 UILabel 大小时算一遍、UILabel 绘制时内部再算一遍）；CoreText 对象占用内存较少，可以缓存下来以备稍后多次渲染。</p>
<p>幸运的是，想支持文本异步渲染也有现成的库 <a href="https://github.com/ibireme/YYText" target="_blank" rel="external">YYText</a> ，下面来讲讲如何搭配它最大程度满足我们如丝般顺滑的需求：</p>
<h4 id="Frame-搭配异步渲染"><a href="#Frame-搭配异步渲染" class="headerlink" title="Frame 搭配异步渲染"></a>Frame 搭配异步渲染</h4><p>基本思路和计算 frame 类似，只不过把系统的 <code>boundingRectWithSize:</code>、 <code>sizeWithAttributes:</code> 换成  YYText  中的方法：</p>
<ul>
<li>配置 frame model：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FrameYYModel.h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FrameYYModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGRect</span> titleFrame;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) YYTextLayout *titleLayout;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">CGFloat</span> cellHeight;</div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) FDFeedEntity *entity;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FrameYYModel.m</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FrameYYModel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setEntity:(FDFeedEntity *)entity &#123;</div><div class="line">    <span class="keyword">if</span> (!entity) <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    _entity = entity;</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> maxLayout = ([<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - <span class="number">20.</span>f);</div><div class="line">    <span class="built_in">CGFloat</span> space = <span class="number">10.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> bottom = <span class="number">4.</span>f;</div><div class="line">    </div><div class="line">    <span class="comment">//title</span></div><div class="line">    <span class="built_in">NSMutableAttributedString</span> *title = [[<span class="built_in">NSMutableAttributedString</span> alloc] initWithString:entity.title];</div><div class="line">    title.yy_font = Font(<span class="number">16.</span>f);</div><div class="line">    title.yy_color = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">    </div><div class="line">    YYTextContainer *titleContainer = [YYTextContainer containerWithSize:<span class="built_in">CGSizeMake</span>(maxLayout, <span class="built_in">CGFLOAT_MAX</span>)];</div><div class="line">    _titleLayout = [YYTextLayout layoutWithContainer:titleContainer text:title];</div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> titleX = <span class="number">10.</span>f;</div><div class="line">    <span class="built_in">CGFloat</span> titleY = <span class="number">10.</span>f;</div><div class="line">    <span class="built_in">CGSize</span> titleSize = _titleLayout.textBoundingSize;</div><div class="line">    _titleFrame = (<span class="built_in">CGRect</span>)&#123;titleX,titleY,<span class="built_in">CGSizeMake</span>(titleSize.width, titleSize.height)&#125;;</div><div class="line">    </div><div class="line">    <span class="comment">//cell Height</span></div><div class="line">    _cellHeight = (<span class="built_in">CGRectGetMaxY</span>(_titleFrame) + bottom);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>对比上面 frame，可以发现多了个 <code>YYTextLayout</code>  属性，这个属性可以提前配置文本的特性，包括 <code>font</code>、<code>textColor</code> 以及行数、行间距、内间距等等，好处就是可以把一些逻辑提前处理好，比如根据接口字段，动态配置字体颜色，字号等，如果用 Auto Layout，这部分逻辑则不可避免的需要写在  <code>cellForRowAtIndexPath:</code> 方法中。</p>
<ul>
<li>UITableViewCell 处理 ：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)initWithStyle:(<span class="built_in">UITableViewCellStyle</span>)style reuseIdentifier:(<span class="built_in">NSString</span> *)reuseIdentifier &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> initWithStyle:style reuseIdentifier:reuseIdentifier];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">  </div><div class="line">    YYLabel *title = [YYLabel new];</div><div class="line">  	title.displaysAsynchronously = <span class="literal">YES</span>; <span class="comment">//开启异步渲染</span></div><div class="line">  	title.ignoreCommonProperties = <span class="literal">YES</span>; <span class="comment">//忽略属性</span></div><div class="line">    title.layer.borderColor = [<span class="built_in">UIColor</span> brownColor].CGColor;</div><div class="line">    title.layer.cornerRadius = <span class="number">1.</span>f;</div><div class="line">    title.layer.borderWidth = <span class="number">1.</span>f;</div><div class="line">    [<span class="keyword">self</span>.contentView addSubview:_titleLabel = title];</div><div class="line">  </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>赋值：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setModel:(FrameYYModel *)model &#123;</div><div class="line">    <span class="keyword">if</span> (!model) <span class="keyword">return</span>;</div><div class="line">    _model = model;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.titleLabel.frame = model.titleFrame;</div><div class="line">    <span class="keyword">self</span>.titleLabel.textLayout = model.titleLayout; <span class="comment">//直接取 YYTextLayout</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Auto-Layout-搭配异步渲染"><a href="#Auto-Layout-搭配异步渲染" class="headerlink" title="Auto Layout 搭配异步渲染"></a>Auto Layout 搭配异步渲染</h4><p>YYText  非常友好，同样支持 xib，YYText  继承自 <code>UIView</code>，所要做的事情也很简单：</p>
<ul>
<li>在 xib 中配置约束</li>
<li>开启异步属性</li>
</ul>
<p>开启异步属性可以代码里设置，也可以直接在 xib 里设置，分别如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.titleLabel.displaysAsynchronously = <span class="literal">YES</span>;</div><div class="line"><span class="keyword">self</span>.subTitleLabel.displaysAsynchronously = <span class="literal">YES</span>;</div><div class="line"><span class="keyword">self</span>.contentLabel.displaysAsynchronously = <span class="literal">YES</span>;</div><div class="line"><span class="keyword">self</span>.usernameLabel.displaysAsynchronously = <span class="literal">YES</span>;</div><div class="line"><span class="keyword">self</span>.timeLabel.displaysAsynchronously = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p><img src="/images/ib.png" alt=""></p>
<p>另外需要注意的一点是，多行文本的情况下需要设置最大换行宽：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGFloat</span> maxLayout = [<span class="built_in">UIScreen</span> mainScreen].bounds.size.width - <span class="number">20.</span>f;</div><div class="line"><span class="keyword">self</span>.titleLabel.preferredMaxLayoutWidth = maxLayout;</div><div class="line"><span class="keyword">self</span>.subTitleLabel.preferredMaxLayoutWidth = maxLayout;</div><div class="line"><span class="keyword">self</span>.contentLabel.preferredMaxLayoutWidth = maxLayout;</div></pre></td></tr></table></figure>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><p> YYText 的异步渲染能极大程度的提高列表流畅度，真正达到如丝般顺滑，但是在开启异步时，刷新列表会有闪烁情况，仔细想想觉得也正常，毕竟是异步的，渲染也需要时间，这里作者给出了一些 <a href="https://github.com/ibireme/YYKit/issues/64" target="_blank" rel="external">方案</a>，大家可以看看。</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="关于圆角"><a href="#关于圆角" class="headerlink" title="关于圆角"></a>关于圆角</h4><p>列表中如果存在很多系统设置的圆角页面导致卡顿：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">label.layer.cornerRadius = <span class="number">5.</span>f;</div><div class="line">label.clipsToBounds = <span class="literal">YES</span>;</div></pre></td></tr></table></figure>
<p>其实据我观察，只要当前屏幕内只要设置圆角的控件个数不要太多（大概十几个算个临界点），就不会引起卡顿。</p>
<p>还有就是只要不设置 <code>clipsToBounds</code> 不管多少个，都不会卡顿，比如你需要圆角的控件是白色背景色的，然后它的父控件也是白色背景色的，而且没有点击后高亮的，就没必要 clipsToBounds 了。</p>
<h4 id="如何定位卡顿原因"><a href="#如何定位卡顿原因" class="headerlink" title="如何定位卡顿原因"></a>如何定位卡顿原因</h4><p>我们可以利用 instruments 中的 Time Profiler 来帮助我们定位问题位置，选中 Xcode，command + control + i  打开：</p>
<p><img src="/images/instruments.gif" alt=""></p>
<p>我们选中主线程，去掉系统的方法，然后操作一下列表，再截取一段调用信息，可以发现我们自己实现的方法并没有消耗多少时间，反而是系统的方法很费时，这也是卡顿的原因之一：</p>
<p><img src="/images/autolayout.png" alt=""></p>
<p>另外有的人 instruments 看不到方法调用栈（右边一对黑色的方法信息），去 Xcode 设置下就行了：</p>
<p><img src="/images/xcode.png" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>YYText 和 UITableView-FDTemplateLayoutCell 搭配可以很大程度的提高列表流畅度：</p>
<ul>
<li><p><strong>如果时间比较紧迫，可以直接采取 Auto Layout + UITableView-FDTemplateLayoutCell + YYText 方式</strong></p>
</li>
<li><p><strong>如果列表中文本不包含富文本，仅仅显示文字，又不想引入这两个库，可以使用系统方式提前计算 Frame</strong></p>
</li>
<li><p><strong>如果想最大程度的流畅度，就需要提前计算 Frame + YYText，具体大家根据自己情况选择合适的方案就行</strong></p>
</li>
</ul>
<p>最后，附上测试 <a href="https://github.com/ifelseboyxx/xx_Notes/tree/master/contents/TVOptimizationDemo/TVOptimizationDemo" target="_blank" rel="external">Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近些年，App 越来越推崇体验至上，随随便便乱写一通的话已经很难让用户买帐了，顺滑的列表便是其中很重要的一点。如果一个 App 的页面滚动起来总是卡顿卡顿的，轻则被当作反面教材来吐槽或者衬托“我们的 App balabala…”，重则直接卸载。正好最近在优化这一块儿，总结记录下。&lt;/p&gt;
&lt;p&gt;如果说有什么好的博客文章推荐，ibireme  的  &lt;a href=&quot;https://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/&quot;&gt;iOS 保持界面流畅的技巧&lt;/a&gt; 这篇堪称经典，墙裂推荐反复阅读。这篇文章中讲解了很多的优化点，我自己总结了下收益最大的两个优化点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免重复多次计算 cell 行高&lt;/li&gt;
&lt;li&gt;文本异步渲染&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/images/asyn.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;大家可以看看上面这张图的对比分析，数据是 iPhone6 的机子用 instruments 抓的，左边的是用 Auto Layout 绘制界面的数据分析，正常如果想平滑滚动的话，fps 至少需要稳定在 55 左右，我们可以发现，在没有缓存行高和异步渲染的情况下 fps 是最低的，可以说是比较卡顿了，至少是能肉眼感觉出来，能满足平滑滚动要求的也只有在缓存行高且异步渲染的情况下；右边的是没用 Auto Layout 直接用 frame 来绘制界面的数据分析，可以发现即使没有异步渲染，也能勉强满足平滑滚动的要求，如果开启异步渲染的话，可以说是相当的丝滑了。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>基于 ResponderChain 的对象交互方式</title>
    <link href="http://yoursite.com/2017/08/04/ResponderChain/"/>
    <id>http://yoursite.com/2017/08/04/ResponderChain/</id>
    <published>2017-08-04T02:26:23.000Z</published>
    <updated>2017-11-23T02:33:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>首先感谢下 <a href="https://casatwy.com/pages/about-me.html" target="_blank" rel="external">Tian Wei Yu</a> 的 <a href="https://casatwy.com/responder_chain_communication.html" target="_blank" rel="external"><a href="https://casatwy.com/responder_chain_communication.html" target="_blank" rel="external">一种基于ResponderChain的对象交互方式</a></a> 这篇文章，让我知道对象间的交互还有这种姿势。说实话，第一遍没看懂，自己跟着敲了一遍才理解，所以有了这篇文章，算是个记录。</p>
</blockquote>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Responder Chain ，也就是响应链，关于这方面的知识因为不是本文重点，还不太理解的可以去看看这篇文章：<a href="http://www.jianshu.com/p/2e074db792ba" target="_blank" rel="external">史上最详细的iOS之事件的传递和响应机制-原理篇</a>。</p>
<p>在 iOS 中，对象间的交互模式大概有这几种：直接 property 传值、delegate、KVO、block、protocol、多态、Target-Action 等等，本文介绍的是一种基于 UIResponder 对象交互方式，简而言之，就是 通过在 UIResponder上挂一个 category，使得事件和参数可以沿着 responder chain 逐步传递。对于那种 subviews 特别多，事件又需要层层传递的层级视图特别好用，但是，缺点也很明显，必须依赖于 UIResponder 对象。</p>
<h3 id="具体事例"><a href="#具体事例" class="headerlink" title="具体事例"></a>具体事例</h3><p>我们先来看看下面这种很常见的界面：</p>
<p><img src="/images/08-04.png" alt=""></p>
<p>简单讲解下：最外层是个 UITableView，我们就叫做 SuperTable，每个 cell 里面又嵌套了个 UITableView，叫做 SubTable，然后这个 SubTable 的 cell 里面有一些按钮，我们理一下这个界面的层级：</p>
<blockquote>
<p>UIViewController -&gt; SuperTable -&gt; SuperCell -&gt; SubTable -&gt; SubCell -&gt; UIButton</p>
</blockquote>
<p>如果我们需要在最外层的 UIViewController 里捕获到这些按钮的点击事件，比如点击按钮需要刷新 SuperTable，这时候该怎么实现呢？</p>
<p>方法有很多，最常见的就是 delegate ，但是因为层级太深，导致我们需要一层层的去实现，各种  protocol、delegate 声明，很繁琐，这种时候，基于 Responder Chain 就很方便了。</p>
<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><p>只需要一个 UIResponder 的 category 就行：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIResponder</span> (<span class="title">Router</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)routerEventWithSelectorName:(<span class="built_in">NSString</span> *)selectorName</div><div class="line">                     object:(<span class="keyword">id</span>)object</div><div class="line">                   userInfo:(<span class="built_in">NSDictionary</span> *)userInfo;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIResponder</span> (<span class="title">Router</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)routerEventWithSelectorName:(<span class="built_in">NSString</span> *)selectorName</div><div class="line">                             object:(<span class="keyword">id</span>)object</div><div class="line">                           userInfo:(<span class="built_in">NSDictionary</span> *)userInfo &#123;</div><div class="line">    </div><div class="line">    [[<span class="keyword">self</span> nextResponder] routerEventWithSelectorName:selectorName</div><div class="line">                                       object:object</div><div class="line">                                     userInfo:userInfo];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>最里层 UIButton 的点击处理：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)btnClick1:(<span class="built_in">UIButton</span> *)sender &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> routerEventWithSelectorName:<span class="string">@"btnClick1:userInfo:"</span> object:sender userInfo:@&#123;<span class="string">@"key"</span>:<span class="string">@"蓝色按钮"</span>&#125;];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>外层 UIViewController 的接收：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)routerEventWithSelectorName:(<span class="built_in">NSString</span> *)selectorName</div><div class="line">                     object:(<span class="keyword">id</span>)object</div><div class="line">                   userInfo:(<span class="built_in">NSDictionary</span> *)userInfo &#123;</div><div class="line">        </div><div class="line">    SEL action = <span class="built_in">NSSelectorFromString</span>(selectorName);</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableArray</span> *arr = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="keyword">if</span>(object) &#123;[arr addObject:object];&#125;;</div><div class="line">    <span class="keyword">if</span>(userInfo) &#123;[arr addObject:userInfo];&#125;;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> performSelector:action withObjects:arr];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>事件响应：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)btnClick1:(<span class="built_in">UIButton</span> *)btn userInfo:(<span class="built_in">NSDictionary</span> *)userInfo &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@  %@"</span>,btn,userInfo);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想在传递过程中新增参数，比如想在 SuperCell 这一层加点参数，只需要在对应的地方实现方法就行：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)routerEventWithSelectorName:(<span class="built_in">NSString</span> *)selectorName object:(<span class="keyword">id</span>)object userInfo:(<span class="built_in">NSDictionary</span> *)userInfo &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableDictionary</span> *mDict = [userInfo mutableCopy];</div><div class="line">    mDict[<span class="string">@"test"</span>] = <span class="string">@"测试"</span>;</div><div class="line"></div><div class="line">    [<span class="keyword">super</span> routerEventWithSelectorName:selectorName object:object userInfo:[mDict <span class="keyword">copy</span>]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)routerEventWithSelectorName:(<span class="built_in">NSString</span> *)selectorName</div><div class="line">                     object:(<span class="keyword">id</span>)object</div><div class="line">                   userInfo:(<span class="built_in">NSDictionary</span> *)userInfo</div></pre></td></tr></table></figure>
<p>细心的可以发现，我这里直接把 <code>SEL</code>  设计成以 <code>NSString</code> 的形式传递了，再在外面通过 <code>NSSelectorFromString(selectorName)</code> 转成对应的 <code>SEL</code>。原文中传的是个用来标识具体是哪个事件的字串，还需要维护专门的 <code>NSDictionary</code> 来找到对应的事件，我觉得太麻烦，但是好处是 <code>@selector(....)</code> 声明和实现在一个地方，可读性高，也不容易出现拼写错误，导致触发不了对应方法的问题，具体怎么设计，大家见仁见智吧~</p>
<p>关于参数的传递，比如我触发 <code>UITableViewDelegate</code> 中的 <code>didSelectRowAtIndexPath:</code> 方法，<code>&lt;2</code>  个参数的情况，<code>performSelector:</code> 方法也可以满足，但一旦 <code>&gt;2</code> 个参数的话，就不行了，这时候我们就可以用 <code>NSInvocation</code> 来实现，我写了个分类，支持传递多个参数，搭配使用很方便：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface NSObject (PerformSelector)</div><div class="line"></div><div class="line">- (id)performSelector:(SEL)aSelector withObjects:(NSArray &lt;id&gt; *)objects;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">@implementation NSObject (PerformSelector)</div><div class="line"></div><div class="line">- (id)performSelector:(SEL)aSelector</div><div class="line">          withObjects:(NSArray &lt;id&gt; *)objects &#123;</div><div class="line">    </div><div class="line">    //创建签名对象</div><div class="line">    NSMethodSignature *signature = [[self class] instanceMethodSignatureForSelector:aSelector];</div><div class="line">    </div><div class="line">    //判断传入的方法是否存在</div><div class="line">    if (!signature) &#123; //不存在</div><div class="line">        //抛出异常</div><div class="line">        NSString *info = [NSString stringWithFormat:@&quot;-[%@ %@]:unrecognized selector sent to instance&quot;,[self class],NSStringFromSelector(aSelector)];</div><div class="line">        @throw [[NSException alloc] initWithName:@&quot;ifelseboyxx remind:&quot; reason:info userInfo:nil];</div><div class="line">        return nil;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //创建 NSInvocation 对象</div><div class="line">    NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];</div><div class="line">    </div><div class="line">    //保存方法所属的对象</div><div class="line">    invocation.target = self;</div><div class="line">    invocation.selector = aSelector;</div><div class="line"></div><div class="line">    </div><div class="line">    //设置参数</div><div class="line">    //存在默认的 _cmd、target 两个参数，需剔除</div><div class="line">    NSInteger arguments = signature.numberOfArguments - 2;</div><div class="line">    </div><div class="line">    //谁少就遍历谁,防止数组越界</div><div class="line">    NSUInteger objectsCount = objects.count;</div><div class="line">    NSInteger count = MIN(arguments, objectsCount);</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        id obj = objects[i];</div><div class="line">        //处理参数是 NULL 类型的情况</div><div class="line">        if ([obj isKindOfClass:[NSNull class]]) &#123;obj = nil;&#125;</div><div class="line">        [invocation setArgument:&amp;obj atIndex:i+2];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //调用</div><div class="line">    [invocation invoke];</div><div class="line">    </div><div class="line">    //获取返回值</div><div class="line">    id res = nil;</div><div class="line">    //判断当前方法是否有返回值</div><div class="line">    if (signature.methodReturnLength != 0) &#123;</div><div class="line">        [invocation getReturnValue:&amp;res];</div><div class="line">    &#125;</div><div class="line">    return res;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>最后附上 <a href="https://github.com/ifelseboyxx/xx_Notes/tree/master/contents/ResponderChain/ResponderChainDemo" target="_blank" rel="external">Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;首先感谢下 &lt;a href=&quot;https://casatwy.com/pages/about-me.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Tian Wei Yu&lt;/a&gt; 的 &lt;a href=&quot;https://ca
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈 iOS 中的 childViewController</title>
    <link href="http://yoursite.com/2017/07/23/iOS_childViewController/"/>
    <id>http://yoursite.com/2017/07/23/iOS_childViewController/</id>
    <published>2017-07-23T14:40:23.000Z</published>
    <updated>2017-07-24T03:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>在 iOS 客户端中，多个 childViewController 的页面是个很常见的交互设计，目前已经广泛运用在各类的 APP 上，比较有代表性的类似网易新闻、今日头条这两个客户端。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>实现方式网上已经有很多了，这里就直接贴出代码，大概流程如下：</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加一个 childViewController</span></div><div class="line"><span class="built_in">UIViewController</span> *vc = [<span class="built_in">UIViewController</span> new];<span class="comment">//子控制器</span></div><div class="line">[<span class="keyword">self</span> addChildViewController:vc];<span class="comment">//添加到父控制器中</span></div><div class="line">vc.view.frame = <span class="comment">/*....*/</span>;<span class="comment">//设置 frame</span></div><div class="line">[<span class="keyword">self</span>.view addSubview:vc.view];<span class="comment">//把子控制器的 view 添加到父控制器的 view 上面</span></div><div class="line">[vc didMoveToParentViewController:<span class="keyword">self</span>];  <span class="comment">//子控制器被通知有了一个父控制器</span></div><div class="line"></div><div class="line"><span class="comment">//移除一个 childViewController</span></div><div class="line">[vc willMoveToParentViewController:<span class="literal">nil</span>];<span class="comment">//子控制器被通知即将解除父子关系</span></div><div class="line">[vc.view removeFromSuperview];<span class="comment">//把子控制器的 view 从到父控制器的 view 上面移除</span></div><div class="line">[vc removeFromParentViewController];<span class="comment">//真正的解除关系,会自己调用 [vc didMoveToParentViewController:nil]</span></div></pre></td></tr></table></figure>
<p>实现上面部分，childViewController 的生命周期方法也就是 viewWillAppear、viewDidAppear等等这些，是不需要我们关心的，系统内部会自动帮我们调用。</p>
<h3 id="手动管理-childViewController-的生命周期方法"><a href="#手动管理-childViewController-的生命周期方法" class="headerlink" title="手动管理 childViewController 的生命周期方法"></a>手动管理 childViewController 的生命周期方法</h3><p>有时候我们希望自己控制子控制器的生命周期方法，这里我们就需要一些额外的操作：</p>
<p>在 iOS 5 中，我们需要在父控制器中重写<code>automaticallyForwardAppearanceAndRotationMethodsToChildViewControllers</code>方法，并返回 <code>NO</code>;</p>
<p>在 iOS 6 及以后，需要重写 <code>shouldAutomaticallyForwardAppearanceMethods</code>方法，并返回 <code>NO</code>，这样系统就不会自动调用 childViewController 的生命周期了，全部交给我们自己处理。</p>
<p>不过我们需要注意的是，不能手动调用 viewWillAppear、viewDidAppear等等这些方法，而应该调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)beginAppearanceTransition:(BOOL)isAppearing animated:(BOOL)animated;</div><div class="line">- (void)endAppearanceTransition;</div></pre></td></tr></table></figure>
<p>这两个方法来间接触发子控制器的生命周期，并且它们得成对使用：</p>
<blockquote>
<p><code>isAppearing</code> 设置为 <code>YES</code> : 触发 <code>viewWillAppear:</code> ;</p>
<p><code>isAppearing</code> 设置为 <code>NO</code> : 触发 <code>viewWillDisappear:</code> ;</p>
<p><code>endAppearanceTransition</code> 会触发 <code>viewDidAppear:</code> 以及 <code>viewDidDisappear:</code> 方法。</p>
</blockquote>
<h3 id="关于-childViewController-导致导航条穿透效果失效问题"><a href="#关于-childViewController-导致导航条穿透效果失效问题" class="headerlink" title="关于 childViewController 导致导航条穿透效果失效问题"></a>关于 childViewController 导致导航条穿透效果失效问题</h3><p>所谓的导航条穿透效果一般是在用 UITableView 的时候，效果大概如下：</p>
<p><img src="/images/tv_01.gif" alt=""></p>
<p>大概原理就是系统内部帮我们设置了 UITableView 的 <code>contentInset</code> 以及 <code>contentOffset</code> 属性，往下偏移了一定的高度，并且只有单个层级的情况下才能生效，所谓的单个层级可以理解为在一个 UIViewController 中 放一个 UITableView。一旦我们的界面 <code>addChildViewController:</code> ,就会失效，如果我们希望 childViewController 也能保持这种穿透效果，就需要拿到正确的 <code>topLayoutGuide</code> 以及 <code>bottomLayoutGuide</code>  值，然后设置 <code>contentInset</code> 和 <code>contentOffset</code> 就行了，代码都在下面的例子里，有兴趣的可以看看。</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>为了方便大家理解，我写了个例子，大家可以看看：</p>
<p><a href="https://github.com/ifelseboyxx/XXPageControllers" target="_blank" rel="external">XXPageControllers</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;在 iOS 客户端中，多个 childViewController 的页面是个很常见的交互设计，目前已经广泛运用在各类的 APP 上，比较有代表性的类似网易新闻、今日头条这两个客户端。&lt;/p&gt;
&lt;h3 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h3&gt;&lt;p&gt;实现方式网上已经有很多了，这里就直接贴出代码，大概流程如下：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>关于 UIControlState 一次神奇的发现</title>
    <link href="http://yoursite.com/2017/07/03/UIControlState/"/>
    <id>http://yoursite.com/2017/07/03/UIControlState/</id>
    <published>2017-07-03T09:41:01.000Z</published>
    <updated>2017-07-03T11:21:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现关于 <code>UIButton</code> 状态的一个挺有意思的问题，大概就是：</p>
<blockquote>
<p>当一个按钮处于选中状态，也就是 <code>selected</code> 为 <code>YES</code> 时，如果这时候再点击它时，按钮会变成 <code>normal</code> 状态时候的样子！</p>
</blockquote>
<p>问题效果大概这样：</p>
<p><img src="/images/events.gif" alt=""></p>
<a id="more"></a>
<p>因为只是个 <code>Demo</code> ，所以代码写的比较随意，就是设置按钮不同状态下的呈现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIButton</span> *btn1;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">UIButton</span> *btn2;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    <span class="comment">// Do any additional setup after loading the view, typically from a nib.</span></div><div class="line">   </div><div class="line">    <span class="built_in">UIButton</span> *btn1 = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">    btn1.frame = <span class="built_in">CGRectMake</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">30</span>);</div><div class="line">    [btn1 setTitle:<span class="string">@"按钮一"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [btn1 setTitleColor:[<span class="built_in">UIColor</span> blackColor] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [btn1 setTitleColor:[<span class="built_in">UIColor</span> redColor] forState:<span class="built_in">UIControlStateSelected</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_btn1 = btn1];</div><div class="line">    [btn1 addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(btn1Click) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">UIButton</span> *btn2 = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">    btn2.frame = <span class="built_in">CGRectMake</span>(<span class="number">170</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="number">30</span>);</div><div class="line">    [btn2 setTitle:<span class="string">@"按钮二"</span> forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [btn2 setTitleColor:[<span class="built_in">UIColor</span> blackColor] forState:<span class="built_in">UIControlStateNormal</span>];</div><div class="line">    [btn2 setTitleColor:[<span class="built_in">UIColor</span> redColor] forState:<span class="built_in">UIControlStateSelected</span>];</div><div class="line">    [<span class="keyword">self</span>.view addSubview:_btn2 = btn2];</div><div class="line">    [btn2 addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(btn2Click) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)btn1Click &#123;</div><div class="line">    <span class="keyword">if</span>(_btn2.isSelected) &#123;_btn2.selected = <span class="literal">NO</span>;&#125;</div><div class="line">    _btn1.selected = <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)btn2Click &#123;</div><div class="line">    <span class="keyword">if</span>(_btn1.isSelected) &#123;_btn1.selected = <span class="literal">NO</span>;&#125;</div><div class="line">    _btn2.selected = <span class="literal">YES</span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们可以发现，这里分别设置了按钮 <code>UIControlStateNormal</code>和 <code>UIControlStateSelected</code> 状态的标题颜色，那么该如何解决呢？</p>
<p>分别加上这两句就可以了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[btn1 setTitleColor:[<span class="built_in">UIColor</span> redColor] forState:<span class="built_in">UIControlStateSelected</span>|<span class="built_in">UIControlStateHighlighted</span>];</div><div class="line"></div><div class="line">[btn2 setTitleColor:[<span class="built_in">UIColor</span> redColor] forState:<span class="built_in">UIControlStateSelected</span>|<span class="built_in">UIControlStateHighlighted</span>];</div></pre></td></tr></table></figure>
<p>至于为什么，我们可以看看 <code>UIControlState</code> 枚举的定义：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">UIControlState</span>) &#123;</div><div class="line">    <span class="built_in">UIControlStateNormal</span>       = <span class="number">0</span>,</div><div class="line">    <span class="built_in">UIControlStateHighlighted</span>  = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,                  <span class="comment">// used when UIControl isHighlighted is set</span></div><div class="line">    <span class="built_in">UIControlStateDisabled</span>     = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</div><div class="line">    <span class="built_in">UIControlStateSelected</span>     = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,                  <span class="comment">// flag usable by app (see below)</span></div><div class="line">    <span class="built_in">UIControlStateFocused</span> <span class="built_in">NS_ENUM_AVAILABLE_IOS</span>(<span class="number">9</span>_0) = <span class="number">1</span> &lt;&lt; <span class="number">3</span>, <span class="comment">// Applicable only when the screen supports focus</span></div><div class="line">    <span class="built_in">UIControlStateApplication</span>  = <span class="number">0x00FF0000</span>,              <span class="comment">// additional flags available for application use</span></div><div class="line">    <span class="built_in">UIControlStateReserved</span>     = <span class="number">0xFF000000</span>               <span class="comment">// flags reserved for internal framework use</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们可以发现，这是个 <code>NS_OPTIONS</code> 类型的枚举，如果对 <code>NS_OPTIONS</code> 不太理解的，可以去看下叶大的这篇文章里面的解释 <a href="http://www.jianshu.com/p/0f9a7296f4c0" target="_blank" rel="external">SDWebImage源码解析之SDWebImageManager的注解(2)</a>，我这里就不废话了。</p>
<p>既然是 <code>NS_OPTIONS</code> 类型，就表示按钮的状态可能存在多重的情况。比如上面选中状态下再点击，可以理解为 <strong>选中|高亮</strong> 状态，也就是  <code>UIControlStateSelected|UIControlStateHighlighted</code>。</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>这种问题常出现在类似<strong>网易新闻 APP</strong> 首页的这种界面设计下：</p>
<p><img src="/images/header_01.png" alt=""></p>
<p>很多大厂的 APP 同样存在这种问题，比如淘宝、京东、新浪微博什么的，搞得我现在每次一看到这种界面，我都会把玩一下，遇到有问题的会心里忍不住吐槽下，没问题的会有种遇到英雄相惜的感觉，哈哈哈，手动滑稽~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现关于 &lt;code&gt;UIButton&lt;/code&gt; 状态的一个挺有意思的问题，大概就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个按钮处于选中状态，也就是 &lt;code&gt;selected&lt;/code&gt; 为 &lt;code&gt;YES&lt;/code&gt; 时，如果这时候再点击它时，按钮会变成 &lt;code&gt;normal&lt;/code&gt; 状态时候的样子！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;问题效果大概这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/events.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>利用多态及协议多重继承统一接口数据格式</title>
    <link href="http://yoursite.com/2017/04/17/protocol/"/>
    <id>http://yoursite.com/2017/04/17/protocol/</id>
    <published>2017-04-17T15:15:57.000Z</published>
    <updated>2017-04-17T15:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始之前先简单说下需求：首先，页面样式由<code>A部门</code>负责，但是页面的数据依赖于<code>B部门</code>和<code>C部门</code>，<code>B、C</code>都有自己的唯一标识<code>projectTag</code>并且都有自己的接口，接口字段都不相同，他们的关系如下图：</p>
<p><img src="/images/pic.png" alt=""></p>
<a id="more"></a>
<p>在这种关系结构下就会导致一个问题：<code>B接口</code>和<code>C接口</code>都有自己数据格式，<code>A部门</code>的页面到底用哪个接口？总不能用<code>if else</code>判断吧？万一还有<code>部门D</code>、<code>部门E</code>呢？</p>
<h2 id="利用协议实现多重继承"><a href="#利用协议实现多重继承" class="headerlink" title="利用协议实现多重继承"></a>利用协议实现多重继承</h2><p>首先我们新建个协议 <code>PublicProtocol.h</code>，这个协议定义了<code>页面VC</code>所需要的数据元素（这里一般都定义成 <code>readonly</code>，不允许外部修改）：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifndef PublicProtocol_h</span></div><div class="line"><span class="meta">#define PublicProtocol_h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DataInfoProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="keyword">@required</span></div><div class="line"><span class="comment">/** title */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/** subTitle */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *subTitle;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#endif /* PublicProtocol_h */</span></div></pre></td></tr></table></figure>
<p>然后我们在<code>部门A</code>和<code>部门B</code>的接口<code>Model</code>中实现这个协议并返回所需要的数据：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassAModel.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"PublicProtocol.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassAModel</span> : <span class="title">NSObject</span></span></div><div class="line">&lt;DataInfoProtocol&gt;</div><div class="line"></div><div class="line"><span class="comment">/** titleA */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *titleA;</div><div class="line"></div><div class="line"><span class="comment">/** subTitleA */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *subTitleA;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassAModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassAModel</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - DataInfoProtocol setter</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)title &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.titleA;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)subTitle &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.subTitleA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>部门B</code>的接口<code>Model</code>也类似：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassBModel.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"PublicProtocol.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassBModel</span> : <span class="title">NSObject</span></span></div><div class="line">&lt;DataInfoProtocol&gt;</div><div class="line"></div><div class="line"><span class="comment">/** titleB */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *titleB;</div><div class="line"></div><div class="line"><span class="comment">/** subTitleB */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *subTitleB;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassBModel.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassBModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassBModel</span></span></div><div class="line"><span class="meta">#pragma mark - DataInfoProtocol setter</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)title &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.titleB;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)subTitle &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.subTitleB;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这样我们就解决了不同接口参数不一样的问题，统一了接口字段。接着我们还有个问题：</p>
<p><strong>该怎么传递数据给<code>页面VC</code>？</strong></p>
<h2 id="利用多态特性传递数据"><a href="#利用多态特性传递数据" class="headerlink" title="利用多态特性传递数据"></a>利用多态特性传递数据</h2><p>首先我们新建个抽象数据源基类 <code>BaseClass.h</code>，里面定义好 <code>页面VC</code>所需要的数据源：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BaseClass.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"PublicProtocol.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BaseClass</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/** 数据源*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSArray</span> &lt;<span class="keyword">id</span>&lt;DataInfoProtocol&gt;&gt; *dataList;</div><div class="line"></div><div class="line"><span class="comment">/** 接口请求操作*/</span></div><div class="line">- (<span class="keyword">void</span>)fetchDataWithCompletionHandler:(<span class="keyword">void</span>(^)())completeBlock;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里返回的数据源是一个实现 <code>DataInfoProtocol</code> 协议的对象数组 <code>dataList</code>。</p>
<p>接着每个部门都包含一个<code>BaseClass</code>的子类，比如 <code>部门A</code> 的数据源类 <code>ClassA.h</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassA.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"BaseClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassA</span> : <span class="title">BaseClass</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassA.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassA.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassAModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassA</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)fetchDataWithCompletionHandler:(<span class="keyword">void</span> (^)())completeBlock &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//模拟请求接口操作</span></div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span>f * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">NSDictionary</span> *tempDict = @&#123;<span class="string">@"titleA"</span>    : <span class="string">@"Jhons"</span>,</div><div class="line">                                   <span class="string">@"subTitleA"</span> : <span class="string">@"iOS dev"</span>&#125;;</div><div class="line">        ClassAModel *aModel = [ClassAModel classAModelWithDict:tempDict];</div><div class="line">        <span class="keyword">self</span>.dataList = @[aModel];</div><div class="line">        </div><div class="line">        completeBlock();</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@dealloc"</span>,<span class="keyword">self</span>.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里模拟了请求接口，返回了 <code>A接口</code> 的数据源，<code>B部门</code> 也类似。</p>
<p>接着，我们申明抽象数据源类 <code>BaseClass</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Data Class */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) BaseClass *dataClass;</div></pre></td></tr></table></figure>
<p>然后我们就可以根据每个部门的<code>projectTag</code>标识，来创建不同的数据源类：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *plistPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"ProjectMaps"</span> ofType:<span class="string">@"plist"</span>];</div><div class="line">    <span class="built_in">NSDictionary</span> *dictionary = [[<span class="built_in">NSDictionary</span> alloc] initWithContentsOfFile:plistPath];</div><div class="line">    <span class="keyword">self</span>.dataClass = [<span class="built_in">NSClassFromString</span>(dictionary[<span class="keyword">self</span>.projectTag]) new];</div><div class="line">    </div><div class="line">    [MBProgressHUD showHUDAddedTo:<span class="keyword">self</span>.view animated:<span class="literal">YES</span>];</div><div class="line">    [<span class="keyword">self</span>.dataClass fetchDataWithCompletionHandler:^&#123;</div><div class="line">        [MBProgressHUD hideHUDForView:<span class="keyword">self</span>.view animated:<span class="literal">YES</span>];</div><div class="line">        [<span class="keyword">self</span>.tvDetial reloadData];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我用了个 <code>ProjectMaps.plist</code>，来根据每个项目的<code>projectTag</code> 标识，定义好数据源类：</p>
<p><img src="/images/pic_01.png" alt=""></p>
<p>写的例子比较简单，但是设计思路应该很明白了，具体效果如下：</p>
<p><img src="/images/maps.gif" alt=""></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>可能这并不是最后的设计模式，如果有更好地，希望能一起讨论下 ^ ^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始之前先简单说下需求：首先，页面样式由&lt;code&gt;A部门&lt;/code&gt;负责，但是页面的数据依赖于&lt;code&gt;B部门&lt;/code&gt;和&lt;code&gt;C部门&lt;/code&gt;，&lt;code&gt;B、C&lt;/code&gt;都有自己的唯一标识&lt;code&gt;projectTag&lt;/code&gt;并且都有自己的接口，接口字段都不相同，他们的关系如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pic.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Masonry 源码解析</title>
    <link href="http://yoursite.com/2017/02/23/Masonry-Analysis/"/>
    <id>http://yoursite.com/2017/02/23/Masonry-Analysis/</id>
    <published>2017-02-23T13:40:52.000Z</published>
    <updated>2017-02-28T09:08:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a> 是一个轻量级的用于自动布局（AutoLayout）的第三方框架，以其简洁的使用方式，受到广大开发者的青睐。本篇文章将带你一步步的去了解其实现原理，知其所以然！</p>
<h3 id="结构概览"><a href="#结构概览" class="headerlink" title="结构概览"></a>结构概览</h3><p><img src="/images/Masonry.png" alt=""></p>
<a id="more"></a>
<ul>
<li><p>最上面的几个 <code>category</code>，包含了我们常用的一些方法及属性，例如：</p>
  <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(<span class="built_in">NS_NOESCAPE</span> ^)(MASConstraintMaker *make))block;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>中间的是一个继承自 <code>NSObject</code> 的工厂类，主要负责创建 <code>MASConstraint</code> 对象以及把约束添加到视图上。</p>
</li>
<li><p>最下面 <code>MASConstraint</code> 是个抽象类，其中有很多的方法都必须在子类中重写。<code>MASViewConstraint</code> 和 <code>MASCompositeConstraint</code> 是它的两个子类，介绍这两个之前我们先说下 <code>MASViewAttribute</code>：</p>
<p>  我们都知道系统创建一条约束的方法：</p>
  <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">instancetype</span>)constraintWithItem:(<span class="keyword">id</span>)view1</div><div class="line">                       attribute:(<span class="built_in">NSLayoutAttribute</span>)attr1</div><div class="line">                       relatedBy:(<span class="built_in">NSLayoutRelation</span>)relation</div><div class="line">                          toItem:(<span class="keyword">nullable</span> <span class="keyword">id</span>)view2</div><div class="line">                       attribute:(<span class="built_in">NSLayoutAttribute</span>)attr2</div><div class="line">                      multiplier:(<span class="built_in">CGFloat</span>)multiplier</div><div class="line">                        constant:(<span class="built_in">CGFloat</span>)c;</div></pre></td></tr></table></figure>
<p>  <code>MASViewAttribute</code> 就是对 <code>attribute</code> 和 <code>Item</code> 这两个属性的封装；<code>MASViewConstraint</code> 就是对 <code>MASViewAttribute</code> 的封装，可以理解为<strong>一条</strong>约束对象；<code>MASCompositeConstraint</code> 则就是约束的集合，它里面有个私有的数组用来存放多个 <code>MASViewAttribute</code> 对象。</p>
</li>
</ul>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="View-MASAdditions"><a href="#View-MASAdditions" class="headerlink" title="View+MASAdditions"></a>View+MASAdditions</h4><p>我们绘制一个居于父视图（self）上、左为 <code>20.0f</code> ，右为 <code>-20.0f</code>并且高度一半的 <code>view</code> 的约束大概是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">	make.height.equalTo(<span class="keyword">self</span>).multipliedBy(<span class="number">0.5</span>);</div><div class="line">    make.top.equalTo(<span class="keyword">self</span>).offset(<span class="number">20.0</span>f);</div><div class="line">    make.left.equalTo(@<span class="number">20.0</span>f);</div><div class="line">    make.right.offset(<span class="number">-20.0</span>f);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>我们点进 <code>View+MASAdditions.m</code> 里面可以看到内部：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *))block &#123;</div><div class="line">    <span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];</div><div class="line">    block(constraintMaker);</div><div class="line">    <span class="keyword">return</span> [constraintMaker install];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先这里已经帮我们把 <code>translatesAutoresizingMaskIntoConstraints</code> 属性设置为 <code>NO</code> 了，这样我们在外面可以省去这一步。</li>
<li>然后初始化 <code>MASConstraintMaker</code> 工厂实例对象并保存了当前视图 <code>self.view</code>。</li>
<li>接着把初始化好的 <code>MASConstraintMaker</code> 对象传入 <code>block</code>，回调给外面配置约束属性。</li>
<li>最后调用 <code>install</code> 方法，把配置好的约束添加到视图上去。</li>
</ul>
<p>以上就是<strong>添加</strong>约束的大概流程，我们再看看<strong>更新</strong>和<strong>重新构建</strong>约束的方法，也就是：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *))block &#123;</div><div class="line">    <span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];</div><div class="line">    constraintMaker.updateExisting = <span class="literal">YES</span>;</div><div class="line">    block(constraintMaker);</div><div class="line">    <span class="keyword">return</span> [constraintMaker install];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block &#123;</div><div class="line">    <span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];</div><div class="line">    constraintMaker.removeExisting = <span class="literal">YES</span>;</div><div class="line">    block(constraintMaker);</div><div class="line">    <span class="keyword">return</span> [constraintMaker install];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以发现它们和 <code>mas_makeConstraints</code> 唯一的区别在于多传了 <code>updateExisting</code> 以及 <code>removeExisting</code> 这两个 <code>BOOL</code>属性值：</p>
<ul>
<li><code>mas_updateConstraints</code>：找到需要更新的 <code>NSLayoutConstraint</code>，替换成新约束。</li>
<li><code>mas_remakeConstraints</code>：清除所有 <code>NSLayoutConstraint</code>，再添加新约束。</li>
</ul>
<h4 id="MASConstraintMaker"><a href="#MASConstraintMaker" class="headerlink" title="MASConstraintMaker"></a>MASConstraintMaker</h4><p>知道了这三个方法的大概作用和关系，我们来详细看看 <code>MASConstraintMaker</code> 这个工厂类是如何配置约束的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height</div></pre></td></tr></table></figure>
<p>调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)height &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeHeight</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> constraint:<span class="literal">nil</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123; ··· &#125;</div><div class="line">    <span class="keyword">if</span> (!constraint) &#123;</div><div class="line">        newConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">        [<span class="keyword">self</span>.constraints addObject:newConstraint];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newConstraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 <code>constraint</code> 传的是 <code>nil</code>，所以我们先忽略中间一段代码：</p>
<ul>
<li>这里先是初始化了 <code>MASViewAttribute</code> 对象并保存了 <code>view</code>、<code>item</code>以及<code>NSLayoutAttribute</code>三个属性。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithView:(MAS_VIEW *)view layoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">self</span> initWithView:view item:view layoutAttribute:layoutAttribute];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithView:(MAS_VIEW *)view item:(<span class="keyword">id</span>)item layoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    _view = view;</div><div class="line">    _item = item;</div><div class="line">    _layoutAttribute = layoutAttribute;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后又初始化了 <code>MASViewConstraint</code> 对象，内部配置了些默认参数并保存了第一个约束参数 <code>MASViewAttribute</code>。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithFirstViewAttribute:(MASViewAttribute *)firstViewAttribute &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    _firstViewAttribute = firstViewAttribute;</div><div class="line">    <span class="keyword">self</span>.layoutPriority = MASLayoutPriorityRequired;</div><div class="line">    <span class="keyword">self</span>.layoutMultiplier = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后设置 <code>MASViewConstraint</code> 对象代理并添加到一开始准备好的 <code>self.constraints</code> 数组中，返回。</li>
</ul>
<p>这些工作就是在输入 <code>make.height</code> 进行的全部工作，它会返回一个 <code>MASViewConstraint</code> 对象，用于之后的继续配置。</p>
<h4 id="MASViewConstraint"><a href="#MASViewConstraint" class="headerlink" title="MASViewConstraint"></a>MASViewConstraint</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(<span class="keyword">self</span>)</div></pre></td></tr></table></figure>
<p>在 <code>make.height</code> 返回 <code>MASViewConstraint</code> 对象后，会继续在这个链式的语法中调用下一个方法来指定约束的关系。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))equalTo;</div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))greaterThanOrEqualTo;</div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))lessThanOrEqualTo;</div></pre></td></tr></table></figure>
<p>文章开头说过，<code>MASConstraint</code> 是个抽象类，具体实现都在它的两个子类中，<code>equalTo(self)</code> 的调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>))equalTo &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.equalToWithRelation(attribute, <span class="built_in">NSLayoutRelationEqual</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute, <span class="built_in">NSLayoutRelation</span> relation) &#123;</div><div class="line">        <span class="keyword">if</span> ([attribute isKindOfClass:<span class="built_in">NSArray</span>.class]) &#123;</div><div class="line">            .....</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            .....</div><div class="line">            <span class="keyword">self</span>.layoutRelation = relation;</div><div class="line">            <span class="keyword">self</span>.secondViewAttribute = attribute;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里同样先省略部分代码，方便我们阅读：</p>
<ul>
<li>首先是 <code>self.layoutRelation</code> 保存了约束关系且重写了 <code>set</code> 方法，在里面用 <code>self.hasLayoutRelation</code> 这个 <code>BOOL</code> 标识已经有约束关系。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setLayoutRelation:(<span class="built_in">NSLayoutRelation</span>)layoutRelation &#123;</div><div class="line">	_layoutRelation = layoutRelation;</div><div class="line"> 	<span class="keyword">self</span>.hasLayoutRelation = <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后同样是重写了 <code>self.secondViewAttribute</code> 的 <code>set</code> 方法，这里会根据不同的情况做不同的操作。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSecondViewAttribute:(<span class="keyword">id</span>)secondViewAttribute &#123;</div><div class="line">    <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:<span class="built_in">NSValue</span>.class]) &#123;</div><div class="line">        [<span class="keyword">self</span> setLayoutConstantWithValue:secondViewAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) &#123;</div><div class="line">        _secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:<span class="keyword">self</span>.firstViewAttribute.layoutAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) &#123;</div><div class="line">        _secondViewAttribute = secondViewAttribute;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"attempting to add unsupported attribute: %@"</span>, secondViewAttribute);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>第一种情况对应的是：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(@<span class="number">20.0</span>f)</div></pre></td></tr></table></figure>
<p>调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line"><span class="keyword">if</span> ([secondViewAttribute isKindOfClass:<span class="built_in">NSValue</span>.class]) &#123;</div><div class="line">    [<span class="keyword">self</span> setLayoutConstantWithValue:secondViewAttribute];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line">- (<span class="keyword">void</span>)setLayoutConstantWithValue:(<span class="built_in">NSValue</span> *)value &#123;</div><div class="line">    <span class="keyword">if</span> ([value isKindOfClass:<span class="built_in">NSNumber</span>.class]) &#123;</div><div class="line">        <span class="keyword">self</span>.offset = [(<span class="built_in">NSNumber</span> *)value doubleValue];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(value.objCType, <span class="keyword">@encode</span>(<span class="built_in">CGPoint</span>)) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">CGPoint</span> point;</div><div class="line">        [value getValue:&amp;point];</div><div class="line">        <span class="keyword">self</span>.centerOffset = point;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(value.objCType, <span class="keyword">@encode</span>(<span class="built_in">CGSize</span>)) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">CGSize</span> size;</div><div class="line">        [value getValue:&amp;size];</div><div class="line">        <span class="keyword">self</span>.sizeOffset = size;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(value.objCType, <span class="keyword">@encode</span>(MASEdgeInsets)) == <span class="number">0</span>) &#123;</div><div class="line">        MASEdgeInsets insets;</div><div class="line">        [value getValue:&amp;insets];</div><div class="line">        <span class="keyword">self</span>.insets = insets;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"attempting to set layout constant with unsupported value: %@"</span>, value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line">- (<span class="keyword">void</span>)setOffset:(<span class="built_in">CGFloat</span>)offset &#123;</div><div class="line">    <span class="keyword">self</span>.layoutConstant = offset;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line">- (<span class="keyword">void</span>)setLayoutConstant:(<span class="built_in">CGFloat</span>)layoutConstant &#123;</div><div class="line">    _layoutConstant = layoutConstant;</div><div class="line"></div><div class="line"><span class="meta">#if TARGET_OS_MAC &amp;&amp; !(TARGET_OS_IPHONE || TARGET_OS_TV)</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.useAnimator) &#123;</div><div class="line">        [<span class="keyword">self</span>.layoutConstraint.animator setConstant:layoutConstant];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">self</span>.layoutConstraint.constant = layoutConstant;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#else</span></div><div class="line">    <span class="keyword">self</span>.layoutConstraint.constant = layoutConstant;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面到最后会有个 <code>CGFloat</code> 类型的 <code>layoutConstant</code> 属性来保存值，并且在最后调用 <code>install</code> 方法的时候作为 <code>constant</code> 参数传入。</p>
<p>这里只看了下传入的 <code>NSValue</code> 为<code>offset</code> 的情况，还有 <code>centerOffset</code>、<code>sizeOffset</code> 和 <code>insets</code>，也都大同小异，就不熬述了。</p>
<p>其实这里有一点我没明白：<br>直到最后调用 <code>install</code> 方法前，<code>self.layoutConstraint</code> 这个 <code>MASLayoutConstraint</code> 类型的属性都是 <code>nil</code>，那么：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.layoutConstraint.constant = layoutConstant;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里的赋值又有什么意义呢？</p>
</blockquote>
<p><strong>第二种情况一般是直接传入一个视图：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(<span class="keyword">self</span>)</div></pre></td></tr></table></figure>
<p>这时，就会初始化一个 <code>layoutAttribute</code> 属性与 <code>firstViewArribute</code> （第一个约束参数对象）相同的 <code>MASViewAttribute</code> 对象，也就是第二个约束参数对象，上面代码意思就是使视图与 <code>self</code> 高度相等。</p>
<p><strong>第三种情况会传入一个视图的 <code>MASViewAttribute</code>：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(<span class="keyword">self</span>.height)</div><div class="line"><span class="comment">//或者</span></div><div class="line">make.height.equalTo(<span class="keyword">self</span>.mas_height)</div></pre></td></tr></table></figure>
<p>这两种写法其实效果是一样的，都是创建并返回一个 <code>MASViewAttribute</code> 对象。<code>View+MASShorthandAdditions.h</code> 这个 <code>category</code> 只有个 <code>.h</code>，定义了我们常用的属性和方法，但是具体实现还是调用的 <code>View+MASAdditions</code> 里面的方法，可以理解为去掉 <code>mas_</code> 命名前缀。</p>
<p>这里还有许多属性可以设置，比如 <code>multipliedBy</code>、<code>priority</code>等等，就不一一熬述了。</p>
<h4 id="链式语法特性的重要一环"><a href="#链式语法特性的重要一环" class="headerlink" title="链式语法特性的重要一环"></a>链式语法特性的重要一环</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.width.equalTo(@<span class="number">20</span>);</div></pre></td></tr></table></figure>
<p>这种同时设置多个约束属性的方式相信大家一定不陌生，认真看的人可能已经猜到了：那就是通过 <code>delegate</code> 的方式。</p>
<p>上面已经提到过，在 <code>make.height</code> 设置第一个约束属性时，</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute</div></pre></td></tr></table></figure>
<p>方法中，会设置 <code>MASViewConstraint</code> 对象代理，其作用就是为了能够同时设置多个约束属性！我们来看看 <code>make.height.width</code> 中 <code>.width</code>的调用链：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)width &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeWidth</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="built_in">NSAssert</span>(!<span class="keyword">self</span>.hasLayoutRelation, <span class="string">@"Attributes should be chained before defining the constraint relation"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.delegate constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASConstraintMaker.m</span></div><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">	MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123;</div><div class="line">        <span class="comment">//replace with composite constraint</span></div><div class="line">        <span class="built_in">NSArray</span> *children = @[constraint, newConstraint];</div><div class="line">        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">        compositeConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">        [<span class="keyword">self</span> constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];</div><div class="line">        <span class="keyword">return</span> compositeConstraint;</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的调用链我们可以发现，最终就是通过 <code>delegate</code> 的方式，调用 <code>MASConstraintMaker</code> 工厂类中的 <code>constraint:addConstraintWithLayoutAttribute:</code> 方法，这也是链式语法能链起来的原因。</p>
<p>我们还可以发现因为 <code>constraint</code> 不为 <code>nil</code>，所以这次初始化并返回的不是 <code>MASViewConstraint</code> 对象，而是 <code>MASCompositeConstraint</code> 这个对象了，下面我们来看看这个类。</p>
<h4 id="MASCompositeConstraint"><a href="#MASCompositeConstraint" class="headerlink" title="MASCompositeConstraint"></a>MASCompositeConstraint</h4><p>我们先来回顾下开头是怎么介绍 <code>MASCompositeConstraint</code> 这个类的：“<code>MASCompositeConstraint</code> 是约束的集合，它里面有个私有的数组用来存放多个 MASViewAttribute 对象”。</p>
<p>我们接着上面的例子看：</p>
<h5 id="make-height-width-equalTo-20"><a href="#make-height-width-equalTo-20" class="headerlink" title="make.height.width.equalTo(@20)"></a>make.height.width.equalTo(@20)</h5><p>当走到 <code>.width</code>时：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123;</div><div class="line">        <span class="comment">//replace with composite constraint</span></div><div class="line">        <span class="built_in">NSArray</span> *children = @[constraint, newConstraint];</div><div class="line">        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">        compositeConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">        [<span class="keyword">self</span> constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];</div><div class="line">        <span class="keyword">return</span> compositeConstraint;</div><div class="line">    &#125;</div><div class="line">   ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>成功的走进 <code>if</code> 判读里面，将 <code>.height.wight</code> 两条约束 <code>MASViewConstraint</code> 对象塞到数组里，创建 <code>MASCompositeConstraint</code> 对象，并且同样设置了 <code>delegate</code>，最后还把 <code>self.constraints</code> 里面事先添加好的约束 <code>MASViewConstraint</code> 对象替换成了 <code>MASCompositeConstraint</code> 对象。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)constraint:(MASConstraint *)constraint shouldBeReplacedWithConstraint:(MASConstraint *)replacementConstraint &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> index = [<span class="keyword">self</span>.constraints indexOfObject:constraint];</div><div class="line">    <span class="built_in">NSAssert</span>(index != <span class="built_in">NSNotFound</span>, <span class="string">@"Could not find constraint %@"</span>, constraint);</div><div class="line">    [<span class="keyword">self</span>.constraints replaceObjectAtIndex:index withObject:replacementConstraint];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以点击 <code>MASCompositeConstraint</code> 初始化方法里看看，它内部会通过 <code>for</code> 循环，把数组里面的<strong>所有</strong> <code>MASViewConstraint</code> 对象同样设置了 <code>delegate</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithChildren:(<span class="built_in">NSArray</span> *)children &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    _childConstraints = [children mutableCopy];</div><div class="line">    <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> _childConstraints) &#123;</div><div class="line">        constraint.delegate = <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这么做的目的同时是为了能够继续链式调用，比如我们再加个 <code>.left</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.width.left.equalTo(@<span class="number">20</span>);</div></pre></td></tr></table></figure>
<p>这时候的调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)left &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeLeft</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASCompositeConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    [<span class="keyword">self</span> constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)constraint:(MASConstraint __unused *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">id</span>&lt;MASConstraintDelegate&gt; strongDelegate = <span class="keyword">self</span>.delegate;</div><div class="line">    MASConstraint *newConstraint = [strongDelegate constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">    newConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span>.childConstraints addObject:newConstraint];</div><div class="line">    <span class="keyword">return</span> newConstraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，这里又是通过 <code>delegate</code> 方式，调用 <code>MASConstraintMaker</code> 工厂类中的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    </div><div class="line">    ....</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> newConstraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过这次仅仅是初始化了个 <code>MASViewConstraint</code> 对象就直接返回了，然后回到上个方法中添加到 <code>MASCompositeConstraint</code> 的私有数组 <code>self.childConstraints</code> 中返回备用。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">equalTo(@<span class="number">20</span>)</div></pre></td></tr></table></figure>
<p>因为到<code>.left</code> 时，返回的是 <code>MASCompositeConstraint</code> 对象，到这一步的时候会有点变化，调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>))equalTo &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.equalToWithRelation(attribute, <span class="built_in">NSLayoutRelationEqual</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASCompositeConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attr, <span class="built_in">NSLayoutRelation</span> relation) &#123;</div><div class="line">        <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> <span class="keyword">self</span>.childConstraints.copy) &#123;</div><div class="line">            constraint.equalToWithRelation(attr, relation);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，这里会循环之前准备好的私有数组 <code>self.childConstraints</code>，调用 <code>MASViewConstraint.m</code> 的 <code>equalToWithRelation</code> 方法，和上面讲的一样了。</p>
<h5 id="make-edges-equalTo-view"><a href="#make-edges-equalTo-view" class="headerlink" title="make.edges.equalTo(view)"></a>make.edges.equalTo(view)</h5><p>我们再来看看这种写法，调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraintMaker.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)edges &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithAttributes:MASAttributeTop | MASAttributeLeft | MASAttributeRight | MASAttributeBottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithAttributes:(MASAttribute)attrs &#123;</div><div class="line">    __unused MASAttribute anyAttribute = (MASAttributeLeft | MASAttributeRight | MASAttributeTop | MASAttributeBottom | MASAttributeLeading</div><div class="line">                                          | MASAttributeTrailing | MASAttributeWidth | MASAttributeHeight | MASAttributeCenterX</div><div class="line">                                          | MASAttributeCenterY | </div><div class="line">                                          </div><div class="line">                    ......</div><div class="line">                        </div><div class="line">    <span class="built_in">NSMutableArray</span> *attributes = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (attrs &amp; MASAttributeLeft) [attributes addObject:<span class="keyword">self</span>.view.mas_left];</div><div class="line">    <span class="keyword">if</span> (attrs &amp; MASAttributeRight) [attributes addObject:<span class="keyword">self</span>.view.mas_right];</div><div class="line">    <span class="keyword">if</span> (attrs &amp; MASAttributeTop) [attributes addObject:<span class="keyword">self</span>.view.mas_top];</div><div class="line">    </div><div class="line">    				......    </div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableArray</span> *children = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:attributes.count];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (MASViewAttribute *a <span class="keyword">in</span> attributes) &#123;</div><div class="line">        [children addObject:[[MASViewConstraint alloc] initWithFirstViewAttribute:a]];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    MASCompositeConstraint *constraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">    constraint.delegate = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span>.constraints addObject:constraint];</div><div class="line">    <span class="keyword">return</span> constraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码太多省略了一部分，可以发现这段代码作用就是返回一个包含多条约束的 <code>MASCompositeConstraint</code> 对象，接着后面的操作也都是一样的了。</p>
<p>上面这种写法还可以这样：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.edges.equalTo(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f));</div></pre></td></tr></table></figure>
<p>这里的 <code>equalTo</code> 需要注意下，它是一个<strong>宏</strong>，定义在 <code>MASConstraint.h</code> 中：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"><span class="meta">#define mas_greaterThanOrEqualTo(...)    greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"><span class="meta">#define mas_lessThanOrEqualTo(...)       lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"></div><div class="line"><span class="meta">#define mas_offset(...)                  valueOffset(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#ifdef MAS_SHORTHAND_GLOBALS</span></div><div class="line"></div><div class="line"><span class="meta">#define equalTo(...)                     mas_equalTo(__VA_ARGS__)</span></div><div class="line"><span class="meta">#define greaterThanOrEqualTo(...)        mas_greaterThanOrEqualTo(__VA_ARGS__)</span></div><div class="line"><span class="meta">#define lessThanOrEqualTo(...)           mas_lessThanOrEqualTo(__VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#define offset(...)                      mas_offset(__VA_ARGS__)</span></div></pre></td></tr></table></figure>
<p>我们来修改下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.edges.equalTo(MASBoxValue(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f)));</div></pre></td></tr></table></figure>
<p>可以发现，其实里面调用的是 <code>MASBoxValue</code> 这个宏，它将 <code>C</code> 和 <code>Objective-C</code> 语言中的一些基本数据结构比如说 <code>double</code> <code>CGPoint</code> <code>CGSize</code> 这些值用 <code>NSValue</code> 进行包装。</p>
<p>这里还支持直接调用 <code>size</code>、<code>center</code> 等，具体实现都差不多，就不熬述了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make.center.equalTo(<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">50</span>));</div><div class="line">make.size.equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">200</span>, <span class="number">100</span>));</div></pre></td></tr></table></figure>
<h5 id="make-height-equalTo-redView-blueView"><a href="#make-height-equalTo-redView-blueView" class="headerlink" title="make.height.equalTo(@[redView, blueView])"></a>make.height.equalTo(@[redView, blueView])</h5><p>我再来看看这种传数组的，在走到 <code>.equalTo</code> 时，最终会调用 <code>MASViewConstraint.m</code> 里面的 <code>equalToWithRelation</code> 方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute, <span class="built_in">NSLayoutRelation</span> relation) &#123;</div><div class="line">        <span class="keyword">if</span> ([attribute isKindOfClass:<span class="built_in">NSArray</span>.class]) &#123;</div><div class="line">            <span class="built_in">NSAssert</span>(!<span class="keyword">self</span>.hasLayoutRelation, <span class="string">@"Redefinition of constraint relation"</span>);</div><div class="line">            <span class="built_in">NSMutableArray</span> *children = <span class="built_in">NSMutableArray</span>.new;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> attr <span class="keyword">in</span> attribute) &#123;</div><div class="line">                MASViewConstraint *viewConstraint = [<span class="keyword">self</span> <span class="keyword">copy</span>];</div><div class="line">                viewConstraint.layoutRelation = relation;</div><div class="line">                viewConstraint.secondViewAttribute = attr;</div><div class="line">                [children addObject:viewConstraint];</div><div class="line">            &#125;</div><div class="line">            MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">            compositeConstraint.delegate = <span class="keyword">self</span>.delegate;</div><div class="line">            [<span class="keyword">self</span>.delegate constraint:<span class="keyword">self</span> shouldBeReplacedWithConstraint:compositeConstraint];</div><div class="line">            <span class="keyword">return</span> compositeConstraint;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;   ....    &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这边还是遍历数组，并且 <code>MASViewConstraint</code> 实现 <code>NSCopying</code> 协议，调用 <code>[self copy]</code> 会创建 <code>MASViewConstraint</code> 对象：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> __unused *)zone &#123;</div><div class="line">    MASViewConstraint *constraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:<span class="keyword">self</span>.firstViewAttribute];</div><div class="line">    constraint.layoutConstant = <span class="keyword">self</span>.layoutConstant;</div><div class="line">    constraint.layoutRelation = <span class="keyword">self</span>.layoutRelation;</div><div class="line">    constraint.layoutPriority = <span class="keyword">self</span>.layoutPriority;</div><div class="line">    constraint.layoutMultiplier = <span class="keyword">self</span>.layoutMultiplier;</div><div class="line">    constraint.delegate = <span class="keyword">self</span>.delegate;</div><div class="line">    <span class="keyword">return</span> constraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后会根据传的数组里面的 <code>Value</code> 类型来做不同的操作，前面讲过就不熬述了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSecondViewAttribute:(<span class="keyword">id</span>)secondViewAttribute &#123;</div><div class="line">    <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:<span class="built_in">NSValue</span>.class]) &#123;</div><div class="line">        [<span class="keyword">self</span> setLayoutConstantWithValue:secondViewAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) &#123;</div><div class="line">        _secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:<span class="keyword">self</span>.firstViewAttribute.layoutAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) &#123;</div><div class="line">        _secondViewAttribute = secondViewAttribute;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"attempting to add unsupported attribute: %@"</span>, secondViewAttribute);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后便是生成 <code>MASCompositeConstraint</code> 对象，并通过 <code>delegate</code> 方式，调用 <code>MASConstraintMaker</code> 的方法，替换 <code>self.constraints</code> 数组里的约束：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)constraint:(MASConstraint *)constraint shouldBeReplacedWithConstraint:(MASConstraint *)replacementConstraint &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> index = [<span class="keyword">self</span>.constraints indexOfObject:constraint];</div><div class="line">    <span class="built_in">NSAssert</span>(index != <span class="built_in">NSNotFound</span>, <span class="string">@"Could not find constraint %@"</span>, constraint);</div><div class="line">    [<span class="keyword">self</span>.constraints replaceObjectAtIndex:index withObject:replacementConstraint];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加约束到视图"><a href="#添加约束到视图" class="headerlink" title="添加约束到视图"></a>添加约束到视图</h4><p> <code>mas_makeConstraints</code> 方法的最后会调用 <code>[constraintMaker install]</code> 方法来添加所有存储在 <code>self.constraints</code> 数组中的所有约束。</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// MASConstraintMaker.m</span></div><div class="line"> </div><div class="line"> - (<span class="built_in">NSArray</span> *)install &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.removeExisting) &#123;</div><div class="line">        <span class="built_in">NSArray</span> *installedConstraints = [MASViewConstraint installedConstraintsForView:<span class="keyword">self</span>.view];</div><div class="line">        <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> installedConstraints) &#123;</div><div class="line">            [constraint uninstall];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSArray</span> *constraints = <span class="keyword">self</span>.constraints.copy;</div><div class="line">    <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> constraints) &#123;</div><div class="line">        constraint.updateExisting = <span class="keyword">self</span>.updateExisting;</div><div class="line">        [constraint install];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span>.constraints removeAllObjects];</div><div class="line">    <span class="keyword">return</span> constraints;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如果需要<strong>重新构建</strong>约束，也就是 调用 <code>mas_remakeConstraints:</code> 方法，会先取出视图的所有约束，然后通过一个 <code>for</code> 循环，调用 <code>uninstall</code> 来清空所有约束：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)uninstall &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> supportsActiveProperty]) &#123;</div><div class="line">        <span class="keyword">self</span>.layoutConstraint.active = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span>.firstViewAttribute.view.mas_installedConstraints removeObject:<span class="keyword">self</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.installedView removeConstraint:<span class="keyword">self</span>.layoutConstraint];</div><div class="line">    <span class="keyword">self</span>.layoutConstraint = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">self</span>.installedView = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.firstViewAttribute.view.mas_installedConstraints removeObject:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果不需要<strong>重新构建</strong>约束，会取出 <code>self.constraints</code> 数组中准备好的约束，通过 <code>for</code> 循环，调用 <code>install</code> 来把约束添加到视图上：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.hasBeenInstalled) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果约束以及存在并是 <code>active</code> 会直接返回。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> supportsActiveProperty] &amp;&amp; <span class="keyword">self</span>.layoutConstraint) &#123;</div><div class="line">     <span class="keyword">self</span>.layoutConstraint.active = <span class="literal">YES</span>;</div><div class="line">     [<span class="keyword">self</span>.firstViewAttribute.view.mas_installedConstraints addObject:<span class="keyword">self</span>];</div><div class="line">     <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 <code>self.layoutConstraint</code> 响应了 <code>isActive</code> 方法并且不为空，会激活这条约束并添加到 <code>mas_installedConstraints</code> 数组中，最后返回。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MAS_VIEW *firstLayoutItem = <span class="keyword">self</span>.firstViewAttribute.item;</div><div class="line"><span class="built_in">NSLayoutAttribute</span> firstLayoutAttribute = <span class="keyword">self</span>.firstViewAttribute.layoutAttribute;</div><div class="line">MAS_VIEW *secondLayoutItem = <span class="keyword">self</span>.secondViewAttribute.item;</div><div class="line"><span class="built_in">NSLayoutAttribute</span> secondLayoutAttribute = <span class="keyword">self</span>.secondViewAttribute.layoutAttribute;</div></pre></td></tr></table></figure>
<p>这边是获取即将用于初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code> 的几个属性。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.firstViewAttribute.isSizeAttribute &amp;&amp; !<span class="keyword">self</span>.secondViewAttribute) &#123;</div><div class="line">     secondLayoutItem = <span class="keyword">self</span>.firstViewAttribute.view.superview;</div><div class="line">     secondLayoutAttribute = firstLayoutAttribute;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这边是判断当前即将添加的约束是否是 <code>size</code> 类型的并且 <code>self.secondViewAttribute</code> 也就是约束的第二个参数是 <code>nil</code>，（<code>eg make.left.equalTo(@10)</code>）会自动将约束添加到约束的第一个参数视图的 <code>superview</code> 上。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MASLayoutConstraint *layoutConstraint = [MASLayoutConstraint</div><div class="line">                                 constraintWithItem:firstLayoutItem</div><div class="line">                                        attribute:firstLayoutAttribute</div><div class="line">                                        relatedBy:<span class="keyword">self</span>.layoutRelation</div><div class="line">                                           toItem:secondLayoutItem</div><div class="line">                                        attribute:secondLayoutAttribute</div><div class="line">                                       multiplier:<span class="keyword">self</span>.layoutMultiplier</div><div class="line">                                         constant:<span class="keyword">self</span>.layoutConstant];</div><div class="line">    </div><div class="line">layoutConstraint.priority = <span class="keyword">self</span>.layoutPriority;</div><div class="line">layoutConstraint.mas_key = <span class="keyword">self</span>.mas_key;</div></pre></td></tr></table></figure>
<p>然后就会初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.secondViewAttribute.view) &#123;</div><div class="line">    MAS_VIEW *closestCommonSuperview = [<span class="keyword">self</span>.firstViewAttribute.view mas_closestCommonSuperview:<span class="keyword">self</span>.secondViewAttribute.view];</div><div class="line">    <span class="built_in">NSAssert</span>(closestCommonSuperview,</div><div class="line">                 <span class="string">@"couldn't find a common superview for %@ and %@"</span>,</div><div class="line">                 <span class="keyword">self</span>.firstViewAttribute.view, <span class="keyword">self</span>.secondViewAttribute.view);</div><div class="line">    <span class="keyword">self</span>.installedView = closestCommonSuperview;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.firstViewAttribute.isSizeAttribute) &#123;</div><div class="line">    <span class="keyword">self</span>.installedView = <span class="keyword">self</span>.firstViewAttribute.view;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">self</span>.installedView = <span class="keyword">self</span>.firstViewAttribute.view.superview;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码会先判断是否有约束第二个参数的视图，有的话会寻找约束第一个和第二参数视图的公共 <code>Superview</code>，相当于求两个数的最小公倍数；如果不满足第一个条件，会判断约束第一个参数是否是 <code>size</code> 类型的，是的话直接取到它的视图；最后都不满足会直接取到约束第一个参数视图父视图。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">MASLayoutConstraint *existingConstraint = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.updateExisting) &#123;</div><div class="line">    existingConstraint = [<span class="keyword">self</span> layoutConstraintSimilarTo:layoutConstraint];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (existingConstraint) &#123;</div><div class="line">   <span class="comment">// just update the constant</span></div><div class="line">    existingConstraint.constant = layoutConstraint.constant;</div><div class="line">    <span class="keyword">self</span>.layoutConstraint = existingConstraint;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    [<span class="keyword">self</span>.installedView addConstraint:layoutConstraint];</div><div class="line">    <span class="keyword">self</span>.layoutConstraint = layoutConstraint;</div><div class="line">    [firstLayoutItem.mas_installedConstraints addObject:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要升级当前的约束就会获取原有的约束，并替换为新的约束，这样就不需要再次为 <code>view</code> 安装约束。如果原来的 <code>view</code> 中不存在可以升级的约束，那么就会在上一步寻找到的 <code>installedView</code> 上面添加约束。</p>
<h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>阅读懂源码真是一件很爽的事情，如果有什么理解的不到位的地方大家多多指正。也希望大家能够耐心的看下去，一定会有所收获的。</p>
<p>参考链接</p>
<p><a href="http://www.cnblogs.com/ludashi/p/5591572.html" target="_blank" rel="external">http://www.cnblogs.com/ludashi/p/5591572.html</a></p>
<p><a href="https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/Masonry/iOS%20%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%20---%20Masonry.md" target="_blank" rel="external">https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/Masonry/iOS%20%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%20—%20Masonry.md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/SnapKit/Masonry&quot;&gt;Masonry&lt;/a&gt; 是一个轻量级的用于自动布局（AutoLayout）的第三方框架，以其简洁的使用方式，受到广大开发者的青睐。本篇文章将带你一步步的去了解其实现原理，知其所以然！&lt;/p&gt;
&lt;h3 id=&quot;结构概览&quot;&gt;&lt;a href=&quot;#结构概览&quot; class=&quot;headerlink&quot; title=&quot;结构概览&quot;&gt;&lt;/a&gt;结构概览&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/Masonry.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈 Method Swizzling</title>
    <link href="http://yoursite.com/2017/01/25/Method-Swizzling/"/>
    <id>http://yoursite.com/2017/01/25/Method-Swizzling/</id>
    <published>2017-01-25T13:28:02.000Z</published>
    <updated>2017-01-25T15:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果对 Runtime 有一定了解的话，一定听说过或者用过这个函数：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT <span class="keyword">void</span> method_exchangeImplementations(Method m1, Method m2)</div></pre></td></tr></table></figure>
<p>它通常叫做 Method Swizzling，算是<code>objc</code>的 “黑魔法” 了，作用就是在程序运行期间动态的给两个方法互换实现。</p>
<p>最近有用到这个，总结下遇到的一些问题：</p>
<h4 id="静态（类）方法和实例方法的交换实现方式一样吗？"><a href="#静态（类）方法和实例方法的交换实现方式一样吗？" class="headerlink" title="静态（类）方法和实例方法的交换实现方式一样吗？"></a>静态（类）方法和实例方法的交换实现方式一样吗？</h4><p>交换静态（类）方法的正确姿势：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)go &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Go!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Stop!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>交换实例方法的正确姿势：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</div><div class="line">        Method m1 = class_getInstanceMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getInstanceMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)go &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Go!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Stop!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以发现上面两段方法的区别在于：</p>
<p>静态（类）方法的<code>Class</code>和<code>Method</code>是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div></pre></td></tr></table></figure>
<p>实例方法的<code>Class</code>和<code>Method</code>是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</div><div class="line">Method m1 = class_getInstanceMethod(<span class="keyword">class</span>, s1);</div><div class="line">Method m2 = class_getInstanceMethod(<span class="keyword">class</span>, s2);</div></pre></td></tr></table></figure>
<p>Runtime 中<code>class_getClassMethod</code>的实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Method class_getClassMethod(Class cls, SEL sel)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!cls  ||  !sel) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> class_getInstanceMethod(cls-&gt;getMeta(), sel);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家可以下载 <a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="external">Runtime 源码</a> 看看。</p>
<p>其实<code>class_getClassMethod</code>内就是调了下<code>class_getInstanceMethod</code>，只是传的<code>Class</code>参数不一样：</p>
<ul>
<li><code>class_getClassMethod</code> 中<code>Class</code>参数传的是元类，也就是类对象的类。（关于元类大家可以看看这篇翻译的文章 <a href="http://ios.jobbole.com/81657/" target="_blank" rel="external">Objective-C 中的元类（meta class）是什么？</a>）</li>
<li><code>class_getInstanceMethod</code>中<code>Class</code> 参数看名字就可以理解，既然是获得实例方法，自然传的就是实例对象的类。</li>
</ul>
<p>那 <code>object_getClass(id obj)</code> 又是什么呢？还是看源码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Class object_getClass(<span class="keyword">id</span> obj)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) <span class="keyword">return</span> obj-&gt;getIsa();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>object_getClass()</code> 就是顺着 isa 的指向链找到对应的类。</p>
<p>有兴趣的可以看看这篇文章：<a href="http://ios.jobbole.com/91962/" target="_blank" rel="external">为什么 object_getClass(obj) 与 [OBJ class] 返回的指针不同</a></p>
<h4 id="静态（类）方法和实例方法里面的-self-表示的含义一样吗？"><a href="#静态（类）方法和实例方法里面的-self-表示的含义一样吗？" class="headerlink" title="静态（类）方法和实例方法里面的 self 表示的含义一样吗？"></a>静态（类）方法和实例方法里面的 self 表示的含义一样吗？</h4><p>先说明下为什么我会突然有这个疑问：</p>
<p>当初为了方便测试交换两个静态方法的实现，我直接撸了这一段代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(test1);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(test2);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    [ViewController test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)test1 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"test1"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)test2 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"test2"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-25 17:13:53.356 RuntimeDemo[16180:4689887] test1</div><div class="line">2017-01-25 17:13:53.356 RuntimeDemo[16180:4689887] test2</div></pre></td></tr></table></figure>
<p>居然交换失败了！</p>
<p>然后我尝试着把代码挪到 <code>+ (void)load{}</code> 里面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = @selector(test1);</div><div class="line">        SEL s2 = @selector(test2);</div><div class="line">        Class class = object_getClass((id)self);</div><div class="line">        Method m1 = class_getClassMethod(class, s1);</div><div class="line">        Method m2 = class_getClassMethod(class, s2);</div><div class="line">        BOOL success = class_addMethod(class, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        if (success)&#123;</div><div class="line">            class_replaceMethod(class, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    [ViewController test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-25 17:23:32.739 RuntimeDemo[16212:4705811] test2</div><div class="line">2017-01-25 17:23:32.739 RuntimeDemo[16212:4705811] test1</div></pre></td></tr></table></figure>
<p>可以发现交换成功了！</p>
<p>在找原因之前我们先来看一张经典的图：</p>
<p><img src="/images/011.png" alt=""></p>
<p>从左到右依次是：实例对象、类对象、元类（类对象的类）。</p>
<p>我们通常这样来获取这三个对象：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person *obj = [Person new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"instance         :%p"</span>, obj);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"class            :%p"</span>, object_getClass(obj));</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"meta class       :%p"</span>, object_getClass(object_getClass(obj)));</div></pre></td></tr></table></figure>
<p>我们来大胆猜想下：<strong>在实例方法中，<code>self</code>表示的是实例对象这个大家都知道，那在类（静态）方法中<code>self</code>表示的是不是就是实例对象的类，也就是类对象呢？</strong>我们直接撸代码来验证下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)test1 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,<span class="keyword">self</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)test2 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,<span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2017-01-25 22:54:37.325 RuntimeDemo[3841:159827] 0x7ff6ee50ac00</div><div class="line">2017-01-25 22:54:38.752 RuntimeDemo[3841:159827] 0x100ec0fe0</div><div class="line">2017-01-25 22:54:42.740 RuntimeDemo[3841:159827] 0x100ec0fe0</div></pre></td></tr></table></figure>
<p>果然不出所料，我们的大胆猜想是正确的。</p>
<p>回过头，我们修改下实例方法中交换的实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">       	····</div><div class="line">       	</div><div class="line">       	Class <span class="keyword">class</span> = object_getClass(object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>));</div><div class="line">      </div><div class="line">      	····</div><div class="line">       &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    [ViewController test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果也自然而然的交换成功了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-25 23:02:12.579 RuntimeDemo[3926:164600] test2</div><div class="line">2017-01-25 23:02:12.580 RuntimeDemo[3926:164600] test1</div></pre></td></tr></table></figure>
<h4 id="网上的-Method-Swizzling-有两种写法，到底哪种靠谱？"><a href="#网上的-Method-Swizzling-有两种写法，到底哪种靠谱？" class="headerlink" title="网上的 Method Swizzling 有两种写法，到底哪种靠谱？"></a>网上的 Method Swizzling 有两种写法，到底哪种靠谱？</h4><p>两种写法分别如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        method_exchangeImplementations(m1, m2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一种多了个判断，第二种是直接交换。</p>
<p>文章一开始也说了，第一种是比较严谨的写法；而第二种，<strong>当我们想交换有多个继承关系的子类里面的方法并且子类没有实现父类的方法时，直接<code>method_exchangeImplementations</code>会把父类的方法也给交换了</strong>，一般这不是我们想要的结果，下面我们直接撸代码来验证下：</p>
<p>父类 Person</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.h</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="comment">//静态(类) 方法</span></div><div class="line">+ (<span class="keyword">void</span>)go;</div><div class="line">+ (<span class="keyword">void</span>)stop;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">.m</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)go &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Go!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Stop!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>子类 Programmer</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.h</div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Programmer</span> : <span class="title">Person</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">.m</div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"Programmer.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Programmer</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        method_exchangeImplementations(m1, m2);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//+ (void)go &#123;</span></div><div class="line"><span class="comment">//    NSLog(@"Programmer - go");</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//+ (void)stop &#123;</span></div><div class="line"><span class="comment">//    NSLog(@"Programmer - stop");</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    [Person go];</div><div class="line">    [Person stop];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------"</span>);</div><div class="line">    [Programmer go];</div><div class="line">    [Programmer stop];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们只实现父类的 <code>go</code> 和 <code>stop</code> 这两个静态方法，打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2017-01-25 23:30:12.850 RuntimeDemo[4180:180408] Stop!</div><div class="line">2017-01-25 23:30:12.851 RuntimeDemo[4180:180408] Go!</div><div class="line">2017-01-25 23:30:12.851 RuntimeDemo[4180:180408] ---------</div><div class="line">2017-01-25 23:30:12.851 RuntimeDemo[4180:180408] Stop!</div><div class="line">2017-01-25 23:30:12.852 RuntimeDemo[4180:180408] Go!</div></pre></td></tr></table></figure>
<p>可以发现，<strong>子类<code>Programmer</code>没有实现父类的方法直接交换时， 父类<code>Person</code>的方法也被交换了！</strong></p>
<p>我们接着打开子类的 <code>go</code> 和 <code>stop</code> 这两个静态方法，打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2017-01-25 23:32:22.953 RuntimeDemo[4215:181987] Go!</div><div class="line">2017-01-25 23:32:22.954 RuntimeDemo[4215:181987] Stop!</div><div class="line">2017-01-25 23:32:22.956 RuntimeDemo[4215:181987] ---------</div><div class="line">2017-01-25 23:32:22.956 RuntimeDemo[4215:181987] Programmer - stop</div><div class="line">2017-01-25 23:32:22.956 RuntimeDemo[4215:181987] Programmer - go</div></pre></td></tr></table></figure>
<p>可以发现，<strong>子类实现了父类的方法，直接交换也是没有问题的！</strong></p>
<p>我们加上判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        ...</div><div class="line">        </div><div class="line">        BOOL success =  class_addMethod(class, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        if (success)&#123;</div><div class="line">            class_replaceMethod(class, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;else&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ...</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把上面两种情况在试验下，可以发现<strong>交换的仅仅是子类<code>Programmer</code>的方法，父类<code>Person</code>是没有被交换的！</strong>大家可以自己尝试下。</p>
<p>稍稍的解释下：</p>
<p><code>class_addMethod</code>函数会检查方法有没有实现，如果已经实现会返回 NO ，也就是直接走<code>method_exchangeImplementations</code>方法；没有实现会先在当前类增加一个新的实现方法，再把目标类中的方法通过<code>class_replaceMethod</code>函数替换为旧有的实现；</p>
<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>以上就是我遇到的问题，希望对大家能有点帮助。最后也希望大家能够亲自动手敲一遍，加深下印象。</p>
<p>参考链接</p>
<p><a href="http://ios.jobbole.com/91962/" target="_blank" rel="external">http://ios.jobbole.com/91962/</a></p>
<p><a href="http://ios.jobbole.com/81657/" target="_blank" rel="external">http://ios.jobbole.com/81657/</a></p>
<p><a href="http://blog.csdn.net/horkychen/article/details/8532087" target="_blank" rel="external">http://blog.csdn.net/horkychen/article/details/8532087</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果对 Runtime 有一定了解的话，一定听说过或者用过这个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;OBJC_EXPORT &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; method_exchangeImplementations(Method m1, Method m2)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它通常叫做 Method Swizzling，算是&lt;code&gt;objc&lt;/code&gt;的 “黑魔法” 了，作用就是在程序运行期间动态的给两个方法互换实现。&lt;/p&gt;
&lt;p&gt;最近有用到这个，总结下遇到的一些问题：&lt;/p&gt;
&lt;h4 id=&quot;静态（类）方法和实例方法的交换实现方式一样吗？&quot;&gt;&lt;a href=&quot;#静态（类）方法和实例方法的交换实现方式一样吗？&quot; class=&quot;headerlink&quot; title=&quot;静态（类）方法和实例方法的交换实现方式一样吗？&quot;&gt;&lt;/a&gt;静态（类）方法和实例方法的交换实现方式一样吗？&lt;/h4&gt;&lt;p&gt;交换静态（类）方法的正确姿势：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        SEL s1 = &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(go);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        SEL s2 = &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(stop);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; = object_getClass((&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Method m1 = class_getClassMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Method m2 = class_getClassMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; success = class_addMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s1, method_getImplementation(m2), method_getTypeEncoding(m2));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (success)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            class_replaceMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s2, method_getImplementation(m1), method_getTypeEncoding(m1));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            method_exchangeImplementations(m1, m2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)go &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Go!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)stop &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Stop!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义 Xcode ViewController 类模板</title>
    <link href="http://yoursite.com/2017/01/02/Xcode-VC-Template/"/>
    <id>http://yoursite.com/2017/01/02/Xcode-VC-Template/</id>
    <published>2017-01-02T11:46:23.000Z</published>
    <updated>2017-11-23T02:34:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说我们先来体验下 :</p>
<p><img src="/images/VC.gif" alt=""></p>
<h3 id="什么是-Xcode-类模板-？"><a href="#什么是-Xcode-类模板-？" class="headerlink" title="什么是 Xcode 类模板 ？"></a>什么是 Xcode 类模板 ？</h3><p>说到 Xcode 类模板有些人可能觉得陌生，其实作为一名 iOS 开发，我们每天都会用到 Xcode 类模板，例如创建一个 UIViewController，一个 Category 等等，这些其实都是 Xcode 帮我们集成好的模板。<br><a id="more"></a><br><a name="options" style="color:#666;border-bottom:none;" ;="">创建系统 VC 模版 :</a></p>
<p><img src="/images/01.png" alt=""></p>
<h3 id="为什么要自定义-Xcode-类模板-？"><a href="#为什么要自定义-Xcode-类模板-？" class="headerlink" title="为什么要自定义 Xcode 类模板 ？"></a>为什么要自定义 Xcode 类模板 ？</h3><p>当我们用 Xcode 自带的模板创建一个 UIViewController 的子类时，我们会发现 <code>.m</code> 文件会多出一些方法 :</p>
<p><img src="/images/02.png" alt=""></p>
<p>而我们平时的开发中，或多或少都有自己的一些规范，尤其是在多人合作开发的情况下，一些好的开发规范是相当必要的。</p>
<p><a name="我的VC模版" style="color:#666;border-bottom:none;">我的 UIViewController 规范</a> :</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"MyViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyViewController</span> ()</span></div><div class="line"><span class="comment">// &lt;UITableViewDelegate,UITableViewDataSource&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyViewController</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - LifeCyle</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">[<span class="keyword">super</span> viewDidLoad];</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">- (void)viewWillAppear:(BOOL)animated &#123;</div><div class="line">[super viewWillAppear:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class="line">[super viewDidAppear:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillDisappear:(BOOL)animated &#123;</div><div class="line">[super viewWillDisappear:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)viewDidDisappear:(BOOL)animated &#123;</div><div class="line">[super viewDidDisappear:animated];</div><div class="line">&#125;</div><div class="line">**/</div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@-释放了"</span>,<span class="keyword">self</span>.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Intial Methods</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Target Methods</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Private Method</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Setter Getter Methods</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - External Delegate</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - UITableViewDelegate,UITableViewDataSource</span></div><div class="line"><span class="comment">/*</span></div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line">return &lt;#section#&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line">return &lt;#row#&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">return &lt;# UITableViewCell #&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">return &lt;#height#&gt;;</div><div class="line">&#125;</div><div class="line">**/</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这么一堆东西写起来也是要点时间的，如果每创建个 VC 就要写一遍也太不优雅了。</p>
<p><strong>有没有什么办法能够在我们创建 VC 的时候自动生成这些呢？</strong></p>
<h3 id="创建自己的-Xcode-类模板"><a href="#创建自己的-Xcode-类模板" class="headerlink" title="创建自己的 Xcode 类模板"></a>创建自己的 Xcode 类模板</h3><p>一份成品模版结构大概这样 :</p>
<p><img src="/images/03.png" alt=""></p>
<p>介绍下里面的东西 (<code>xxx</code> 就是你自定义模版的名字) :</p>
<blockquote>
<p><strong>xxx.xctemplate：</strong>模版文件。</p>
<p><strong>xxxObjective-C：</strong>OC 模版文件，里面包含 <code>___FILEBASENAME___.h</code> 和 <code>___FILEBASENAME___.m</code> 两个文件。</p>
<p><strong>xxxXIBObjective-C：</strong>比 <code>xxxObjective-C</code> 多了个 <code>___FILEBASENAME___.xib</code> 文件，可自定义。</p>
<p><strong>xxxSwift：</strong>Swift模版文件，里面包含一个 <code>___FILEBASENAME___.swift</code> 文件。</p>
<p><strong>xxxXIBSwift：</strong>比 <code>xxxSwift</code> 多了个 <code>___FILEBASENAME___.xib</code> 文件，可自定义。</p>
<p><strong>TemplateIcon.png：</strong>模版显示的图片。</p>
<p><strong>TemplateInfo.plist：</strong>模版的配置信息，<strong><a href="#TemplateInfo.plist">介绍</a></strong>。</p>
</blockquote>
<p>重新写一份模版太繁琐，我们<strong>直接拷贝一份系统的模版来修改</strong> ：</p>
<ul>
<li>拷贝 <code>Cocoa Class.xctemplate</code>，修改名称并删除不需要的文件。（我这边是  <code>Xcode 8.2.1</code>, 以后路径可能有变）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/Source</div></pre></td></tr></table></figure>
<ul>
<li>修改 <code>.h</code> 为 ：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  ___FILENAME___</span></div><div class="line"><span class="comment">//  ___PROJECTNAME___</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></div><div class="line"><span class="comment">//___COPYRIGHT___</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line">___IMPORTHEADER_cocoaSubclass___</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">___FILEBASENAMEASIDENTIFIER___</span> : <span class="title">UIViewController</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>修改 <code>.m</code> 只需要添加自己需要的规范就行，可以参考 <strong><a href="#我的VC模版">我的VC模版</a></strong>。</li>
<li><p>修改 <code>.swift</code> 为: </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//  ___FILENAME___</span></div><div class="line"> <span class="comment">//  ___PROJECTNAME___</span></div><div class="line"> <span class="comment">//</span></div><div class="line"> <span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></div><div class="line"> <span class="comment">//___COPYRIGHT___</span></div><div class="line"> <span class="comment">//</span></div><div class="line"> </div><div class="line"></div><div class="line">import <span class="built_in">UIKit</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> ___FILEBASENAMEASIDENTIFIER___: <span class="built_in">UIViewController</span> &#123;</div><div class="line"></div><div class="line"><span class="comment">//MARK: - LifeCyle</span></div><div class="line"></div><div class="line">override func viewDidLoad() &#123;</div><div class="line"><span class="keyword">super</span>.viewDidLoad()</div><div class="line">&#125;</div><div class="line"></div><div class="line">deinit &#123;</div><div class="line">print(<span class="string">"\(object_getClassName(self)) - 释放了!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MARK: - Intial Methods</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - Target Methods</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - Private Method</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - Setter Getter Methods</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - External Delegate</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>新建 <code>.xib</code> 重命名 <code>___FILEBASENAME___.xib</code> 并按照下图修改:</p>
</li>
</ul>
<p><img src="/images/04.png" alt=""></p>
<p><img src="/images/05.png" alt=""></p>
<p>上面 <code>.h</code> <code>.m</code> 里面 有些词可能不明白，这里再稍稍解释下：</p>
<blockquote>
<p>1）<strong>DATE：</strong>标识当前时间；</p>
<p>2）<strong>FILENAME：</strong>带文件后缀的全名；</p>
<p>3）<strong>FILEBASENAME：</strong>不带文件后缀的名字；</p>
<p>4）<strong>FULLUSERNAME：</strong>当前的用户名；</p>
<p>6）<strong>PROJECTNAME：</strong>工程名字；</p>
<p>7）<strong>FILEBASENAMEASIDENTIFIER：</strong> VC类名称；</p>
<p>8）<strong>IMPORTHEADER_cocoaSubclass：</strong> 导入的头文件。</p>
</blockquote>
<h4 id="TemplateInfo-plist"><a href="#TemplateInfo-plist" class="headerlink" title="TemplateInfo.plist"></a><a name="TemplateInfo.plist" style="color:#666;border-bottom:none;">TemplateInfo.plist</a></h4><p><img src="/images/06.png" alt=""></p>
<p>讲解一些需要改动的东西 :</p>
<blockquote>
<p><strong>SortOrder：</strong>模版在界面中的位置；</p>
<p><strong>Options：</strong>对应 <strong><a href="#options">图中</a></strong> 四行；</p>
<p><strong>FallbackHeader：</strong><code>.h</code> 导入的头文件；</p>
<p><strong>RequiredOptions -&gt; cocoaSubclass：</strong>是否支持选择 xib；<code>Default</code> 默认 <code>true</code> 自动勾选；</p>
<p><strong>Values：</strong>自定义模版的名称(一定要保持一致);</p>
<p><strong>Suffixes：</strong>模版默认类名，效果如下图。</p>
</blockquote>
<p><img src="/images/07.gif" alt=""></p>
<p>最后把创建好的 <code>xxx.xctemplate</code> 文件直接拷贝到系统路径下就可以直接使用了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/Source</div></pre></td></tr></table></figure>
<h3 id="修改系统模板"><a href="#修改系统模板" class="headerlink" title="修改系统模板"></a>修改系统模板</h3><p>平常开发中，我们经常用<code>xib</code>来画一个<code>View</code>，之前用系统的模板创建<code>View</code>的时候是有勾选是否创建对应<code>xib</code>的这个选项的，苹果不知道什么时候改了，现在貌似不行了：</p>
<p><img src="/images/08.png" alt=""></p>
<p>这样导致我们创建完<code>View</code>后，还需要再创建个对应的<code>xib</code>文件，简直神烦！<br>怎么能自动创建<code>xib</code>文件呢？我们完全可以修改系统的模板来满足我们的刚需：</p>
<ul>
<li><p>进入目录，找到<code>Cocoa Touch Class.xctemplate</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/Source</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝一份 <code>UIViewObjective-C</code>文件并改名为<code>UIViewXIBObjective-C</code>，然后到其他有<code>xib</code>的文件夹里面，拷贝一份<code>xib</code>到<code>UIViewXIBObjective-C</code>里面，<code>xib</code>可自行修改。（我这里只配置了<code>Objective-C</code>的，<code>Swift</code>步骤类似）</p>
</li>
<li>找到 当前目录的<code>TemplateInfo.plist</code>文件，如下修改：</li>
</ul>
<p><img src="/images/09.png" alt=""></p>
<ul>
<li>重新创建系统 <code>View</code>模板：</li>
</ul>
<p><img src="/images/10.png" alt=""></p>
<p>大功告成！</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>放上我自己的一个 <strong><a href="https://github.com/ifelseboyxx/CustomXcodeTempate" target="_blank" rel="external">UIViewController 模板</a></strong> 懒得自己写的可以直接用或者在我的模板基础上修改！</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.jianshu.com/p/93527682d8d3" target="_blank" rel="external">http://www.jianshu.com/p/93527682d8d3</a></p>
<p><a href="http://www.bobmccune.com/2012/03/04/creating-custom-xcode-4-file-templates/" target="_blank" rel="external">http://www.bobmccune.com/2012/03/04/creating-custom-xcode-4-file-templates/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说我们先来体验下 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/VC.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-Xcode-类模板-？&quot;&gt;&lt;a href=&quot;#什么是-Xcode-类模板-？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Xcode 类模板 ？&quot;&gt;&lt;/a&gt;什么是 Xcode 类模板 ？&lt;/h3&gt;&lt;p&gt;说到 Xcode 类模板有些人可能觉得陌生，其实作为一名 iOS 开发，我们每天都会用到 Xcode 类模板，例如创建一个 UIViewController，一个 Category 等等，这些其实都是 Xcode 帮我们集成好的模板。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
</feed>
