<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ifelseboyxx&#39;s Blog</title>
  <subtitle>学有所获，习有所得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-17T15:24:55.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ifelseboyxx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用多态及协议多重继承统一接口数据格式</title>
    <link href="http://yoursite.com/2017/04/17/protocol/"/>
    <id>http://yoursite.com/2017/04/17/protocol/</id>
    <published>2017-04-17T15:15:57.000Z</published>
    <updated>2017-04-17T15:24:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始之前先简单说下需求：首先，页面样式由<code>A部门</code>负责，但是页面的数据依赖于<code>B部门</code>和<code>C部门</code>，<code>B、C</code>都有自己的唯一标识<code>projectTag</code>并且都有自己的接口，接口字段都不相同，他们的关系如下图：</p>
<p><img src="/images/pic.png" alt=""></p>
<a id="more"></a>
<p>在这种关系结构下就会导致一个问题：<code>B接口</code>和<code>C接口</code>都有自己数据格式，<code>A部门</code>的页面到底用哪个接口？总不能用<code>if else</code>判断吧？万一还有<code>部门D</code>、<code>部门E</code>呢？</p>
<h2 id="利用协议实现多重继承"><a href="#利用协议实现多重继承" class="headerlink" title="利用协议实现多重继承"></a>利用协议实现多重继承</h2><p>首先我们新建个协议 <code>PublicProtocol.h</code>，这个协议定义了<code>页面VC</code>所需要的数据元素（这里一般都定义成 <code>readonly</code>，不允许外部修改）：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifndef PublicProtocol_h</span></div><div class="line"><span class="meta">#define PublicProtocol_h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DataInfoProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"><span class="keyword">@required</span></div><div class="line"><span class="comment">/** title */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *title;</div><div class="line"><span class="keyword">@optional</span></div><div class="line"><span class="comment">/** subTitle */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *subTitle;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="meta">#endif /* PublicProtocol_h */</span></div></pre></td></tr></table></figure>
<p>然后我们在<code>部门A</code>和<code>部门B</code>的接口<code>Model</code>中实现这个协议并返回所需要的数据：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassAModel.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"PublicProtocol.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassAModel</span> : <span class="title">NSObject</span></span></div><div class="line">&lt;DataInfoProtocol&gt;</div><div class="line"></div><div class="line"><span class="comment">/** titleA */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *titleA;</div><div class="line"></div><div class="line"><span class="comment">/** subTitleA */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *subTitleA;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassAModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassAModel</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - DataInfoProtocol setter</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)title &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.titleA;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)subTitle &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.subTitleA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>部门B</code>的接口<code>Model</code>也类似：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassBModel.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"PublicProtocol.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassBModel</span> : <span class="title">NSObject</span></span></div><div class="line">&lt;DataInfoProtocol&gt;</div><div class="line"></div><div class="line"><span class="comment">/** titleB */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *titleB;</div><div class="line"></div><div class="line"><span class="comment">/** subTitleB */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *subTitleB;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassBModel.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassBModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassBModel</span></span></div><div class="line"><span class="meta">#pragma mark - DataInfoProtocol setter</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)title &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.titleB;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)subTitle &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.subTitleB;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这样我们就解决了不同接口参数不一样的问题，统一了接口字段。接着我们还有个问题：</p>
<p><strong>该怎么传递数据给<code>页面VC</code>？</strong></p>
<h2 id="利用多态特性传递数据"><a href="#利用多态特性传递数据" class="headerlink" title="利用多态特性传递数据"></a>利用多态特性传递数据</h2><p>首先我们新建个抽象数据源基类 <code>BaseClass.h</code>，里面定义好 <code>页面VC</code>所需要的数据源：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BaseClass.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"PublicProtocol.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BaseClass</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/** 数据源*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSArray</span> &lt;<span class="keyword">id</span>&lt;DataInfoProtocol&gt;&gt; *dataList;</div><div class="line"></div><div class="line"><span class="comment">/** 接口请求操作*/</span></div><div class="line">- (<span class="keyword">void</span>)fetchDataWithCompletionHandler:(<span class="keyword">void</span>(^)())completeBlock;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里返回的数据源是一个实现 <code>DataInfoProtocol</code> 协议的对象数组 <code>dataList</code>。</p>
<p>接着每个部门都包含一个<code>BaseClass</code>的子类，比如 <code>部门A</code> 的数据源类 <code>ClassA.h</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassA.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"BaseClass.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClassA</span> : <span class="title">BaseClass</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ClassA.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassA.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"ClassAModel.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClassA</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)fetchDataWithCompletionHandler:(<span class="keyword">void</span> (^)())completeBlock &#123;</div><div class="line">    </div><div class="line">    <span class="comment">//模拟请求接口操作</span></div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2.0</span>f * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        </div><div class="line">        <span class="built_in">NSDictionary</span> *tempDict = @&#123;<span class="string">@"titleA"</span>    : <span class="string">@"Jhons"</span>,</div><div class="line">                                   <span class="string">@"subTitleA"</span> : <span class="string">@"iOS dev"</span>&#125;;</div><div class="line">        ClassAModel *aModel = [ClassAModel classAModelWithDict:tempDict];</div><div class="line">        <span class="keyword">self</span>.dataList = @[aModel];</div><div class="line">        </div><div class="line">        completeBlock();</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@dealloc"</span>,<span class="keyword">self</span>.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里模拟了请求接口，返回了 <code>A接口</code> 的数据源，<code>B部门</code> 也类似。</p>
<p>接着，我们申明抽象数据源类 <code>BaseClass</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Data Class */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) BaseClass *dataClass;</div></pre></td></tr></table></figure>
<p>然后我们就可以根据每个部门的<code>projectTag</code>标识，来创建不同的数据源类：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</div><div class="line">    [<span class="keyword">super</span> viewWillAppear:animated];</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *plistPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"ProjectMaps"</span> ofType:<span class="string">@"plist"</span>];</div><div class="line">    <span class="built_in">NSDictionary</span> *dictionary = [[<span class="built_in">NSDictionary</span> alloc] initWithContentsOfFile:plistPath];</div><div class="line">    <span class="keyword">self</span>.dataClass = [<span class="built_in">NSClassFromString</span>(dictionary[<span class="keyword">self</span>.projectTag]) new];</div><div class="line">    </div><div class="line">    [MBProgressHUD showHUDAddedTo:<span class="keyword">self</span>.view animated:<span class="literal">YES</span>];</div><div class="line">    [<span class="keyword">self</span>.dataClass fetchDataWithCompletionHandler:^&#123;</div><div class="line">        [MBProgressHUD hideHUDForView:<span class="keyword">self</span>.view animated:<span class="literal">YES</span>];</div><div class="line">        [<span class="keyword">self</span>.tvDetial reloadData];</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我用了个 <code>ProjectMaps.plist</code>，来根据每个项目的<code>projectTag</code> 标识，定义好数据源类：</p>
<p><img src="/images/pic_01.png" alt=""></p>
<p>写的例子比较简单，但是设计思路应该很明白了，具体效果如下：</p>
<p><img src="/images/maps.gif" alt=""></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>可能这并不是最后的设计模式，如果有更好地，希望能一起讨论下 ^ ^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始之前先简单说下需求：首先，页面样式由&lt;code&gt;A部门&lt;/code&gt;负责，但是页面的数据依赖于&lt;code&gt;B部门&lt;/code&gt;和&lt;code&gt;C部门&lt;/code&gt;，&lt;code&gt;B、C&lt;/code&gt;都有自己的唯一标识&lt;code&gt;projectTag&lt;/code&gt;并且都有自己的接口，接口字段都不相同，他们的关系如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pic.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Objective-C 之多重代理</title>
    <link href="http://yoursite.com/2017/04/11/MultipleDelegate/"/>
    <id>http://yoursite.com/2017/04/11/MultipleDelegate/</id>
    <published>2017-04-11T15:00:04.000Z</published>
    <updated>2017-04-11T15:04:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Objective-C 中，经常使用 delegate 来实现对象之间通信，但是 delegate 一般是对象间一对一的通信，对于一对多的场景我们常用的是 KVO 以及通知中心。那么有些特殊的场景下，比如多个对象监听 UITableView 的滚动，这时候我们就需要思考如何实现 delegate 的一对多：</p>
<p><img src="/images/2.gif" alt=""></p>
<a id="more"></a>
<h2 id="动态方法决议与消息转发"><a href="#动态方法决议与消息转发" class="headerlink" title="动态方法决议与消息转发"></a>动态方法决议与消息转发</h2><p>在 Objective-C 中，如果向一个对象发送一条该对象无法处理的消息，会导致程序 crash：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">XXViewOne</span> : <span class="title">UIView</span></span></div><div class="line">- (<span class="keyword">void</span>)xx;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="comment">//.m</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XXViewOne</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>如果我们直接调用 <code>xx</code> 方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">XXViewOne *one = [XXViewOne new];</div><div class="line">[one xx];</div></pre></td></tr></table></figure>
<p>就会报如下错误：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-04-11 19:24:15.826 MultipleDelegateDemo[8189:13619859] -[XXViewOne xx]: unrecognized selector sent to instance 0x7feaed404ee0</div><div class="line">2017-04-11 19:24:15.829 MultipleDelegateDemo[8189:13619859] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[XXViewOne xx]: unrecognized selector sent to instance 0x7feaed404ee0'</div></pre></td></tr></table></figure>
<p>但是，在 crash 之前，oc 的运行时系统会先经过以下两个步骤：</p>
<ul>
<li>Dynamic Method Resolution</li>
<li>Message Forwarding</li>
</ul>
<h3 id="Dynamic-Method-Resolution（动态方法决议）"><a href="#Dynamic-Method-Resolution（动态方法决议）" class="headerlink" title="Dynamic Method Resolution（动态方法决议）"></a>Dynamic Method Resolution（动态方法决议）</h3><p>如果我们调用的是实例方法（-），会先调用下面的方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</div><div class="line">    <span class="built_in">BOOL</span> hasSel = [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">    <span class="keyword">return</span> hasSel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们调用的是静态方法（+），会先调用下面的方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel &#123;</div><div class="line">    <span class="built_in">BOOL</span> hasSel = [<span class="keyword">super</span> resolveClassMethod:sel];</div><div class="line">    <span class="keyword">return</span> hasSel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个我们就有机会在程序运行时，动态的为一个 SEL 提供实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</div><div class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(xx)) &#123;</div><div class="line">        class_addMethod(<span class="keyword">self</span>.class, sel, (IMP)DynamicMethodIMP, <span class="string">"v@:"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">BOOL</span> hasSel = [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">    <span class="keyword">return</span> hasSel;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> DynamicMethodIMP(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="built_in">NSStringFromSelector</span>(_cmd));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，即使我们没有实现  <code>xx</code> 方法也不会 crash，因为我们已经在运行时动态的添加好了对应的实现。如果我们没有动态的添加实现并且 <code>resolveInstanceMethod:</code> 返回 <code>NO</code>，就会进入下一步消息转发（Message Forwarding）。</p>
<h3 id="Message-Forwarding（消息转发）"><a href="#Message-Forwarding（消息转发）" class="headerlink" title="Message Forwarding（消息转发）"></a>Message Forwarding（消息转发）</h3><p>首先会先调用下面的方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</div><div class="line">    <span class="keyword">id</span> sel = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">    <span class="keyword">return</span> sel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果这个方法中返回的不是 nil 或者 self，运行时系统将把消息发送给返回的那个对象。如果我们返回另一个实现 <code>xx</code> 方法的对象：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//XXViewOne.m</span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</div><div class="line">    XXViewTwo *twoObjc = [XXViewTwo new];</div><div class="line">    <span class="keyword">if</span> ([twoObjc respondsToSelector:aSelector]) &#123;</div><div class="line">        <span class="keyword">return</span> twoObjc;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//XXViewTwo.m</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">XXViewTwo</span></span></div><div class="line">- (<span class="keyword">void</span>)xx &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ _ xx"</span>,<span class="keyword">self</span>.class);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>可以看到消息成功的转发到 <code>XXViewTwo</code> 对象中：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-04</span><span class="number">-11</span> <span class="number">20</span>:<span class="number">12</span>:<span class="number">31.526</span> MultipleDelegateDemo[<span class="number">8774</span>:<span class="number">13826022</span>] XXViewTwo _ xx</div></pre></td></tr></table></figure>
<p>如果返回 nil 或者 self，运行时系统会接着调用：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</div><div class="line">    <span class="built_in">NSMethodSignature</span> *signature = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</div><div class="line">    <span class="keyword">return</span> signature;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的方法返回方法签名，方法签名记录了方法的参数和返回值的信息。这是最后一个寻找 IMP 的机会，如果返回 nil 就会抛出 <code>unrecognized selector sent to instance</code> 结束了；否则会接着调用下面的方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;&#125;</div></pre></td></tr></table></figure>
<p>相比于 <code>forwardingTargetForSelector:</code> 方法的只能以 selector 的形式转向一个对象，在这个函数里可以将 NSInvocation 多次转发到多个对象中，这就使得我们可以利用这个来实现 delegate 的一对多。</p>
<p>整个流程图如下：</p>
<p><img src="/images/multiple.png" alt=""></p>
<h2 id="实现多重代理"><a href="#实现多重代理" class="headerlink" title="实现多重代理"></a>实现多重代理</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MultipleDelegateHelper.h</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MultipleDelegateHelper</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSArray</span> *delegateTargets;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MultipleDelegateHelper.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"MultipleDelegateHelper.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MultipleDelegateHelper</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nonnull</span>) <span class="built_in">NSPointerArray</span> *weakTargets;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MultipleDelegateHelper</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">NSPointerArray</span> *)weakTargets &#123;</div><div class="line">    <span class="keyword">if</span> (!_weakTargets) &#123;</div><div class="line">        _weakTargets = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _weakTargets;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setDelegateTargets:(<span class="built_in">NSArray</span> *)delegateTargets&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> delegate <span class="keyword">in</span> delegateTargets) &#123;</div><div class="line">        [<span class="keyword">self</span>.weakTargets addPointer:(__bridge <span class="keyword">void</span> * _Nullable)(delegate)];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)respondsToSelector:(SEL)aSelector&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">super</span> respondsToSelector:aSelector]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> target <span class="keyword">in</span> <span class="keyword">self</span>.weakTargets) &#123;</div><div class="line">        <span class="keyword">if</span> ([target respondsToSelector:aSelector]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector&#123;</div><div class="line">    <span class="built_in">NSMethodSignature</span> *sig = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</div><div class="line">    <span class="keyword">if</span> (!sig) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> target <span class="keyword">in</span> <span class="keyword">self</span>.weakTargets) &#123;</div><div class="line">            <span class="keyword">if</span> ((sig = [target methodSignatureForSelector:aSelector])) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sig;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> target <span class="keyword">in</span> <span class="keyword">self</span>.weakTargets) &#123;</div><div class="line">        <span class="keyword">if</span> ([target respondsToSelector:anInvocation.selector]) &#123;</div><div class="line">            [anInvocation invokeWithTarget:target];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>因为 NSArray 会对对象进行 retain 操作，导致循环引用的产生，所以我们可以用 NSPointerArray 来解决这个问题，但是对象也需要强引用 <code>MultipleDelegateHelper</code> 对象。</p>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p><a href="https://github.com/ifelseboyxx/xx_Notes" target="_blank" rel="external">MultipleDelegateDemo</a></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://www.cnblogs.com/biosli/p/NSObject_inherit_2.html" target="_blank" rel="external">继承自NSObject的不常用又很有用的函数（2）
</a></p>
<p><a href="http://zziking.github.io/2015/11/01/%E5%88%A9%E7%94%A8OC%E7%9A%84%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95%E5%86%B3%E8%AE%AE%E4%B8%8E%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E5%A4%9A%E9%87%8D%E4%BB%A3%E7%90%86.html" target="_blank" rel="external">利用OC的动态方法决议与消息转发机制实现多重代理</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Objective-C 中，经常使用 delegate 来实现对象之间通信，但是 delegate 一般是对象间一对一的通信，对于一对多的场景我们常用的是 KVO 以及通知中心。那么有些特殊的场景下，比如多个对象监听 UITableView 的滚动，这时候我们就需要思考如何实现 delegate 的一对多：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 优化界面流畅性的那些事儿</title>
    <link href="http://yoursite.com/2017/03/19/AsynDrawText/"/>
    <id>http://yoursite.com/2017/03/19/AsynDrawText/</id>
    <published>2017-03-19T07:33:01.000Z</published>
    <updated>2017-07-03T03:04:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间忙于业务开发，最近终于有时间优化优化卡顿的界面，话不多说先来看看界面的样子：</p>
<p><img src="/images/UI.png" alt=""></p>
<p>界面不算复杂，控件元素却很多，第一眼看上去，有点经验的会立马在脑海中分析起来：整个 cell 可以分为上、中、下三部分，上面主要就是一些 <code>UILabel</code>，中间和下面部分就是一些 <code>UIButton</code>，最简单方便的就是用 <code>UICollectionView</code> 来实现，最后 cell 拖个 <code>xib</code>，再用 <code>Autolayout</code> 设置下约束基本上也就差不多了。事实上，第一版本这个界面我的确就是这么实现的，好处就是实现起来很快，但是缺点就是导致界面滚动起来有点卡顿，虽然 PM 表示还可以接受，但是对于经常玩新浪微博的我，每当我看到微博那杀手级别的流畅性能时，内心总是有点惭愧，加上这个版本不算太忙，于是针对这个界面做了优化，顺便总结了下优化的过程，也算对自己学习过程的一个记录。</p>
<a id="more"></a>
<h4 id="高度预计算"><a href="#高度预计算" class="headerlink" title="高度预计算"></a>高度预计算</h4><p>优化的第一件事情就是<strong>舍弃了 <code>Autolayout</code> 技术</strong>，所有控件的 <code>frame</code> 全部在数据请求回来时，异步手动计算并缓存到内存中去以备使用。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">OrderServiceTopViewFrameModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/** 图标 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> iconFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 标题 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> titleFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 价格 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> priceFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 订单状态 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> stateFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 箭头 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> arrowFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 第一个副标 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> subFirstTitleFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 第二个副标 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> subSecondTitleFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 自己的 frame*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>) <span class="built_in">CGRect</span> topViewFrame;</div><div class="line"></div><div class="line"><span class="comment">/** 数据 model*/</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">strong</span>) MyOrderListCellItem&lt;MyOrderListCellItem&gt; *cellItem;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//icon</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kIocn_height = <span class="number">25.0</span>f; <span class="comment">//宽</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kIocn_width = kIocn_height; <span class="comment">//高</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kIcon_x = <span class="number">15.0</span>f; <span class="comment">// x</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kIcon_y = <span class="number">10.0</span>f; <span class="comment">// y</span></div><div class="line"></div><div class="line"><span class="comment">//price</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kPriceRight = <span class="number">15.0</span>f; <span class="comment">//价格 居右间距</span></div><div class="line"></div><div class="line"><span class="comment">//state</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kStateRight = kPriceRight; <span class="comment">//订单状态 居右间距</span></div><div class="line"></div><div class="line"><span class="comment">//title</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTitleLeft = <span class="number">15.0</span>f; <span class="comment">//标题 左间距</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTitleRight = <span class="number">10.0</span>f;<span class="comment">//标题 右间距</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTitle_y = <span class="number">13.0</span>f; <span class="comment">//标题 上间距</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTitleMaxHeight = <span class="number">34.0</span>f; <span class="comment">//标题最大高度</span></div><div class="line"></div><div class="line"><span class="comment">//标签</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTagHeight = <span class="number">15.0</span>f; <span class="comment">//标签高度</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTagSpace = <span class="number">5.0</span>f; <span class="comment">// 两个标签间距</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTagTop = <span class="number">4.0</span>f; <span class="comment">//标签居上</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kTagBottom = <span class="number">9.0</span>f; <span class="comment">//标签居下</span></div><div class="line"></div><div class="line"><span class="comment">//副标题</span></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> <span class="keyword">const</span> kSubTitleSpace = <span class="number">2.0</span>f; <span class="comment">//两个副标题之间的间距</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">OrderServiceTopViewFrameModel</span></span></div><div class="line"></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setCellItem:(MyOrderListCellItem&lt;MyOrderListCellItem&gt; *)cellItem</div><div class="line">&#123;</div><div class="line">    _cellItem = cellItem;</div><div class="line">    </div><div class="line">    <span class="comment">//icon frame</span></div><div class="line">    <span class="keyword">self</span>.iconFrame = <span class="built_in">CGRectMake</span>(kIcon_x, kIcon_y, kIocn_width, kIocn_height);</div><div class="line">    </div><div class="line">    <span class="comment">//价格 size</span></div><div class="line">    <span class="built_in">NSString</span> *priceStr = <span class="string">@""</span>;</div><div class="line">    <span class="keyword">if</span> (cellItem.orderListAll.amount.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        priceStr =  [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"¥%@"</span>,cellItem.orderListAll.amount];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        priceStr = <span class="string">@""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">CGSize</span> priceSize = [priceStr sizeWithAttributes:@&#123;<span class="built_in">NSFontAttributeName</span>:font_List&#125;];</div><div class="line">    </div><div class="line">    <span class="comment">//订单状态 size</span></div><div class="line">    <span class="built_in">NSString</span> *strStatus = cellItem.orderListAll.orderStatus;</div><div class="line">    <span class="built_in">CGSize</span> stateSize = [strStatus sizeWithAttributes:@&#123;<span class="built_in">NSFontAttributeName</span> : font_Hint&#125;];</div><div class="line">    </div><div class="line">    <span class="comment">//标题 frame</span></div><div class="line">    <span class="built_in">CGFloat</span> tempWidth = (priceSize.width &gt; stateSize.width) ? priceSize.width : stateSize.width;</div><div class="line">    <span class="built_in">CGFloat</span> titleX = <span class="built_in">CGRectGetMaxX</span>(<span class="keyword">self</span>.iconFrame) + kTitleLeft;</div><div class="line">    <span class="built_in">CGFloat</span> titleY = kTitle_y;</div><div class="line">    <span class="built_in">CGFloat</span> titleW = kCardWidth - titleX - kTitleRight - tempWidth - kPriceRight;</div><div class="line">    <span class="built_in">CGRect</span> rect = [cellItem.orderListAll.title boundingRectWithSize:<span class="built_in">CGSizeMake</span>(titleW, kTitleMaxHeight) options:<span class="built_in">NSStringDrawingUsesLineFragmentOrigin</span>|<span class="built_in">NSStringDrawingUsesFontLeading</span> attributes:@&#123;<span class="built_in">NSFontAttributeName</span>:font_Info_Bold&#125; context:<span class="literal">nil</span>];</div><div class="line">    <span class="built_in">CGFloat</span> titleH = rect.size.height;</div><div class="line">    <span class="keyword">self</span>.titleFrame = <span class="built_in">CGRectMake</span>(titleX, titleY, titleW, titleH);</div><div class="line">    </div><div class="line">    <span class="comment">//价格 frame</span></div><div class="line">    <span class="built_in">CGFloat</span> priceX = kCardWidth - priceSize.width-(kPriceRight);</div><div class="line">    <span class="built_in">CGFloat</span> priceW = priceSize.width;</div><div class="line">    <span class="built_in">CGFloat</span> priceH = priceSize.height;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">//订单状态 frame</span></div><div class="line">    <span class="built_in">CGFloat</span> stateX = kCardWidth - stateSize.width - kStateRight;</div><div class="line">    <span class="built_in">CGFloat</span> stateW = stateSize.width;</div><div class="line">    <span class="built_in">CGFloat</span> stateH = stateSize.height;</div><div class="line">    <span class="comment">//状态 frame</span></div><div class="line">    <span class="keyword">self</span>.stateFrame = <span class="built_in">CGRectMake</span>(stateX, kTitle_y, stateW, stateH);</div><div class="line">    </div><div class="line">  </div><div class="line">    </div><div class="line">    <span class="built_in">CGFloat</span> tageTwoX = <span class="built_in">CGRectGetMaxX</span>(<span class="keyword">self</span>.tagOneFrame) + kTagSpace;</div><div class="line">    <span class="built_in">CGFloat</span> tageTwoY = <span class="built_in">CGRectGetMaxY</span>(<span class="keyword">self</span>.titleFrame) + tagTopTwo;</div><div class="line">    <span class="built_in">CGFloat</span> tageTwoW = tageTwoSize.width + <span class="number">8.0</span>f;<span class="comment">//这边 ＋ 8 算上边距</span></div><div class="line">    <span class="built_in">CGFloat</span> tageTwoH = kTagHeight;</div><div class="line">    <span class="keyword">self</span>.tagTwoFrame = <span class="built_in">CGRectMake</span>(tageTwoX, tageTwoY, tageTwoW, tageTwoH);</div><div class="line">    </div><div class="line">    </div><div class="line">    					···········</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment">/** 自己的 frame*/</span></div><div class="line">    <span class="keyword">self</span>.topViewFrame = <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, kCardWidth, <span class="built_in">CGRectGetMaxY</span>(<span class="keyword">self</span>.subSecondTitleFrame));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>上面的代码可以看到，计算控件宽高主要是用到了 <code>TextKit</code> 里面的两个方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">CGSize</span>)sizeWithAttributes:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)attrs <span class="built_in">NS_AVAILABLE</span>(<span class="number">10</span>_0, <span class="number">7</span>_0);</div><div class="line"></div><div class="line">- (<span class="built_in">CGRect</span>)boundingRectWithSize:(<span class="built_in">CGSize</span>)size options:(<span class="built_in">NSStringDrawingOptions</span>)options attributes:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)attributes context:(<span class="keyword">nullable</span> <span class="built_in">NSStringDrawingContext</span> *)context <span class="built_in">NS_AVAILABLE</span>(<span class="number">10</span>_11, <span class="number">7</span>_0);</div></pre></td></tr></table></figure>
<p>用的时候直接取出 <code>frame</code> ：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setTopframeModel:(OrderServiceTopViewFrameModel *)topframeModel</div><div class="line">&#123;</div><div class="line">    _topframeModel = topframeModel;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!topframeModel) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//icon</span></div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:topframeModel.cellItem.orderListAll.iconUrl];</div><div class="line">    [<span class="keyword">self</span>.icon sd_setImageWithURL:url placeholderImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"icon_default_order"</span>]];</div><div class="line">    <span class="keyword">self</span>.icon.frame = topframeModel.iconFrame;</div><div class="line">    </div><div class="line">    <span class="comment">//title</span></div><div class="line">    <span class="keyword">if</span> (topframeModel.cellItem.orderListAll.title.length) &#123;</div><div class="line">        <span class="keyword">self</span>.lblTitle.text = topframeModel.cellItem.orderListAll.title;</div><div class="line">        <span class="keyword">self</span>.lblTitle.frame = topframeModel.titleFrame;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">self</span>.lblTitle.text = <span class="string">@""</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//price</span></div><div class="line">    <span class="keyword">if</span> (topframeModel.cellItem.orderListAll.amount.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.lblPrice.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"¥%@"</span>,topframeModel.cellItem.orderListAll.amount];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">self</span>.lblPrice.text = <span class="string">@""</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.lblPrice.frame = topframeModel.priceFrame;</div><div class="line">    </div><div class="line">    <span class="comment">//state</span></div><div class="line">    <span class="keyword">if</span> (topframeModel.cellItem.orderListAll.orderStatus.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.lblState.text = topframeModel.cellItem.orderListAll.orderStatus;</div><div class="line">        <span class="keyword">self</span>.lblState.frame = topframeModel.stateFrame;</div><div class="line">        <span class="keyword">self</span>.lblState.textColor = [<span class="keyword">self</span> strTopRightStatusWithModel:topframeModel];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">self</span>.lblState.text = <span class="string">@""</span>;</div><div class="line">    &#125;    </div><div class="line">    				........</div></pre></td></tr></table></figure>
<h4 id="轻量化-cell"><a href="#轻量化-cell" class="headerlink" title="轻量化 cell"></a>轻量化 cell</h4><p>cell 中尽量不要再嵌套 UITableView 和 UICollectionView，不断的 <code>reloadData</code> 对性能影响是很大的。采用更加轻量的 <code>UIView + UIButton</code> 或者 <code>UIView + UILabel</code> 形式来自定义控件，牺牲些开发速度，提高性能。</p>
<h4 id="采用高效的圆角方式"><a href="#采用高效的圆角方式" class="headerlink" title="采用高效的圆角方式"></a>采用高效的圆角方式</h4><p><a href="http://www.jianshu.com/u/3e55748920d2" target="_blank" rel="external">bestswifter</a> 的 <a href="http://www.jianshu.com/p/f970872fdc22" target="_blank" rel="external">iOS 高效添加圆角效果实战讲解</a> 这篇文章中提到：</p>
<blockquote>
<p>设置圆角很简单，它不会带来任何性能损耗</p>
</blockquote>
<p>下面这句代码并不会影响性能：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">view.layer.cornerRadius = <span class="number">5</span></div></pre></td></tr></table></figure>
<p>真正影响性能的是下面这句：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">label.layer.masksToBounds = <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>结合我的界面来看：中间部分因为 view 的底色也是白色，并且不需要 <code>Highlighted</code> 效果， 所以直接设置 <code>cornerRadius</code> 就能满足要求；而对于下面的部分，因为按钮是有 <code>Normal</code> 和 <code>Highlighted</code> 状态背景色的，如果不设置 <code>masksToBounds</code>，高亮时会有矩形的四个角漏出来，所以我这边直接是让 UI 切了图片的方式来实现，简单粗暴。</p>
<h4 id="文本异步渲染"><a href="#文本异步渲染" class="headerlink" title="文本异步渲染"></a>文本异步渲染</h4><p>其实做完上面这三点，列表流畅度其实已经算可以接受了，但是和新浪微博这种还是有很大的差距的，我也一直在思考怎么能更上一层楼，直到我看到了<a href="https://github.com/ibireme" target="_blank" rel="external">ibireme</a> 的 <a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">《iOS 保持界面流畅的技巧》</a>，这篇文章我很早之前就看过，只是当时并没有很好地消化。事实也证明好的文章读一遍是完全不够的，然后我又从头到尾仔细的读了读，最后锁定在<strong>异步渲染</strong>上。</p>
<p>在异步渲染之前，有必要先了解下绘制过程，<a href="http://vizlabxt.github.io/blog/2012/10/22/UIView-Rendering/" target="_blank" rel="external">理解UIView的绘制</a> 这篇文章中提到，<code>UIView</code> 从绘制到渲染的过程有如下几步：</p>
<blockquote>
<p>每一个 UIView 都有一个 layer，每一个 layer 都有个 content，这个 content 指向的是一块缓存，叫做 backing store。</p>
<p>UIView 的绘制和渲染是两个过程，当 UIView 被绘制时，CPU 执行drawRect，通过 context 将数据写入 backing store。</p>
<p>当 backing store 写完后，通过 render server 交给 GPU 去渲染，将backing store 中的 bitmap 数据显示在屏幕上。</p>
</blockquote>
<p>异步渲染，其实就是把<strong>绘制</strong>这个过程放到另外一个线程中去做，从而提高性能，而系统提供的文本控件 <code>UILabel</code> 绘制和渲染都是在主线程完成的，我们想要实现异步绘制，只能自定义文本控件！</p>
<p>然后我们来结合 <a href="https://github.com/ibireme/YYText" target="_blank" rel="external">YYText</a> 中的 <code>YYTextAsyncLayer</code> 类来看看是怎么实现异步绘制的。</p>
<p>首先 <code>YYTextAsyncLayer.h</code> 中：</p>
<ul>
<li><code>YYTextAsyncLayer</code> 是个 <code>CALayer</code> 的子类，他只有一个 <code>displaysAsynchronously</code> 属性来控制是否异步绘制。</li>
<li><code>YYTextAsyncLayerDelegate</code> 代理，它只返回一个 <code>YYTextAsyncLayerDisplayTask</code> 对象。</li>
<li><code>YYTextAsyncLayerDisplayTask</code> 有三个 <code>block</code>，<code>willDisplay</code> 和 <code>didDisplay</code> 分别用来处理绘制前以及绘制后的事情，并且都在主线程中；<code>display</code> 是真正绘制的方法，会根据 <code>displaysAsynchronously</code>来决定是在主线程中还是异步线程中绘制。</li>
</ul>
<p>接着 <code>YYTextAsyncLayer.m</code> 中：</p>
<p>首先是初始化：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">static</span> <span class="built_in">CGFloat</span> scale; <span class="comment">//global</span></div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        scale = [<span class="built_in">UIScreen</span> mainScreen].scale;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">self</span>.contentsScale = scale;</div><div class="line">    _sentinel = [_YYTextSentinel new];</div><div class="line">    _displaysAsynchronously = <span class="literal">YES</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>_YYTextSentinel</code> 类只包含一个 <code>int32_t</code> 类型的属性和<code>increase</code> 方法，它的实现是一个线程安全的自增器 <code>OSAtomicIncrement32</code> ，这个类的作用只有一个，那就是用来判断当前的绘制是否<strong>取消</strong>，具体下面再详细讲解。下面三个方法的重写都是用来标识绘制取消的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对象释放了（绘制肯定取消）</span></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    [_sentinel increase];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//重新绘制（都重新绘制了，上一次绘制肯定取消）</span></div><div class="line">- (<span class="keyword">void</span>)setNeedsDisplay &#123;</div><div class="line">    [<span class="keyword">self</span> _cancelAsyncDisplay];</div><div class="line">    [<span class="keyword">super</span> setNeedsDisplay];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)_cancelAsyncDisplay &#123;</div><div class="line">    [_sentinel increase];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们可以看到重写了 <code>display</code> 方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)display &#123;</div><div class="line">    <span class="keyword">super</span>.contents = <span class="keyword">super</span>.contents;</div><div class="line">    [<span class="keyword">self</span> _displayAsync:_displaysAsynchronously];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>绘制之前会给 <code>layer</code> 的 <code>content</code> 重新赋值，至于为什么会是 <code>super</code> 可以看看这道很有意思的<a href="https://github.com/BaiduHiDeviOS/iOS-puzzles/issues/1" target="_blank" rel="external">笔试题目</a>。</p>
<p>接着就是调用 <code>_displayAsync:</code>方法来绘制了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">strong</span> <span class="keyword">id</span>&lt;YYTextAsyncLayerDelegate&gt; delegate = (<span class="keyword">id</span>)<span class="keyword">self</span>.delegate;</div><div class="line">YYTextAsyncLayerDisplayTask *task = [delegate newAsyncDisplayTask];</div></pre></td></tr></table></figure>
<p>这里的 <code>self.delegate</code> 其实就是 <code>YYLabel</code>，<code>UIView</code> 其实就是 <code>CALayer</code> 的代理，我们找到 <code>YYLabel.m</code> 可以发现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (Class)layerClass &#123;</div><div class="line">    <span class="keyword">return</span> [YYTextAsyncLayer <span class="keyword">class</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里重写了 <code>layerClass</code> 方法，这也是第二句代码能奏效的原因之一。<code>newAsyncDisplayTask</code> 返回一个 <code>YYTextAsyncLayerDisplayTask</code> 对象， <code>willDisplay</code>、<code>display</code> 和 <code>didDisplay</code> 三个 <code>block</code> 的具体实现也都是抛到 <code>UIView</code> 里来做，这么设计原因估计也是为了解耦。</p>
<p>我们接着看：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!task.display) &#123;</div><div class="line">        <span class="keyword">if</span> (task.willDisplay) task.willDisplay(<span class="keyword">self</span>);</div><div class="line">        <span class="keyword">self</span>.contents = <span class="literal">nil</span>;</div><div class="line">        <span class="keyword">if</span> (task.didDisplay) task.didDisplay(<span class="keyword">self</span>, <span class="literal">YES</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这边要是没实现 <code>display</code> 会清空 <code>contents</code> 并返回。</p>
<p>接下来就会根据 <code>async</code> 开关来决定是直接绘制还是异步绘制，我们直接开看执行 <code>true</code> 的部分：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (task.willDisplay) task.willDisplay(<span class="keyword">self</span>);</div><div class="line">_YYTextSentinel *sentinel = _sentinel;</div><div class="line">int32_t value = sentinel.value;</div><div class="line"><span class="built_in">BOOL</span> (^isCancelled)() = ^<span class="built_in">BOOL</span>() &#123;</div><div class="line">     <span class="keyword">return</span> value != sentinel.value;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>第一句是执行绘制前的操作，下面几句通过 <code>isCancelled</code> 这个 <code>block</code> 来判断是否<strong>取消绘制</strong>。这边有个小 <code>Tips</code>：<code>block</code> 引入变量的时候会将外界变量 <code>copy</code> 于栈中，这样即使外界变量发生改变，<code>block</code> 中的变量也不会发生改变，也就是 <code>value</code> 是取得 <code>sentinel.value</code> 变化之前的值，<code>sentinel.value</code> 值会在调用 <code>setNeedsDisplay</code>以及 <code>dealloc</code> 发生变化，这样一对比就能知道本次绘制是否取消了。</p>
<p>我们接着看：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CGSize</span> size = <span class="keyword">self</span>.bounds.size;</div><div class="line"><span class="built_in">BOOL</span> opaque = <span class="keyword">self</span>.opaque;</div><div class="line"><span class="built_in">CGFloat</span> scale = <span class="keyword">self</span>.contentsScale;</div><div class="line"><span class="built_in">CGColorRef</span> backgroundColor = (opaque &amp;&amp; <span class="keyword">self</span>.backgroundColor) ? <span class="built_in">CGColorRetain</span>(<span class="keyword">self</span>.backgroundColor) : <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">if</span> (size.width &lt; <span class="number">1</span> || size.height &lt; <span class="number">1</span>) &#123;</div><div class="line">   <span class="built_in">CGImageRef</span> image = (__bridge_retained <span class="built_in">CGImageRef</span>)(<span class="keyword">self</span>.contents);</div><div class="line">   <span class="keyword">self</span>.contents = <span class="literal">nil</span>;</div><div class="line">   <span class="keyword">if</span> (image) &#123;</div><div class="line">       <span class="built_in">dispatch_async</span>(YYTextAsyncLayerGetReleaseQueue(), ^&#123;</div><div class="line">           <span class="built_in">CFRelease</span>(image);</div><div class="line">       &#125;);</div><div class="line">   &#125;</div><div class="line">       <span class="keyword">if</span> (task.didDisplay) task.didDisplay(<span class="keyword">self</span>, <span class="literal">YES</span>);</div><div class="line">       <span class="built_in">CGColorRelease</span>(backgroundColor);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这段代码的目的是在绘制之前会先判断 <code>size</code> 的宽高，如果 <code>&lt; 1</code> 就没必要绘制了，做一些清理操作并返回。</p>
<p>我们再来看看 <code>YYTextAsyncLayerGetDisplayQueue</code> 这个 <code>dispatch_queue_t</code> ：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_queue_t</span> YYTextAsyncLayerGetDisplayQueue() &#123;</div><div class="line"><span class="meta">#define MAX_QUEUE_COUNT 16</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> queueCount;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_queue_t</span> queues[MAX_QUEUE_COUNT];</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="keyword">static</span> int32_t counter = <span class="number">0</span>;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        queueCount = (<span class="keyword">int</span>)[<span class="built_in">NSProcessInfo</span> processInfo].activeProcessorCount;</div><div class="line">        queueCount = queueCount &lt; <span class="number">1</span> ? <span class="number">1</span> : queueCount &gt; MAX_QUEUE_COUNT ? MAX_QUEUE_COUNT : queueCount;</div><div class="line">        <span class="keyword">if</span> ([<span class="built_in">UIDevice</span> currentDevice].systemVersion.floatValue &gt;= <span class="number">8.0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; queueCount; i++) &#123;</div><div class="line">                dispatch_queue_attr_t attr = dispatch_queue_attr_make_with_qos_class(DISPATCH_QUEUE_SERIAL, QOS_CLASS_USER_INITIATED, <span class="number">0</span>);</div><div class="line">                queues[i] = dispatch_queue_create(<span class="string">"com.ibireme.text.render"</span>, attr);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; queueCount; i++) &#123;</div><div class="line">                queues[i] = dispatch_queue_create(<span class="string">"com.ibireme.text.render"</span>, DISPATCH_QUEUE_SERIAL);</div><div class="line">                dispatch_set_target_queue(queues[i], dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    uint32_t cur = (uint32_t)OSAtomicIncrement32(&amp;counter);</div><div class="line">    <span class="keyword">return</span> queues[(cur) % queueCount];</div><div class="line"><span class="meta">#undef MAX_QUEUE_COUNT</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个队列是自己创建的，在预设了一个队列最大值之后，通过获取运行该进程的系统处于激活状态的处理器数量来创建队列，使得绘制的效率达到最高。</p>
<p>接下来会先判断是否 <code>isCancelled()</code>，<code>true</code> 就直接返回：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">    <span class="built_in">CGColorRelease</span>(backgroundColor);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着创建图形上下文并取出来：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(size, opaque, scale);</div><div class="line"><span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div></pre></td></tr></table></figure>
<p>接着是填充背景色：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (opaque) &#123;</div><div class="line">    <span class="built_in">CGContextSaveGState</span>(context); &#123;</div><div class="line">    <span class="keyword">if</span> (!backgroundColor || <span class="built_in">CGColorGetAlpha</span>(backgroundColor) &lt; <span class="number">1</span>) &#123;</div><div class="line">       <span class="built_in">CGContextSetFillColorWithColor</span>(context, [<span class="built_in">UIColor</span> whiteColor].CGColor);</div><div class="line">       <span class="built_in">CGContextAddRect</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, size.width * scale, size.height * scale));</div><div class="line">       <span class="built_in">CGContextFillPath</span>(context);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">if</span> (backgroundColor) &#123;</div><div class="line">         <span class="built_in">CGContextSetFillColorWithColor</span>(context, backgroundColor);</div><div class="line">         <span class="built_in">CGContextAddRect</span>(context, <span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, size.width * scale, size.height * scale));</div><div class="line">         <span class="built_in">CGContextFillPath</span>(context);</div><div class="line">     &#125;</div><div class="line">    &#125; <span class="built_in">CGContextRestoreGState</span>(context);</div><div class="line">  <span class="built_in">CGColorRelease</span>(backgroundColor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码一般走不进来，因为正常 <code>opaque</code> 都是 <code>NO</code>。<code>CGContextSaveGState</code> 和 <code>CGContextRestoreGState</code> 一般成对出现，包在它们中间的代码在执行完 <code>CGContextRestoreGState</code> 后会回退到操作之前的状态，因为 <code>context</code> 只有一份儿，防止多出操作上下文出问题。</p>
<p>接着就是执行 <code>display</code> 这个 <code>block</code>，会传 <code>context</code>、<code>size</code>以及 <code>isCancelled</code> 三个参数：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">task.display(context, size, isCancelled);</div></pre></td></tr></table></figure>
<p>最后绘制完成后会取出 <code>image</code>，并在主线程赋值给 <code>self.contents</code>，大概这样：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line"><span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line"></div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">   <span class="keyword">if</span> (isCancelled()) &#123;</div><div class="line">       <span class="keyword">if</span> (task.didDisplay) task.didDisplay(<span class="keyword">self</span>, <span class="literal">NO</span>);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       <span class="keyword">self</span>.contents = (__bridge <span class="keyword">id</span>)(image.CGImage);</div><div class="line">       <span class="keyword">if</span> (task.didDisplay) task.didDisplay(<span class="keyword">self</span>, <span class="literal">YES</span>);</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>绘制 <code>UIView</code> 的最快的办法就是把它当做一个 <code>imageView</code>，我想这也是 <code>YYText</code> 为什么要这么绘制的原因 ：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIGraphicsBeginImageContextWithOptions</span>(<span class="keyword">self</span>.bounds.size, <span class="keyword">self</span>.opaque, <span class="keyword">self</span>.contentsScale);</div><div class="line"><span class="built_in">CGContextRef</span> context = <span class="built_in">UIGraphicsGetCurrentContext</span>();</div><div class="line">	</div><div class="line">					<span class="comment">/** display */</span></div><div class="line"></div><div class="line"><span class="built_in">UIImage</span> *image = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</div><div class="line"><span class="built_in">UIGraphicsEndImageContext</span>();</div><div class="line"><span class="keyword">self</span>.contents = (__bridge <span class="keyword">id</span>)(image.CGImage);</div></pre></td></tr></table></figure>
<h4 id="YYLabel-功能提取"><a href="#YYLabel-功能提取" class="headerlink" title="YYLabel 功能提取"></a>YYLabel 功能提取</h4><p><code>YYText</code> 中的 <code>YYLabel</code> 是用 <code>CoreText</code> 排版的自定义文本控件，因为功能太丰富，导致整个库代码将近两万行，而我的需求只需要些简单的功能，所以自己抽离了些功能，整合了个阉割版的支持异步绘制的文本控件 <a href="https://github.com/ifelseboyxx/AsynDisplayLabel" target="_blank" rel="external">AsynDisplayLabel</a>，有和我需求相同的自取。</p>
<h4 id="To-do"><a href="#To-do" class="headerlink" title="To do"></a>To do</h4><p>弄完异步绘制后，发现列表流畅性又提升了不少，但是还有优化的余地：<code>YYLabel</code> 可以支持直接取用之前缓存好的 <code>CoreText</code> 排版，而我这边因为图方便，用的是 <code>TextKit</code> 的方法计算的宽高，并且阉割版的 <code>YYLabel</code> 不支持直接取用 <code>CoreText</code> 排版，导致绘制的时候还需要计算一遍 <code>CoreText</code> 排版，相信优化下这部分流畅性还能提升！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间忙于业务开发，最近终于有时间优化优化卡顿的界面，话不多说先来看看界面的样子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/UI.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;界面不算复杂，控件元素却很多，第一眼看上去，有点经验的会立马在脑海中分析起来：整个 cell 可以分为上、中、下三部分，上面主要就是一些 &lt;code&gt;UILabel&lt;/code&gt;，中间和下面部分就是一些 &lt;code&gt;UIButton&lt;/code&gt;，最简单方便的就是用 &lt;code&gt;UICollectionView&lt;/code&gt; 来实现，最后 cell 拖个 &lt;code&gt;xib&lt;/code&gt;，再用 &lt;code&gt;Autolayout&lt;/code&gt; 设置下约束基本上也就差不多了。事实上，第一版本这个界面我的确就是这么实现的，好处就是实现起来很快，但是缺点就是导致界面滚动起来有点卡顿，虽然 PM 表示还可以接受，但是对于经常玩新浪微博的我，每当我看到微博那杀手级别的流畅性能时，内心总是有点惭愧，加上这个版本不算太忙，于是针对这个界面做了优化，顺便总结了下优化的过程，也算对自己学习过程的一个记录。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Masonry 源码解析</title>
    <link href="http://yoursite.com/2017/02/23/Masonry-Analysis/"/>
    <id>http://yoursite.com/2017/02/23/Masonry-Analysis/</id>
    <published>2017-02-23T13:40:52.000Z</published>
    <updated>2017-02-28T09:08:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/SnapKit/Masonry" target="_blank" rel="external">Masonry</a> 是一个轻量级的用于自动布局（AutoLayout）的第三方框架，以其简洁的使用方式，受到广大开发者的青睐。本篇文章将带你一步步的去了解其实现原理，知其所以然！</p>
<h3 id="结构概览"><a href="#结构概览" class="headerlink" title="结构概览"></a>结构概览</h3><p><img src="/images/Masonry.png" alt=""></p>
<a id="more"></a>
<ul>
<li><p>最上面的几个 <code>category</code>，包含了我们常用的一些方法及属性，例如：</p>
  <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(<span class="built_in">NS_NOESCAPE</span> ^)(MASConstraintMaker *make))block;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>中间的是一个继承自 <code>NSObject</code> 的工厂类，主要负责创建 <code>MASConstraint</code> 对象以及把约束添加到视图上。</p>
</li>
<li><p>最下面 <code>MASConstraint</code> 是个抽象类，其中有很多的方法都必须在子类中重写。<code>MASViewConstraint</code> 和 <code>MASCompositeConstraint</code> 是它的两个子类，介绍这两个之前我们先说下 <code>MASViewAttribute</code>：</p>
<p>  我们都知道系统创建一条约束的方法：</p>
  <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">instancetype</span>)constraintWithItem:(<span class="keyword">id</span>)view1</div><div class="line">                       attribute:(<span class="built_in">NSLayoutAttribute</span>)attr1</div><div class="line">                       relatedBy:(<span class="built_in">NSLayoutRelation</span>)relation</div><div class="line">                          toItem:(<span class="keyword">nullable</span> <span class="keyword">id</span>)view2</div><div class="line">                       attribute:(<span class="built_in">NSLayoutAttribute</span>)attr2</div><div class="line">                      multiplier:(<span class="built_in">CGFloat</span>)multiplier</div><div class="line">                        constant:(<span class="built_in">CGFloat</span>)c;</div></pre></td></tr></table></figure>
<p>  <code>MASViewAttribute</code> 就是对 <code>attribute</code> 和 <code>Item</code> 这两个属性的封装；<code>MASViewConstraint</code> 就是对 <code>MASViewAttribute</code> 的封装，可以理解为<strong>一条</strong>约束对象；<code>MASCompositeConstraint</code> 则就是约束的集合，它里面有个私有的数组用来存放多个 <code>MASViewAttribute</code> 对象。</p>
</li>
</ul>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="View-MASAdditions"><a href="#View-MASAdditions" class="headerlink" title="View+MASAdditions"></a>View+MASAdditions</h4><p>我们绘制一个居于父视图（self）上、左为 <code>20.0f</code> ，右为 <code>-20.0f</code>并且高度一半的 <code>view</code> 的约束大概是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[view mas_makeConstraints:^(MASConstraintMaker *make) &#123;</div><div class="line">	make.height.equalTo(<span class="keyword">self</span>).multipliedBy(<span class="number">0.5</span>);</div><div class="line">    make.top.equalTo(<span class="keyword">self</span>).offset(<span class="number">20.0</span>f);</div><div class="line">    make.left.equalTo(@<span class="number">20.0</span>f);</div><div class="line">    make.right.offset(<span class="number">-20.0</span>f);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>我们点进 <code>View+MASAdditions.m</code> 里面可以看到内部：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)mas_makeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *))block &#123;</div><div class="line">    <span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];</div><div class="line">    block(constraintMaker);</div><div class="line">    <span class="keyword">return</span> [constraintMaker install];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先这里已经帮我们把 <code>translatesAutoresizingMaskIntoConstraints</code> 属性设置为 <code>NO</code> 了，这样我们在外面可以省去这一步。</li>
<li>然后初始化 <code>MASConstraintMaker</code> 工厂实例对象并保存了当前视图 <code>self.view</code>。</li>
<li>接着把初始化好的 <code>MASConstraintMaker</code> 对象传入 <code>block</code>，回调给外面配置约束属性。</li>
<li>最后调用 <code>install</code> 方法，把配置好的约束添加到视图上去。</li>
</ul>
<p>以上就是<strong>添加</strong>约束的大概流程，我们再看看<strong>更新</strong>和<strong>重新构建</strong>约束的方法，也就是：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSArray</span> *)mas_updateConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *))block &#123;</div><div class="line">    <span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];</div><div class="line">    constraintMaker.updateExisting = <span class="literal">YES</span>;</div><div class="line">    block(constraintMaker);</div><div class="line">    <span class="keyword">return</span> [constraintMaker install];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSArray</span> *)mas_remakeConstraints:(<span class="keyword">void</span>(^)(MASConstraintMaker *make))block &#123;</div><div class="line">    <span class="keyword">self</span>.translatesAutoresizingMaskIntoConstraints = <span class="literal">NO</span>;</div><div class="line">    MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:<span class="keyword">self</span>];</div><div class="line">    constraintMaker.removeExisting = <span class="literal">YES</span>;</div><div class="line">    block(constraintMaker);</div><div class="line">    <span class="keyword">return</span> [constraintMaker install];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以发现它们和 <code>mas_makeConstraints</code> 唯一的区别在于多传了 <code>updateExisting</code> 以及 <code>removeExisting</code> 这两个 <code>BOOL</code>属性值：</p>
<ul>
<li><code>mas_updateConstraints</code>：找到需要更新的 <code>NSLayoutConstraint</code>，替换成新约束。</li>
<li><code>mas_remakeConstraints</code>：清除所有 <code>NSLayoutConstraint</code>，再添加新约束。</li>
</ul>
<h4 id="MASConstraintMaker"><a href="#MASConstraintMaker" class="headerlink" title="MASConstraintMaker"></a>MASConstraintMaker</h4><p>知道了这三个方法的大概作用和关系，我们来详细看看 <code>MASConstraintMaker</code> 这个工厂类是如何配置约束的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height</div></pre></td></tr></table></figure>
<p>调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)height &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeHeight</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> constraint:<span class="literal">nil</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123; ··· &#125;</div><div class="line">    <span class="keyword">if</span> (!constraint) &#123;</div><div class="line">        newConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">        [<span class="keyword">self</span>.constraints addObject:newConstraint];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newConstraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 <code>constraint</code> 传的是 <code>nil</code>，所以我们先忽略中间一段代码：</p>
<ul>
<li>这里先是初始化了 <code>MASViewAttribute</code> 对象并保存了 <code>view</code>、<code>item</code>以及<code>NSLayoutAttribute</code>三个属性。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithView:(MAS_VIEW *)view layoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">self</span> initWithView:view item:view layoutAttribute:layoutAttribute];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)initWithView:(MAS_VIEW *)view item:(<span class="keyword">id</span>)item layoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    _view = view;</div><div class="line">    _item = item;</div><div class="line">    _layoutAttribute = layoutAttribute;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后又初始化了 <code>MASViewConstraint</code> 对象，内部配置了些默认参数并保存了第一个约束参数 <code>MASViewAttribute</code>。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithFirstViewAttribute:(MASViewAttribute *)firstViewAttribute &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    _firstViewAttribute = firstViewAttribute;</div><div class="line">    <span class="keyword">self</span>.layoutPriority = MASLayoutPriorityRequired;</div><div class="line">    <span class="keyword">self</span>.layoutMultiplier = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>最后设置 <code>MASViewConstraint</code> 对象代理并添加到一开始准备好的 <code>self.constraints</code> 数组中，返回。</li>
</ul>
<p>这些工作就是在输入 <code>make.height</code> 进行的全部工作，它会返回一个 <code>MASViewConstraint</code> 对象，用于之后的继续配置。</p>
<h4 id="MASViewConstraint"><a href="#MASViewConstraint" class="headerlink" title="MASViewConstraint"></a>MASViewConstraint</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(<span class="keyword">self</span>)</div></pre></td></tr></table></figure>
<p>在 <code>make.height</code> 返回 <code>MASViewConstraint</code> 对象后，会继续在这个链式的语法中调用下一个方法来指定约束的关系。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))equalTo;</div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))greaterThanOrEqualTo;</div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span> attr))lessThanOrEqualTo;</div></pre></td></tr></table></figure>
<p>文章开头说过，<code>MASConstraint</code> 是个抽象类，具体实现都在它的两个子类中，<code>equalTo(self)</code> 的调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>))equalTo &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.equalToWithRelation(attribute, <span class="built_in">NSLayoutRelationEqual</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute, <span class="built_in">NSLayoutRelation</span> relation) &#123;</div><div class="line">        <span class="keyword">if</span> ([attribute isKindOfClass:<span class="built_in">NSArray</span>.class]) &#123;</div><div class="line">            .....</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            .....</div><div class="line">            <span class="keyword">self</span>.layoutRelation = relation;</div><div class="line">            <span class="keyword">self</span>.secondViewAttribute = attribute;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里同样先省略部分代码，方便我们阅读：</p>
<ul>
<li>首先是 <code>self.layoutRelation</code> 保存了约束关系且重写了 <code>set</code> 方法，在里面用 <code>self.hasLayoutRelation</code> 这个 <code>BOOL</code> 标识已经有约束关系。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setLayoutRelation:(<span class="built_in">NSLayoutRelation</span>)layoutRelation &#123;</div><div class="line">	_layoutRelation = layoutRelation;</div><div class="line"> 	<span class="keyword">self</span>.hasLayoutRelation = <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后同样是重写了 <code>self.secondViewAttribute</code> 的 <code>set</code> 方法，这里会根据不同的情况做不同的操作。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSecondViewAttribute:(<span class="keyword">id</span>)secondViewAttribute &#123;</div><div class="line">    <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:<span class="built_in">NSValue</span>.class]) &#123;</div><div class="line">        [<span class="keyword">self</span> setLayoutConstantWithValue:secondViewAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) &#123;</div><div class="line">        _secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:<span class="keyword">self</span>.firstViewAttribute.layoutAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) &#123;</div><div class="line">        _secondViewAttribute = secondViewAttribute;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"attempting to add unsupported attribute: %@"</span>, secondViewAttribute);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>第一种情况对应的是：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(@<span class="number">20.0</span>f)</div></pre></td></tr></table></figure>
<p>调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line"><span class="keyword">if</span> ([secondViewAttribute isKindOfClass:<span class="built_in">NSValue</span>.class]) &#123;</div><div class="line">    [<span class="keyword">self</span> setLayoutConstantWithValue:secondViewAttribute];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line">- (<span class="keyword">void</span>)setLayoutConstantWithValue:(<span class="built_in">NSValue</span> *)value &#123;</div><div class="line">    <span class="keyword">if</span> ([value isKindOfClass:<span class="built_in">NSNumber</span>.class]) &#123;</div><div class="line">        <span class="keyword">self</span>.offset = [(<span class="built_in">NSNumber</span> *)value doubleValue];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(value.objCType, <span class="keyword">@encode</span>(<span class="built_in">CGPoint</span>)) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">CGPoint</span> point;</div><div class="line">        [value getValue:&amp;point];</div><div class="line">        <span class="keyword">self</span>.centerOffset = point;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(value.objCType, <span class="keyword">@encode</span>(<span class="built_in">CGSize</span>)) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">CGSize</span> size;</div><div class="line">        [value getValue:&amp;size];</div><div class="line">        <span class="keyword">self</span>.sizeOffset = size;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(value.objCType, <span class="keyword">@encode</span>(MASEdgeInsets)) == <span class="number">0</span>) &#123;</div><div class="line">        MASEdgeInsets insets;</div><div class="line">        [value getValue:&amp;insets];</div><div class="line">        <span class="keyword">self</span>.insets = insets;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"attempting to set layout constant with unsupported value: %@"</span>, value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line">- (<span class="keyword">void</span>)setOffset:(<span class="built_in">CGFloat</span>)offset &#123;</div><div class="line">    <span class="keyword">self</span>.layoutConstant = offset;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line">- (<span class="keyword">void</span>)setLayoutConstant:(<span class="built_in">CGFloat</span>)layoutConstant &#123;</div><div class="line">    _layoutConstant = layoutConstant;</div><div class="line"></div><div class="line"><span class="meta">#if TARGET_OS_MAC &amp;&amp; !(TARGET_OS_IPHONE || TARGET_OS_TV)</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.useAnimator) &#123;</div><div class="line">        [<span class="keyword">self</span>.layoutConstraint.animator setConstant:layoutConstant];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">self</span>.layoutConstraint.constant = layoutConstant;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#else</span></div><div class="line">    <span class="keyword">self</span>.layoutConstraint.constant = layoutConstant;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面到最后会有个 <code>CGFloat</code> 类型的 <code>layoutConstant</code> 属性来保存值，并且在最后调用 <code>install</code> 方法的时候作为 <code>constant</code> 参数传入。</p>
<p>这里只看了下传入的 <code>NSValue</code> 为<code>offset</code> 的情况，还有 <code>centerOffset</code>、<code>sizeOffset</code> 和 <code>insets</code>，也都大同小异，就不熬述了。</p>
<p>其实这里有一点我没明白：<br>直到最后调用 <code>install</code> 方法前，<code>self.layoutConstraint</code> 这个 <code>MASLayoutConstraint</code> 类型的属性都是 <code>nil</code>，那么：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.layoutConstraint.constant = layoutConstant;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里的赋值又有什么意义呢？</p>
</blockquote>
<p><strong>第二种情况一般是直接传入一个视图：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(<span class="keyword">self</span>)</div></pre></td></tr></table></figure>
<p>这时，就会初始化一个 <code>layoutAttribute</code> 属性与 <code>firstViewArribute</code> （第一个约束参数对象）相同的 <code>MASViewAttribute</code> 对象，也就是第二个约束参数对象，上面代码意思就是使视图与 <code>self</code> 高度相等。</p>
<p><strong>第三种情况会传入一个视图的 <code>MASViewAttribute</code>：</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">make.height.equalTo(<span class="keyword">self</span>.height)</div><div class="line"><span class="comment">//或者</span></div><div class="line">make.height.equalTo(<span class="keyword">self</span>.mas_height)</div></pre></td></tr></table></figure>
<p>这两种写法其实效果是一样的，都是创建并返回一个 <code>MASViewAttribute</code> 对象。<code>View+MASShorthandAdditions.h</code> 这个 <code>category</code> 只有个 <code>.h</code>，定义了我们常用的属性和方法，但是具体实现还是调用的 <code>View+MASAdditions</code> 里面的方法，可以理解为去掉 <code>mas_</code> 命名前缀。</p>
<p>这里还有许多属性可以设置，比如 <code>multipliedBy</code>、<code>priority</code>等等，就不一一熬述了。</p>
<h4 id="链式语法特性的重要一环"><a href="#链式语法特性的重要一环" class="headerlink" title="链式语法特性的重要一环"></a>链式语法特性的重要一环</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.width.equalTo(@<span class="number">20</span>);</div></pre></td></tr></table></figure>
<p>这种同时设置多个约束属性的方式相信大家一定不陌生，认真看的人可能已经猜到了：那就是通过 <code>delegate</code> 的方式。</p>
<p>上面已经提到过，在 <code>make.height</code> 设置第一个约束属性时，</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute</div></pre></td></tr></table></figure>
<p>方法中，会设置 <code>MASViewConstraint</code> 对象代理，其作用就是为了能够同时设置多个约束属性！我们来看看 <code>make.height.width</code> 中 <code>.width</code>的调用链：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)width &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeWidth</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASViewConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="built_in">NSAssert</span>(!<span class="keyword">self</span>.hasLayoutRelation, <span class="string">@"Attributes should be chained before defining the constraint relation"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span>.delegate constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASConstraintMaker.m</span></div><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">	MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123;</div><div class="line">        <span class="comment">//replace with composite constraint</span></div><div class="line">        <span class="built_in">NSArray</span> *children = @[constraint, newConstraint];</div><div class="line">        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">        compositeConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">        [<span class="keyword">self</span> constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];</div><div class="line">        <span class="keyword">return</span> compositeConstraint;</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上面的调用链我们可以发现，最终就是通过 <code>delegate</code> 的方式，调用 <code>MASConstraintMaker</code> 工厂类中的 <code>constraint:addConstraintWithLayoutAttribute:</code> 方法，这也是链式语法能链起来的原因。</p>
<p>我们还可以发现因为 <code>constraint</code> 不为 <code>nil</code>，所以这次初始化并返回的不是 <code>MASViewConstraint</code> 对象，而是 <code>MASCompositeConstraint</code> 这个对象了，下面我们来看看这个类。</p>
<h4 id="MASCompositeConstraint"><a href="#MASCompositeConstraint" class="headerlink" title="MASCompositeConstraint"></a>MASCompositeConstraint</h4><p>我们先来回顾下开头是怎么介绍 <code>MASCompositeConstraint</code> 这个类的：“<code>MASCompositeConstraint</code> 是约束的集合，它里面有个私有的数组用来存放多个 MASViewAttribute 对象”。</p>
<p>我们接着上面的例子看：</p>
<h5 id="make-height-width-equalTo-20"><a href="#make-height-width-equalTo-20" class="headerlink" title="make.height.width.equalTo(@20)"></a>make.height.width.equalTo(@20)</h5><p>当走到 <code>.width</code>时：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    <span class="keyword">if</span> ([constraint isKindOfClass:MASViewConstraint.class]) &#123;</div><div class="line">        <span class="comment">//replace with composite constraint</span></div><div class="line">        <span class="built_in">NSArray</span> *children = @[constraint, newConstraint];</div><div class="line">        MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">        compositeConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">        [<span class="keyword">self</span> constraint:constraint shouldBeReplacedWithConstraint:compositeConstraint];</div><div class="line">        <span class="keyword">return</span> compositeConstraint;</div><div class="line">    &#125;</div><div class="line">   ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>成功的走进 <code>if</code> 判读里面，将 <code>.height.wight</code> 两条约束 <code>MASViewConstraint</code> 对象塞到数组里，创建 <code>MASCompositeConstraint</code> 对象，并且同样设置了 <code>delegate</code>，最后还把 <code>self.constraints</code> 里面事先添加好的约束 <code>MASViewConstraint</code> 对象替换成了 <code>MASCompositeConstraint</code> 对象。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)constraint:(MASConstraint *)constraint shouldBeReplacedWithConstraint:(MASConstraint *)replacementConstraint &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> index = [<span class="keyword">self</span>.constraints indexOfObject:constraint];</div><div class="line">    <span class="built_in">NSAssert</span>(index != <span class="built_in">NSNotFound</span>, <span class="string">@"Could not find constraint %@"</span>, constraint);</div><div class="line">    [<span class="keyword">self</span>.constraints replaceObjectAtIndex:index withObject:replacementConstraint];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以点击 <code>MASCompositeConstraint</code> 初始化方法里看看，它内部会通过 <code>for</code> 循环，把数组里面的<strong>所有</strong> <code>MASViewConstraint</code> 对象同样设置了 <code>delegate</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)initWithChildren:(<span class="built_in">NSArray</span> *)children &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    _childConstraints = [children mutableCopy];</div><div class="line">    <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> _childConstraints) &#123;</div><div class="line">        constraint.delegate = <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这么做的目的同时是为了能够继续链式调用，比如我们再加个 <code>.left</code>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.height.width.left.equalTo(@<span class="number">20</span>);</div></pre></td></tr></table></figure>
<p>这时候的调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)left &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithLayoutAttribute:<span class="built_in">NSLayoutAttributeLeft</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASCompositeConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    [<span class="keyword">self</span> constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)constraint:(MASConstraint __unused *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    <span class="keyword">id</span>&lt;MASConstraintDelegate&gt; strongDelegate = <span class="keyword">self</span>.delegate;</div><div class="line">    MASConstraint *newConstraint = [strongDelegate constraint:<span class="keyword">self</span> addConstraintWithLayoutAttribute:layoutAttribute];</div><div class="line">    newConstraint.delegate = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span>.childConstraints addObject:newConstraint];</div><div class="line">    <span class="keyword">return</span> newConstraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，这里又是通过 <code>delegate</code> 方式，调用 <code>MASConstraintMaker</code> 工厂类中的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint *)constraint:(MASConstraint *)constraint addConstraintWithLayoutAttribute:(<span class="built_in">NSLayoutAttribute</span>)layoutAttribute &#123;</div><div class="line">    MASViewAttribute *viewAttribute = [[MASViewAttribute alloc] initWithView:<span class="keyword">self</span>.view layoutAttribute:layoutAttribute];</div><div class="line">    MASViewConstraint *newConstraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:viewAttribute];</div><div class="line">    </div><div class="line">    ....</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> newConstraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过这次仅仅是初始化了个 <code>MASViewConstraint</code> 对象就直接返回了，然后回到上个方法中添加到 <code>MASCompositeConstraint</code> 的私有数组 <code>self.childConstraints</code> 中返回备用。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">equalTo(@<span class="number">20</span>)</div></pre></td></tr></table></figure>
<p>因为到<code>.left</code> 时，返回的是 <code>MASCompositeConstraint</code> 对象，到这一步的时候会有点变化，调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>))equalTo &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.equalToWithRelation(attribute, <span class="built_in">NSLayoutRelationEqual</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MASCompositeConstraint.m</span></div><div class="line"></div><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attr, <span class="built_in">NSLayoutRelation</span> relation) &#123;</div><div class="line">        <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> <span class="keyword">self</span>.childConstraints.copy) &#123;</div><div class="line">            constraint.equalToWithRelation(attr, relation);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，这里会循环之前准备好的私有数组 <code>self.childConstraints</code>，调用 <code>MASViewConstraint.m</code> 的 <code>equalToWithRelation</code> 方法，和上面讲的一样了。</p>
<h5 id="make-edges-equalTo-view"><a href="#make-edges-equalTo-view" class="headerlink" title="make.edges.equalTo(view)"></a>make.edges.equalTo(view)</h5><p>我们再来看看这种写法，调用链如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//MASConstraintMaker.m</span></div><div class="line"></div><div class="line">- (MASConstraint *)edges &#123;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> addConstraintWithAttributes:MASAttributeTop | MASAttributeLeft | MASAttributeRight | MASAttributeBottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (MASConstraint *)addConstraintWithAttributes:(MASAttribute)attrs &#123;</div><div class="line">    __unused MASAttribute anyAttribute = (MASAttributeLeft | MASAttributeRight | MASAttributeTop | MASAttributeBottom | MASAttributeLeading</div><div class="line">                                          | MASAttributeTrailing | MASAttributeWidth | MASAttributeHeight | MASAttributeCenterX</div><div class="line">                                          | MASAttributeCenterY | </div><div class="line">                                          </div><div class="line">                    ......</div><div class="line">                        </div><div class="line">    <span class="built_in">NSMutableArray</span> *attributes = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (attrs &amp; MASAttributeLeft) [attributes addObject:<span class="keyword">self</span>.view.mas_left];</div><div class="line">    <span class="keyword">if</span> (attrs &amp; MASAttributeRight) [attributes addObject:<span class="keyword">self</span>.view.mas_right];</div><div class="line">    <span class="keyword">if</span> (attrs &amp; MASAttributeTop) [attributes addObject:<span class="keyword">self</span>.view.mas_top];</div><div class="line">    </div><div class="line">    				......    </div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableArray</span> *children = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:attributes.count];</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (MASViewAttribute *a <span class="keyword">in</span> attributes) &#123;</div><div class="line">        [children addObject:[[MASViewConstraint alloc] initWithFirstViewAttribute:a]];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    MASCompositeConstraint *constraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">    constraint.delegate = <span class="keyword">self</span>;</div><div class="line">    [<span class="keyword">self</span>.constraints addObject:constraint];</div><div class="line">    <span class="keyword">return</span> constraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码太多省略了一部分，可以发现这段代码作用就是返回一个包含多条约束的 <code>MASCompositeConstraint</code> 对象，接着后面的操作也都是一样的了。</p>
<p>上面这种写法还可以这样：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.edges.equalTo(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f));</div></pre></td></tr></table></figure>
<p>这里的 <code>equalTo</code> 需要注意下，它是一个<strong>宏</strong>，定义在 <code>MASConstraint.h</code> 中：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define mas_equalTo(...)                 equalTo(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"><span class="meta">#define mas_greaterThanOrEqualTo(...)    greaterThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"><span class="meta">#define mas_lessThanOrEqualTo(...)       lessThanOrEqualTo(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"></div><div class="line"><span class="meta">#define mas_offset(...)                  valueOffset(MASBoxValue((__VA_ARGS__)))</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#ifdef MAS_SHORTHAND_GLOBALS</span></div><div class="line"></div><div class="line"><span class="meta">#define equalTo(...)                     mas_equalTo(__VA_ARGS__)</span></div><div class="line"><span class="meta">#define greaterThanOrEqualTo(...)        mas_greaterThanOrEqualTo(__VA_ARGS__)</span></div><div class="line"><span class="meta">#define lessThanOrEqualTo(...)           mas_lessThanOrEqualTo(__VA_ARGS__)</span></div><div class="line"></div><div class="line"><span class="meta">#define offset(...)                      mas_offset(__VA_ARGS__)</span></div></pre></td></tr></table></figure>
<p>我们来修改下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make.edges.equalTo(MASBoxValue(<span class="built_in">UIEdgeInsetsMake</span>(<span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f, <span class="number">0.0</span>f)));</div></pre></td></tr></table></figure>
<p>可以发现，其实里面调用的是 <code>MASBoxValue</code> 这个宏，它将 <code>C</code> 和 <code>Objective-C</code> 语言中的一些基本数据结构比如说 <code>double</code> <code>CGPoint</code> <code>CGSize</code> 这些值用 <code>NSValue</code> 进行包装。</p>
<p>这里还支持直接调用 <code>size</code>、<code>center</code> 等，具体实现都差不多，就不熬述了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make.center.equalTo(<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">50</span>));</div><div class="line">make.size.equalTo(<span class="built_in">CGSizeMake</span>(<span class="number">200</span>, <span class="number">100</span>));</div></pre></td></tr></table></figure>
<h5 id="make-height-equalTo-redView-blueView"><a href="#make-height-equalTo-redView-blueView" class="headerlink" title="make.height.equalTo(@[redView, blueView])"></a>make.height.equalTo(@[redView, blueView])</h5><p>我再来看看这种传数组的，在走到 <code>.equalTo</code> 时，最终会调用 <code>MASViewConstraint.m</code> 里面的 <code>equalToWithRelation</code> 方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (MASConstraint * (^)(<span class="keyword">id</span>, <span class="built_in">NSLayoutRelation</span>))equalToWithRelation &#123;</div><div class="line">    <span class="keyword">return</span> ^<span class="keyword">id</span>(<span class="keyword">id</span> attribute, <span class="built_in">NSLayoutRelation</span> relation) &#123;</div><div class="line">        <span class="keyword">if</span> ([attribute isKindOfClass:<span class="built_in">NSArray</span>.class]) &#123;</div><div class="line">            <span class="built_in">NSAssert</span>(!<span class="keyword">self</span>.hasLayoutRelation, <span class="string">@"Redefinition of constraint relation"</span>);</div><div class="line">            <span class="built_in">NSMutableArray</span> *children = <span class="built_in">NSMutableArray</span>.new;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> attr <span class="keyword">in</span> attribute) &#123;</div><div class="line">                MASViewConstraint *viewConstraint = [<span class="keyword">self</span> <span class="keyword">copy</span>];</div><div class="line">                viewConstraint.layoutRelation = relation;</div><div class="line">                viewConstraint.secondViewAttribute = attr;</div><div class="line">                [children addObject:viewConstraint];</div><div class="line">            &#125;</div><div class="line">            MASCompositeConstraint *compositeConstraint = [[MASCompositeConstraint alloc] initWithChildren:children];</div><div class="line">            compositeConstraint.delegate = <span class="keyword">self</span>.delegate;</div><div class="line">            [<span class="keyword">self</span>.delegate constraint:<span class="keyword">self</span> shouldBeReplacedWithConstraint:compositeConstraint];</div><div class="line">            <span class="keyword">return</span> compositeConstraint;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;   ....    &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这边还是遍历数组，并且 <code>MASViewConstraint</code> 实现 <code>NSCopying</code> 协议，调用 <code>[self copy]</code> 会创建 <code>MASViewConstraint</code> 对象：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> __unused *)zone &#123;</div><div class="line">    MASViewConstraint *constraint = [[MASViewConstraint alloc] initWithFirstViewAttribute:<span class="keyword">self</span>.firstViewAttribute];</div><div class="line">    constraint.layoutConstant = <span class="keyword">self</span>.layoutConstant;</div><div class="line">    constraint.layoutRelation = <span class="keyword">self</span>.layoutRelation;</div><div class="line">    constraint.layoutPriority = <span class="keyword">self</span>.layoutPriority;</div><div class="line">    constraint.layoutMultiplier = <span class="keyword">self</span>.layoutMultiplier;</div><div class="line">    constraint.delegate = <span class="keyword">self</span>.delegate;</div><div class="line">    <span class="keyword">return</span> constraint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后会根据传的数组里面的 <code>Value</code> 类型来做不同的操作，前面讲过就不熬述了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setSecondViewAttribute:(<span class="keyword">id</span>)secondViewAttribute &#123;</div><div class="line">    <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:<span class="built_in">NSValue</span>.class]) &#123;</div><div class="line">        [<span class="keyword">self</span> setLayoutConstantWithValue:secondViewAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MAS_VIEW.class]) &#123;</div><div class="line">        _secondViewAttribute = [[MASViewAttribute alloc] initWithView:secondViewAttribute layoutAttribute:<span class="keyword">self</span>.firstViewAttribute.layoutAttribute];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([secondViewAttribute isKindOfClass:MASViewAttribute.class]) &#123;</div><div class="line">        _secondViewAttribute = secondViewAttribute;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSAssert</span>(<span class="literal">NO</span>, <span class="string">@"attempting to add unsupported attribute: %@"</span>, secondViewAttribute);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后便是生成 <code>MASCompositeConstraint</code> 对象，并通过 <code>delegate</code> 方式，调用 <code>MASConstraintMaker</code> 的方法，替换 <code>self.constraints</code> 数组里的约束：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)constraint:(MASConstraint *)constraint shouldBeReplacedWithConstraint:(MASConstraint *)replacementConstraint &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> index = [<span class="keyword">self</span>.constraints indexOfObject:constraint];</div><div class="line">    <span class="built_in">NSAssert</span>(index != <span class="built_in">NSNotFound</span>, <span class="string">@"Could not find constraint %@"</span>, constraint);</div><div class="line">    [<span class="keyword">self</span>.constraints replaceObjectAtIndex:index withObject:replacementConstraint];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="添加约束到视图"><a href="#添加约束到视图" class="headerlink" title="添加约束到视图"></a>添加约束到视图</h4><p> <code>mas_makeConstraints</code> 方法的最后会调用 <code>[constraintMaker install]</code> 方法来添加所有存储在 <code>self.constraints</code> 数组中的所有约束。</p>
 <figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// MASConstraintMaker.m</span></div><div class="line"> </div><div class="line"> - (<span class="built_in">NSArray</span> *)install &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.removeExisting) &#123;</div><div class="line">        <span class="built_in">NSArray</span> *installedConstraints = [MASViewConstraint installedConstraintsForView:<span class="keyword">self</span>.view];</div><div class="line">        <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> installedConstraints) &#123;</div><div class="line">            [constraint uninstall];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSArray</span> *constraints = <span class="keyword">self</span>.constraints.copy;</div><div class="line">    <span class="keyword">for</span> (MASConstraint *constraint <span class="keyword">in</span> constraints) &#123;</div><div class="line">        constraint.updateExisting = <span class="keyword">self</span>.updateExisting;</div><div class="line">        [constraint install];</div><div class="line">    &#125;</div><div class="line">    [<span class="keyword">self</span>.constraints removeAllObjects];</div><div class="line">    <span class="keyword">return</span> constraints;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如果需要<strong>重新构建</strong>约束，也就是 调用 <code>mas_remakeConstraints:</code> 方法，会先取出视图的所有约束，然后通过一个 <code>for</code> 循环，调用 <code>uninstall</code> 来清空所有约束：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)uninstall &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> supportsActiveProperty]) &#123;</div><div class="line">        <span class="keyword">self</span>.layoutConstraint.active = <span class="literal">NO</span>;</div><div class="line">        [<span class="keyword">self</span>.firstViewAttribute.view.mas_installedConstraints removeObject:<span class="keyword">self</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.installedView removeConstraint:<span class="keyword">self</span>.layoutConstraint];</div><div class="line">    <span class="keyword">self</span>.layoutConstraint = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">self</span>.installedView = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.firstViewAttribute.view.mas_installedConstraints removeObject:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果不需要<strong>重新构建</strong>约束，会取出 <code>self.constraints</code> 数组中准备好的约束，通过 <code>for</code> 循环，调用 <code>install</code> 来把约束添加到视图上：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.hasBeenInstalled) &#123;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果约束以及存在并是 <code>active</code> 会直接返回。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ([<span class="keyword">self</span> supportsActiveProperty] &amp;&amp; <span class="keyword">self</span>.layoutConstraint) &#123;</div><div class="line">     <span class="keyword">self</span>.layoutConstraint.active = <span class="literal">YES</span>;</div><div class="line">     [<span class="keyword">self</span>.firstViewAttribute.view.mas_installedConstraints addObject:<span class="keyword">self</span>];</div><div class="line">     <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果 <code>self.layoutConstraint</code> 响应了 <code>isActive</code> 方法并且不为空，会激活这条约束并添加到 <code>mas_installedConstraints</code> 数组中，最后返回。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MAS_VIEW *firstLayoutItem = <span class="keyword">self</span>.firstViewAttribute.item;</div><div class="line"><span class="built_in">NSLayoutAttribute</span> firstLayoutAttribute = <span class="keyword">self</span>.firstViewAttribute.layoutAttribute;</div><div class="line">MAS_VIEW *secondLayoutItem = <span class="keyword">self</span>.secondViewAttribute.item;</div><div class="line"><span class="built_in">NSLayoutAttribute</span> secondLayoutAttribute = <span class="keyword">self</span>.secondViewAttribute.layoutAttribute;</div></pre></td></tr></table></figure>
<p>这边是获取即将用于初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code> 的几个属性。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.firstViewAttribute.isSizeAttribute &amp;&amp; !<span class="keyword">self</span>.secondViewAttribute) &#123;</div><div class="line">     secondLayoutItem = <span class="keyword">self</span>.firstViewAttribute.view.superview;</div><div class="line">     secondLayoutAttribute = firstLayoutAttribute;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这边是判断当前即将添加的约束是否是 <code>size</code> 类型的并且 <code>self.secondViewAttribute</code> 也就是约束的第二个参数是 <code>nil</code>，（<code>eg make.left.equalTo(@10)</code>）会自动将约束添加到约束的第一个参数视图的 <code>superview</code> 上。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MASLayoutConstraint *layoutConstraint = [MASLayoutConstraint</div><div class="line">                                 constraintWithItem:firstLayoutItem</div><div class="line">                                        attribute:firstLayoutAttribute</div><div class="line">                                        relatedBy:<span class="keyword">self</span>.layoutRelation</div><div class="line">                                           toItem:secondLayoutItem</div><div class="line">                                        attribute:secondLayoutAttribute</div><div class="line">                                       multiplier:<span class="keyword">self</span>.layoutMultiplier</div><div class="line">                                         constant:<span class="keyword">self</span>.layoutConstant];</div><div class="line">    </div><div class="line">layoutConstraint.priority = <span class="keyword">self</span>.layoutPriority;</div><div class="line">layoutConstraint.mas_key = <span class="keyword">self</span>.mas_key;</div></pre></td></tr></table></figure>
<p>然后就会初始化 <code>NSLayoutConstraint</code> 的子类 <code>MASLayoutConstraint</code>。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.secondViewAttribute.view) &#123;</div><div class="line">    MAS_VIEW *closestCommonSuperview = [<span class="keyword">self</span>.firstViewAttribute.view mas_closestCommonSuperview:<span class="keyword">self</span>.secondViewAttribute.view];</div><div class="line">    <span class="built_in">NSAssert</span>(closestCommonSuperview,</div><div class="line">                 <span class="string">@"couldn't find a common superview for %@ and %@"</span>,</div><div class="line">                 <span class="keyword">self</span>.firstViewAttribute.view, <span class="keyword">self</span>.secondViewAttribute.view);</div><div class="line">    <span class="keyword">self</span>.installedView = closestCommonSuperview;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.firstViewAttribute.isSizeAttribute) &#123;</div><div class="line">    <span class="keyword">self</span>.installedView = <span class="keyword">self</span>.firstViewAttribute.view;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">self</span>.installedView = <span class="keyword">self</span>.firstViewAttribute.view.superview;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码会先判断是否有约束第二个参数的视图，有的话会寻找约束第一个和第二参数视图的公共 <code>Superview</code>，相当于求两个数的最小公倍数；如果不满足第一个条件，会判断约束第一个参数是否是 <code>size</code> 类型的，是的话直接取到它的视图；最后都不满足会直接取到约束第一个参数视图父视图。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">MASLayoutConstraint *existingConstraint = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">self</span>.updateExisting) &#123;</div><div class="line">    existingConstraint = [<span class="keyword">self</span> layoutConstraintSimilarTo:layoutConstraint];</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (existingConstraint) &#123;</div><div class="line">   <span class="comment">// just update the constant</span></div><div class="line">    existingConstraint.constant = layoutConstraint.constant;</div><div class="line">    <span class="keyword">self</span>.layoutConstraint = existingConstraint;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    [<span class="keyword">self</span>.installedView addConstraint:layoutConstraint];</div><div class="line">    <span class="keyword">self</span>.layoutConstraint = layoutConstraint;</div><div class="line">    [firstLayoutItem.mas_installedConstraints addObject:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果需要升级当前的约束就会获取原有的约束，并替换为新的约束，这样就不需要再次为 <code>view</code> 安装约束。如果原来的 <code>view</code> 中不存在可以升级的约束，那么就会在上一步寻找到的 <code>installedView</code> 上面添加约束。</p>
<h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>阅读懂源码真是一件很爽的事情，如果有什么理解的不到位的地方大家多多指正。也希望大家能够耐心的看下去，一定会有所收获的。</p>
<p>参考链接</p>
<p><a href="http://www.cnblogs.com/ludashi/p/5591572.html" target="_blank" rel="external">http://www.cnblogs.com/ludashi/p/5591572.html</a></p>
<p><a href="https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/Masonry/iOS%20%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%20---%20Masonry.md" target="_blank" rel="external">https://github.com/Draveness/iOS-Source-Code-Analyze/blob/master/contents/Masonry/iOS%20%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%20—%20Masonry.md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/SnapKit/Masonry&quot;&gt;Masonry&lt;/a&gt; 是一个轻量级的用于自动布局（AutoLayout）的第三方框架，以其简洁的使用方式，受到广大开发者的青睐。本篇文章将带你一步步的去了解其实现原理，知其所以然！&lt;/p&gt;
&lt;h3 id=&quot;结构概览&quot;&gt;&lt;a href=&quot;#结构概览&quot; class=&quot;headerlink&quot; title=&quot;结构概览&quot;&gt;&lt;/a&gt;结构概览&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/Masonry.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Method Swizzling 实战：优雅的延迟按钮回调</title>
    <link href="http://yoursite.com/2017/02/03/MethodSwizzlingDemo/"/>
    <id>http://yoursite.com/2017/02/03/MethodSwizzlingDemo/</id>
    <published>2017-02-03T13:00:00.000Z</published>
    <updated>2017-02-03T14:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说，我们先来看下效果：</p>
<p><img src="/images/021.gif" alt=""></p>
<p>我们可以发现按钮的用法和系统一样，只是多设置了个<code>xx_delayTime</code>为<code>2.0f秒</code>，下面的打印时间间隔也是对的，优雅！<br><a id="more"></a><br>在我们看下去之前先抛个问题：</p>
<blockquote>
<p><strong>是谁包装 UIButton 的点击事件消息，并完成发送消息？</strong></p>
</blockquote>
<p>搞懂这个问题很关键，如果我们知道了具体包装事件消息的地方以及发送按钮点击事件的时机，那么我们就可以拦截它，决定它是在我们想要的时间返回内发送消息还是继续发送信息。</p>
<p><code>UIButton</code>继承自<code>UIControl</code>，我们很容易就可以在<code>UIControl</code>头文件中找到下面的方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// send the action. the first method is called for the event and is a point at which you can observe or override behavior. it is called repeately by the second.</span></div><div class="line">- (<span class="keyword">void</span>)sendAction:(SEL)action to:(<span class="keyword">nullable</span> <span class="keyword">id</span>)target forEvent:(<span class="keyword">nullable</span> <span class="built_in">UIEvent</span> *)event;</div></pre></td></tr></table></figure>
<p>我们直接上代码看看调用顺序：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestButton</span></span></div><div class="line">- (<span class="keyword">void</span>)sendAction:(SEL)action to:(<span class="keyword">id</span>)target forEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"log1"</span>);</div><div class="line">    [<span class="keyword">super</span> sendAction:action to:target forEvent:event];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"log2"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)setUpButton &#123;</div><div class="line">    [<span class="keyword">self</span>.view addSubview:^&#123;</div><div class="line">        TestButton *btn = [TestButton buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</div><div class="line">        btn.backgroundColor = [<span class="built_in">UIColor</span> blackColor];</div><div class="line">        btn.frame = <span class="built_in">CGRectMake</span>(<span class="number">50.0</span>f, <span class="number">100.0</span>f, <span class="number">150.0</span>f, <span class="number">50.0</span>f);</div><div class="line">        [btn addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(btnClick) forControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>];</div><div class="line">        <span class="keyword">return</span> btn;</div><div class="line">    &#125;()];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)btnClick &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"BtnDidClick"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果：</p>
<p><img src="/images/022.png" alt=""></p>
<p>果不其然：<code>sendAction:to:forEvent:</code>调用优先级较高，它包装了按钮的点击事件消息并完成消息发送！</p>
<p>知道调用顺序就好办了，我们利用 <code>Method Swizzling</code> hook 住<code>sendAction:to:forEvent:</code>做一些事情就行了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.h</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIControl</span> (<span class="title">DelayEvent</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSTimeInterval</span> xx_delayTime;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//.m</span></div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"UIControl+DelayEvent.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIControl</span> (<span class="title">DelayEvent</span>)</span></div><div class="line"></div><div class="line">- (<span class="built_in">NSTimeInterval</span>)xx_delayTime &#123;</div><div class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) doubleValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setXx_delayTime:(<span class="built_in">NSTimeInterval</span>)xx_delayTime &#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>,</div><div class="line">                             <span class="keyword">@selector</span>(xx_delayTime),</div><div class="line">                             @(xx_delayTime),</div><div class="line">                             OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)xx_ignoreEvent &#123;</div><div class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) boolValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setXx_ignoreEvent:(<span class="built_in">BOOL</span>)xx_ignoreEvent &#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>,</div><div class="line">                             <span class="keyword">@selector</span>(xx_ignoreEvent),</div><div class="line">                             @(xx_ignoreEvent),</div><div class="line">                             OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL mySEL = <span class="keyword">@selector</span>(xx_sendAction:to:forEvent:);</div><div class="line">        SEL systemSEL = <span class="keyword">@selector</span>(sendAction:to:forEvent:);</div><div class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</div><div class="line">        Method myM = class_getInstanceMethod(<span class="keyword">class</span>, mySEL);</div><div class="line">        Method systemM = class_getInstanceMethod(<span class="keyword">class</span>, systemSEL);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>,</div><div class="line">                                       mySEL,</div><div class="line">                                       method_getImplementation(systemM),</div><div class="line">                                       method_getTypeEncoding(systemM));</div><div class="line">        <span class="keyword">if</span> (success) &#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>,</div><div class="line">                                systemSEL,</div><div class="line">                                method_getImplementation(myM),</div><div class="line">                                method_getTypeEncoding(myM));</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            method_exchangeImplementations(myM, systemM);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)xx_sendAction:(SEL)action to:(<span class="keyword">id</span>)target forEvent:(<span class="built_in">UIEvent</span> *)event &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.xx_ignoreEvent) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.xx_delayTime &gt; <span class="number">0.0</span>f) &#123;</div><div class="line">        <span class="keyword">self</span>.xx_ignoreEvent = <span class="literal">YES</span>;</div><div class="line">        [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(setXx_ignoreEvent:)</div><div class="line">                   withObject:@(<span class="literal">NO</span>)</div><div class="line">                   afterDelay:<span class="keyword">self</span>.xx_delayTime];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> xx_sendAction:action to:target forEvent:event];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<blockquote>
<p>我这里在<code>UIControl+DelayEvent.h</code>分类里重写了<code>sendAction:to:forEvent:</code>方法，定义了<code>xx_ignoreEvent</code>这个<code>Bool</code>变量，并根据是否需要延迟也就是<code>xx_delayTime</code>变量的值，来决定是否需要通过<code>performSelector:withObject:afterDelay:</code>来延迟调用。</p>
</blockquote>
<p>上面这段代码还牵扯到<code>Runtime</code>两个知识点：</p>
<ul>
<li><strong>Method Swizzling</strong></li>
<li><strong>Associated Objects</strong></li>
</ul>
<p>关于<code>Method Swizzling</code>可以看看我之前的一篇 blog：<a href="http://blog.ifelseboyxx.com/2017/01/25/Method-Swizzling/" target="_blank" rel="external">浅谈 Method Swizzling</a></p>
<p>关于<code>Associated Objects</code>可以看看 <a href="http://blog.leichunfeng.com/" target="_blank" rel="external">雷神</a> 的这篇 blog：<a href="http://blog.leichunfeng.com/blog/2015/06/26/objective-c-associated-objects-implementation-principle/" target="_blank" rel="external">Objective-C Associated Objects 的实现原理</a></p>
<p>最后说个我困惑很久答案却让我莞尔一笑的问题：</p>
<blockquote>
<p>Associated Objects 的 <code>key 值</code> <strong>为什么在<code>getter</code>方法里面用<code>_cmd</code>，而在<code>setter</code>方法里面却用<code>@selector(xxx)</code>，为什么不都用<code>_cmd</code>？</strong></p>
</blockquote>
<p><code>_cmd</code>表示当前方法的 <code>selector</code>，正如同<code>self</code>表示当前方法调用的对象实例一样。在 Associated Objects 中，<strong>绑定同一个属性<code>setter</code>和<code>getter</code>肯定用的是同一个<code>key值</code>！</strong></p>
<p>我们来打印看看就明白了：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSTimeInterval</span>)xx_delayTime &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"getter “_cmd”     -&gt; %@"</span>,<span class="built_in">NSStringFromSelector</span>(_cmd));</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"getter “selector” -&gt; %@"</span>,<span class="built_in">NSStringFromSelector</span>(<span class="keyword">@selector</span>(xx_delayTime)));</div><div class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) doubleValue];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setXx_delayTime:(<span class="built_in">NSTimeInterval</span>)xx_delayTime &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"setter “_cmd”     -&gt; %@"</span>,<span class="built_in">NSStringFromSelector</span>(_cmd));</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>,</div><div class="line">                             <span class="keyword">@selector</span>(xx_delayTime),</div><div class="line">                             @(xx_delayTime),</div><div class="line">                             OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-03</span> <span class="number">21</span>:<span class="number">56</span>:<span class="number">07.366</span> DelayButtonDemo[<span class="number">980</span>:<span class="number">43300</span>] <span class="keyword">setter</span> “_cmd”     -&gt; setXx_delayTime:</div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-03</span> <span class="number">21</span>:<span class="number">56</span>:<span class="number">21.193</span> DelayButtonDemo[<span class="number">980</span>:<span class="number">43300</span>] <span class="keyword">getter</span> “_cmd”     -&gt; xx_delayTime</div><div class="line"><span class="number">2017</span><span class="number">-02</span><span class="number">-03</span> <span class="number">21</span>:<span class="number">56</span>:<span class="number">21.194</span> DelayButtonDemo[<span class="number">980</span>:<span class="number">43300</span>] <span class="keyword">getter</span> “selector” -&gt; xx_delayTime</div></pre></td></tr></table></figure>
<blockquote>
<p><code>setter</code>里面如果用<code>_cmd</code>打印出来是<code>setXx_delayTime:</code>，这样上面的问题也就迎刃而解了!</p>
</blockquote>
<p>最后附上 <a href="https://github.com/ifelseboyxx/DelayButtonDemo" target="_blank" rel="external">Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说，我们先来看下效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/021.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以发现按钮的用法和系统一样，只是多设置了个&lt;code&gt;xx_delayTime&lt;/code&gt;为&lt;code&gt;2.0f秒&lt;/code&gt;，下面的打印时间间隔也是对的，优雅！&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>浅谈 Method Swizzling</title>
    <link href="http://yoursite.com/2017/01/25/Method-Swizzling/"/>
    <id>http://yoursite.com/2017/01/25/Method-Swizzling/</id>
    <published>2017-01-25T13:28:02.000Z</published>
    <updated>2017-01-25T15:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果对 Runtime 有一定了解的话，一定听说过或者用过这个函数：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OBJC_EXPORT <span class="keyword">void</span> method_exchangeImplementations(Method m1, Method m2)</div></pre></td></tr></table></figure>
<p>它通常叫做 Method Swizzling，算是<code>objc</code>的 “黑魔法” 了，作用就是在程序运行期间动态的给两个方法互换实现。</p>
<p>最近有用到这个，总结下遇到的一些问题：</p>
<h4 id="静态（类）方法和实例方法的交换实现方式一样吗？"><a href="#静态（类）方法和实例方法的交换实现方式一样吗？" class="headerlink" title="静态（类）方法和实例方法的交换实现方式一样吗？"></a>静态（类）方法和实例方法的交换实现方式一样吗？</h4><p>交换静态（类）方法的正确姿势：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)go &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Go!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Stop!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>交换实例方法的正确姿势：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</div><div class="line">        Method m1 = class_getInstanceMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getInstanceMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)go &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Go!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Stop!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以发现上面两段方法的区别在于：</p>
<p>静态（类）方法的<code>Class</code>和<code>Method</code>是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div></pre></td></tr></table></figure>
<p>实例方法的<code>Class</code>和<code>Method</code>是这样的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</div><div class="line">Method m1 = class_getInstanceMethod(<span class="keyword">class</span>, s1);</div><div class="line">Method m2 = class_getInstanceMethod(<span class="keyword">class</span>, s2);</div></pre></td></tr></table></figure>
<p>Runtime 中<code>class_getClassMethod</code>的实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Method class_getClassMethod(Class cls, SEL sel)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!cls  ||  !sel) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> class_getInstanceMethod(cls-&gt;getMeta(), sel);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家可以下载 <a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="external">Runtime 源码</a> 看看。</p>
<p>其实<code>class_getClassMethod</code>内就是调了下<code>class_getInstanceMethod</code>，只是传的<code>Class</code>参数不一样：</p>
<ul>
<li><code>class_getClassMethod</code> 中<code>Class</code>参数传的是元类，也就是类对象的类。（关于元类大家可以看看这篇翻译的文章 <a href="http://ios.jobbole.com/81657/" target="_blank" rel="external">Objective-C 中的元类（meta class）是什么？</a>）</li>
<li><code>class_getInstanceMethod</code>中<code>Class</code> 参数看名字就可以理解，既然是获得实例方法，自然传的就是实例对象的类。</li>
</ul>
<p>那 <code>object_getClass(id obj)</code> 又是什么呢？还是看源码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Class object_getClass(<span class="keyword">id</span> obj)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) <span class="keyword">return</span> obj-&gt;getIsa();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>object_getClass()</code> 就是顺着 isa 的指向链找到对应的类。</p>
<p>有兴趣的可以看看这篇文章：<a href="http://ios.jobbole.com/91962/" target="_blank" rel="external">为什么 object_getClass(obj) 与 [OBJ class] 返回的指针不同</a></p>
<h4 id="静态（类）方法和实例方法里面的-self-表示的含义一样吗？"><a href="#静态（类）方法和实例方法里面的-self-表示的含义一样吗？" class="headerlink" title="静态（类）方法和实例方法里面的 self 表示的含义一样吗？"></a>静态（类）方法和实例方法里面的 self 表示的含义一样吗？</h4><p>先说明下为什么我会突然有这个疑问：</p>
<p>当初为了方便测试交换两个静态方法的实现，我直接撸了这一段代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(test1);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(test2);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    [ViewController test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)test1 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"test1"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)test2 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"test2"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-25 17:13:53.356 RuntimeDemo[16180:4689887] test1</div><div class="line">2017-01-25 17:13:53.356 RuntimeDemo[16180:4689887] test2</div></pre></td></tr></table></figure>
<p>居然交换失败了！</p>
<p>然后我尝试着把代码挪到 <code>+ (void)load{}</code> 里面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = @selector(test1);</div><div class="line">        SEL s2 = @selector(test2);</div><div class="line">        Class class = object_getClass((id)self);</div><div class="line">        Method m1 = class_getClassMethod(class, s1);</div><div class="line">        Method m2 = class_getClassMethod(class, s2);</div><div class="line">        BOOL success = class_addMethod(class, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        if (success)&#123;</div><div class="line">            class_replaceMethod(class, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        else&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line"></div><div class="line">    [ViewController test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-25 17:23:32.739 RuntimeDemo[16212:4705811] test2</div><div class="line">2017-01-25 17:23:32.739 RuntimeDemo[16212:4705811] test1</div></pre></td></tr></table></figure>
<p>可以发现交换成功了！</p>
<p>在找原因之前我们先来看一张经典的图：</p>
<p><img src="/images/011.png" alt=""></p>
<p>从左到右依次是：实例对象、类对象、元类（类对象的类）。</p>
<p>我们通常这样来获取这三个对象：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Person *obj = [Person new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"instance         :%p"</span>, obj);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"class            :%p"</span>, object_getClass(obj));</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"meta class       :%p"</span>, object_getClass(object_getClass(obj)));</div></pre></td></tr></table></figure>
<p>我们来大胆猜想下：<strong>在实例方法中，<code>self</code>表示的是实例对象这个大家都知道，那在类（静态）方法中<code>self</code>表示的是不是就是实例对象的类，也就是类对象呢？</strong>我们直接撸代码来验证下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)test1 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,<span class="keyword">self</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)test2 &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,<span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2017-01-25 22:54:37.325 RuntimeDemo[3841:159827] 0x7ff6ee50ac00</div><div class="line">2017-01-25 22:54:38.752 RuntimeDemo[3841:159827] 0x100ec0fe0</div><div class="line">2017-01-25 22:54:42.740 RuntimeDemo[3841:159827] 0x100ec0fe0</div></pre></td></tr></table></figure>
<p>果然不出所料，我们的大胆猜想是正确的。</p>
<p>回过头，我们修改下实例方法中交换的实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">       	····</div><div class="line">       	</div><div class="line">       	Class <span class="keyword">class</span> = object_getClass(object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>));</div><div class="line">      </div><div class="line">      	····</div><div class="line">       &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    [ViewController test1];</div><div class="line">    [ViewController test2];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印结果也自然而然的交换成功了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2017-01-25 23:02:12.579 RuntimeDemo[3926:164600] test2</div><div class="line">2017-01-25 23:02:12.580 RuntimeDemo[3926:164600] test1</div></pre></td></tr></table></figure>
<h4 id="网上的-Method-Swizzling-有两种写法，到底哪种靠谱？"><a href="#网上的-Method-Swizzling-有两种写法，到底哪种靠谱？" class="headerlink" title="网上的 Method Swizzling 有两种写法，到底哪种靠谱？"></a>网上的 Method Swizzling 有两种写法，到底哪种靠谱？</h4><p>两种写法分别如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        <span class="keyword">if</span> (success)&#123;</div><div class="line">            class_replaceMethod(<span class="keyword">class</span>, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        method_exchangeImplementations(m1, m2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一种多了个判断，第二种是直接交换。</p>
<p>文章一开始也说了，第一种是比较严谨的写法；而第二种，<strong>当我们想交换有多个继承关系的子类里面的方法并且子类没有实现父类的方法时，直接<code>method_exchangeImplementations</code>会把父类的方法也给交换了</strong>，一般这不是我们想要的结果，下面我们直接撸代码来验证下：</p>
<p>父类 Person</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.h</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="comment">//静态(类) 方法</span></div><div class="line">+ (<span class="keyword">void</span>)go;</div><div class="line">+ (<span class="keyword">void</span>)stop;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">.m</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)go &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Go!"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)stop &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Stop!"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>子类 Programmer</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">.h</div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"Person.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Programmer</span> : <span class="title">Person</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">.m</div><div class="line"></div><div class="line"><span class="meta">#import <span class="meta-string">"Programmer.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Programmer</span></span></div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)load &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        SEL s1 = <span class="keyword">@selector</span>(go);</div><div class="line">        SEL s2 = <span class="keyword">@selector</span>(stop);</div><div class="line">        Class <span class="keyword">class</span> = object_getClass((<span class="keyword">id</span>)<span class="keyword">self</span>);</div><div class="line">        Method m1 = class_getClassMethod(<span class="keyword">class</span>, s1);</div><div class="line">        Method m2 = class_getClassMethod(<span class="keyword">class</span>, s2);</div><div class="line">        method_exchangeImplementations(m1, m2);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//+ (void)go &#123;</span></div><div class="line"><span class="comment">//    NSLog(@"Programmer - go");</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//+ (void)stop &#123;</span></div><div class="line"><span class="comment">//    NSLog(@"Programmer - stop");</span></div><div class="line"><span class="comment">//&#125;</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>调用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    [Person go];</div><div class="line">    [Person stop];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------"</span>);</div><div class="line">    [Programmer go];</div><div class="line">    [Programmer stop];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先，我们只实现父类的 <code>go</code> 和 <code>stop</code> 这两个静态方法，打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2017-01-25 23:30:12.850 RuntimeDemo[4180:180408] Stop!</div><div class="line">2017-01-25 23:30:12.851 RuntimeDemo[4180:180408] Go!</div><div class="line">2017-01-25 23:30:12.851 RuntimeDemo[4180:180408] ---------</div><div class="line">2017-01-25 23:30:12.851 RuntimeDemo[4180:180408] Stop!</div><div class="line">2017-01-25 23:30:12.852 RuntimeDemo[4180:180408] Go!</div></pre></td></tr></table></figure>
<p>可以发现，<strong>子类<code>Programmer</code>没有实现父类的方法直接交换时， 父类<code>Person</code>的方法也被交换了！</strong></p>
<p>我们接着打开子类的 <code>go</code> 和 <code>stop</code> 这两个静态方法，打印如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2017-01-25 23:32:22.953 RuntimeDemo[4215:181987] Go!</div><div class="line">2017-01-25 23:32:22.954 RuntimeDemo[4215:181987] Stop!</div><div class="line">2017-01-25 23:32:22.956 RuntimeDemo[4215:181987] ---------</div><div class="line">2017-01-25 23:32:22.956 RuntimeDemo[4215:181987] Programmer - stop</div><div class="line">2017-01-25 23:32:22.956 RuntimeDemo[4215:181987] Programmer - go</div></pre></td></tr></table></figure>
<p>可以发现，<strong>子类实现了父类的方法，直接交换也是没有问题的！</strong></p>
<p>我们加上判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        ...</div><div class="line">        </div><div class="line">        BOOL success =  class_addMethod(class, s1, method_getImplementation(m2), method_getTypeEncoding(m2));</div><div class="line">        if (success)&#123;</div><div class="line">            class_replaceMethod(class, s2, method_getImplementation(m1), method_getTypeEncoding(m1));</div><div class="line">        &#125;else&#123;</div><div class="line">            method_exchangeImplementations(m1, m2);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ...</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把上面两种情况在试验下，可以发现<strong>交换的仅仅是子类<code>Programmer</code>的方法，父类<code>Person</code>是没有被交换的！</strong>大家可以自己尝试下。</p>
<p>稍稍的解释下：</p>
<p><code>class_addMethod</code>函数会检查方法有没有实现，如果已经实现会返回 NO ，也就是直接走<code>method_exchangeImplementations</code>方法；没有实现会先在当前类增加一个新的实现方法，再把目标类中的方法通过<code>class_replaceMethod</code>函数替换为旧有的实现；</p>
<h4 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h4><p>以上就是我遇到的问题，希望对大家能有点帮助。最后也希望大家能够亲自动手敲一遍，加深下印象。</p>
<p>参考链接</p>
<p><a href="http://ios.jobbole.com/91962/" target="_blank" rel="external">http://ios.jobbole.com/91962/</a></p>
<p><a href="http://ios.jobbole.com/81657/" target="_blank" rel="external">http://ios.jobbole.com/81657/</a></p>
<p><a href="http://blog.csdn.net/horkychen/article/details/8532087" target="_blank" rel="external">http://blog.csdn.net/horkychen/article/details/8532087</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果对 Runtime 有一定了解的话，一定听说过或者用过这个函数：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;OBJC_EXPORT &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; method_exchangeImplementations(Method m1, Method m2)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它通常叫做 Method Swizzling，算是&lt;code&gt;objc&lt;/code&gt;的 “黑魔法” 了，作用就是在程序运行期间动态的给两个方法互换实现。&lt;/p&gt;
&lt;p&gt;最近有用到这个，总结下遇到的一些问题：&lt;/p&gt;
&lt;h4 id=&quot;静态（类）方法和实例方法的交换实现方式一样吗？&quot;&gt;&lt;a href=&quot;#静态（类）方法和实例方法的交换实现方式一样吗？&quot; class=&quot;headerlink&quot; title=&quot;静态（类）方法和实例方法的交换实现方式一样吗？&quot;&gt;&lt;/a&gt;静态（类）方法和实例方法的交换实现方式一样吗？&lt;/h4&gt;&lt;p&gt;交换静态（类）方法的正确姿势：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)load &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        SEL s1 = &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(go);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        SEL s2 = &lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(stop);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; = object_getClass((&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Method m1 = class_getClassMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Method m2 = class_getClassMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; success = class_addMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s1, method_getImplementation(m2), method_getTypeEncoding(m2));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (success)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            class_replaceMethod(&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, s2, method_getImplementation(m1), method_getTypeEncoding(m1));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            method_exchangeImplementations(m1, m2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)go &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Go!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)stop &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Stop!&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义 Xcode ViewController 类模板</title>
    <link href="http://yoursite.com/2017/01/02/Xcode-VC-Template/"/>
    <id>http://yoursite.com/2017/01/02/Xcode-VC-Template/</id>
    <published>2017-01-02T11:46:23.000Z</published>
    <updated>2017-02-07T15:49:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>话不多说我们先来体验下 :</p>
<p><img src="/images/VC.gif" alt=""></p>
<h3 id="什么是-Xcode-类模板-？"><a href="#什么是-Xcode-类模板-？" class="headerlink" title="什么是 Xcode 类模板 ？"></a>什么是 Xcode 类模板 ？</h3><p>说到 Xcode 类模板有些人可能觉得陌生，其实作为一名 iOS 开发，我们每天都会用到 Xcode 类模板，例如创建一个 UIViewController，一个 Category 等等，这些其实都是 Xcode 帮我们集成好的模板。<br><a id="more"></a><br><a name="options" style="color:#666;border-bottom:none;" ;="">创建系统 VC 模版 :</a></p>
<p><img src="/images/01.png" alt=""></p>
<h3 id="为什么要自定义-Xcode-类模板-？"><a href="#为什么要自定义-Xcode-类模板-？" class="headerlink" title="为什么要自定义 Xcode 类模板 ？"></a>为什么要自定义 Xcode 类模板 ？</h3><p>当我们用 Xcode 自带的模板创建一个 UIViewController 的子类时，我们会发现 <code>.m</code> 文件会多出一些方法 :</p>
<p><img src="/images/02.png" alt=""></p>
<p>而我们平时的开发中，或多或少都有自己的一些规范，尤其是在多人合作开发的情况下，一些好的开发规范是相当必要的。</p>
<p><a name="我的VC模版" style="color:#666;border-bottom:none;">我的 UIViewController 规范</a> :</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"MyViewController.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyViewController</span> ()</span></div><div class="line"><span class="comment">// &lt;UITableViewDelegate,UITableViewDataSource&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyViewController</span></span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - LifeCyle</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">[<span class="keyword">super</span> viewDidLoad];</div><div class="line">&#125;</div><div class="line"><span class="comment">/*</span></div><div class="line">- (void)viewWillAppear:(BOOL)animated &#123;</div><div class="line">[super viewWillAppear:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidAppear:(BOOL)animated &#123;</div><div class="line">[super viewDidAppear:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillDisappear:(BOOL)animated &#123;</div><div class="line">[super viewWillDisappear:animated];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(void)viewDidDisappear:(BOOL)animated &#123;</div><div class="line">[super viewDidDisappear:animated];</div><div class="line">&#125;</div><div class="line">**/</div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@-释放了"</span>,<span class="keyword">self</span>.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Intial Methods</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Target Methods</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Private Method</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - Setter Getter Methods</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - External Delegate</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - UITableViewDelegate,UITableViewDataSource</span></div><div class="line"><span class="comment">/*</span></div><div class="line">- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView &#123;</div><div class="line">return &lt;#section#&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section &#123;</div><div class="line">return &lt;#row#&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">return &lt;# UITableViewCell #&gt;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">return &lt;#height#&gt;;</div><div class="line">&#125;</div><div class="line">**/</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这么一堆东西写起来也是要点时间的，如果每创建个 VC 就要写一遍也太不优雅了。</p>
<p><strong>有没有什么办法能够在我们创建 VC 的时候自动生成这些呢？</strong></p>
<h3 id="创建自己的-Xcode-类模板"><a href="#创建自己的-Xcode-类模板" class="headerlink" title="创建自己的 Xcode 类模板"></a>创建自己的 Xcode 类模板</h3><p>一份成品模版结构大概这样 :</p>
<p><img src="/images/03.png" alt=""></p>
<p>介绍下里面的东西 (<code>xxx</code> 就是你自定义模版的名字) :</p>
<blockquote>
<p><strong>xxx.xctemplate：</strong>模版文件。</p>
<p><strong>xxxObjective-C：</strong>OC 模版文件，里面包含 <code>___FILEBASENAME___.h</code> 和 <code>___FILEBASENAME___.m</code> 两个文件。</p>
<p><strong>xxxXIBObjective-C：</strong>比 <code>xxxObjective-C</code> 多了个 <code>___FILEBASENAME___.xib</code> 文件，可自定义。</p>
<p><strong>xxxSwift：</strong>Swift模版文件，里面包含一个 <code>___FILEBASENAME___.swift</code> 文件。</p>
<p><strong>xxxXIBSwift：</strong>比 <code>xxxSwift</code> 多了个 <code>___FILEBASENAME___.xib</code> 文件，可自定义。</p>
<p><strong>TemplateIcon.png：</strong>模版显示的图片。</p>
<p><strong>TemplateInfo.plist：</strong>模版的配置信息，<strong><a href="#TemplateInfo.plist">介绍</a></strong>。</p>
</blockquote>
<p>重新写一份模版太繁琐，我们<strong>直接拷贝一份系统的模版来修改</strong> ：</p>
<ul>
<li>拷贝 <code>Cocoa Class.xctemplate</code>，修改名称并删除不需要的文件。（我这边是  <code>Xcode 8.2.1</code>, 以后路径可能有变）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/Source</div></pre></td></tr></table></figure>
<ul>
<li>修改 <code>.h</code> 为 ：</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  ___FILENAME___</span></div><div class="line"><span class="comment">//  ___PROJECTNAME___</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></div><div class="line"><span class="comment">//___COPYRIGHT___</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line">___IMPORTHEADER_cocoaSubclass___</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">___FILEBASENAMEASIDENTIFIER___</span> : <span class="title">UIViewController</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>修改 <code>.m</code> 只需要添加自己需要的规范就行，可以参考 <strong><a href="#我的VC模版">我的VC模版</a></strong>。</li>
<li>修改 <code>.swift</code> 为: </li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  ___FILENAME___</span></div><div class="line"><span class="comment">//  ___PROJECTNAME___</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//  Created by ___FULLUSERNAME___ on ___DATE___.</span></div><div class="line"><span class="comment">//___COPYRIGHT___</span></div><div class="line"><span class="comment">//</span></div><div class="line"></div><div class="line">import <span class="built_in">UIKit</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> ___FILEBASENAMEASIDENTIFIER___: <span class="built_in">UIViewController</span> &#123;</div><div class="line"></div><div class="line"><span class="comment">//MARK: - LifeCyle</span></div><div class="line"></div><div class="line">override func viewDidLoad() &#123;</div><div class="line"><span class="keyword">super</span>.viewDidLoad()</div><div class="line">&#125;</div><div class="line"></div><div class="line">deinit &#123;</div><div class="line">print(<span class="string">"\(object_getClassName(self)) - 释放了!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//MARK: - Intial Methods</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - Target Methods</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - Private Method</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - Setter Getter Methods</span></div><div class="line"></div><div class="line"><span class="comment">//MARK: - External Delegate</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>新建 <code>.xib</code> 重命名 <code>___FILEBASENAME___.xib</code> 并按照下图修改:</li>
</ul>
<p><img src="/images/04.png" alt=""></p>
<p><img src="/images/05.png" alt=""></p>
<p>上面 <code>.h</code> <code>.m</code> 里面 有些词可能不明白，这里再稍稍解释下：</p>
<blockquote>
<p>1）<strong>DATE：</strong>标识当前时间；</p>
<p>2）<strong>FILENAME：</strong>带文件后缀的全名；</p>
<p>3）<strong>FILEBASENAME：</strong>不带文件后缀的名字；</p>
<p>4）<strong>FULLUSERNAME：</strong>当前的用户名；</p>
<p>6）<strong>PROJECTNAME：</strong>工程名字；</p>
<p>7）<strong>FILEBASENAMEASIDENTIFIER：</strong> VC类名称；</p>
<p>8）<strong>IMPORTHEADER_cocoaSubclass：</strong> 导入的头文件。</p>
</blockquote>
<h4 id="TemplateInfo-plist"><a href="#TemplateInfo-plist" class="headerlink" title="TemplateInfo.plist"></a><a name="TemplateInfo.plist" style="color:#666;border-bottom:none;">TemplateInfo.plist</a></h4><p><img src="/images/06.png" alt=""></p>
<p>讲解一些需要改动的东西 :</p>
<blockquote>
<p><strong>SortOrder：</strong>模版在界面中的位置；</p>
<p><strong>Options：</strong>对应 <strong><a href="#options">图中</a></strong> 四行；</p>
<p><strong>FallbackHeader：</strong><code>.h</code> 导入的头文件；</p>
<p><strong>RequiredOptions -&gt; cocoaSubclass：</strong>是否支持选择 xib；<code>Default</code> 默认 <code>true</code> 自动勾选；</p>
<p><strong>Values：</strong>自定义模版的名称(一定要保持一致);</p>
<p><strong>Suffixes：</strong>模版默认类名，效果如下图。</p>
</blockquote>
<p><img src="/images/07.gif" alt=""></p>
<p>最后把创建好的 <code>xxx.xctemplate</code> 文件直接拷贝到系统路径下就可以直接使用了:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/Source</div></pre></td></tr></table></figure>
<h3 id="修改系统模板"><a href="#修改系统模板" class="headerlink" title="修改系统模板"></a>修改系统模板</h3><p>平常开发中，我们经常用<code>xib</code>来画一个<code>View</code>，之前用系统的模板创建<code>View</code>的时候是有勾选是否创建对应<code>xib</code>的这个选项的，苹果不知道什么时候改了，现在貌似不行了：</p>
<p><img src="/images/08.png" alt=""></p>
<p>这样导致我们创建完<code>View</code>后，还需要再创建个对应的<code>xib</code>文件，简直神烦！<br>怎么能自动创建<code>xib</code>文件呢？我们完全可以修改系统的模板来满足我们的刚需：</p>
<ul>
<li><p>进入目录，找到<code>Cocoa Touch Class.xctemplate</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates/Source</div></pre></td></tr></table></figure>
</li>
<li><p>拷贝一份 <code>UIViewObjective-C</code>文件并改名为<code>UIViewXIBObjective-C</code>，然后到其他有<code>xib</code>的文件夹里面，拷贝一份<code>xib</code>到<code>UIViewXIBObjective-C</code>里面，<code>xib</code>可自行修改。（我这里只配置了<code>Objective-C</code>的，<code>Swift</code>步骤类似）</p>
</li>
<li>找到 当前目录的<code>TemplateInfo.plist</code>文件，如下修改：</li>
</ul>
<p><img src="/images/09.png" alt=""></p>
<ul>
<li>重新创建系统 <code>View</code>模板：</li>
</ul>
<p><img src="/images/10.png" alt=""></p>
<p>大功告成！</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>放上我自己的一个 <strong><a href="https://github.com/ifelseboyxx/CustomXcodeTempate" target="_blank" rel="external">UIViewController 模板</a></strong> 懒得自己写的可以直接用或者在我的模板基础上修改！</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.jianshu.com/p/93527682d8d3" target="_blank" rel="external">http://www.jianshu.com/p/93527682d8d3</a></p>
<p><a href="http://www.bobmccune.com/2012/03/04/creating-custom-xcode-4-file-templates/" target="_blank" rel="external">http://www.bobmccune.com/2012/03/04/creating-custom-xcode-4-file-templates/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话不多说我们先来体验下 :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/VC.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是-Xcode-类模板-？&quot;&gt;&lt;a href=&quot;#什么是-Xcode-类模板-？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Xcode 类模板 ？&quot;&gt;&lt;/a&gt;什么是 Xcode 类模板 ？&lt;/h3&gt;&lt;p&gt;说到 Xcode 类模板有些人可能觉得陌生，其实作为一名 iOS 开发，我们每天都会用到 Xcode 类模板，例如创建一个 UIViewController，一个 Category 等等，这些其实都是 Xcode 帮我们集成好的模板。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
</feed>
